<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>01 MySQL 笔记</title>
      <link href="/2024/06/29/00-%E9%BB%91%E9%A9%ACMySQL/"/>
      <url>/2024/06/29/00-%E9%BB%91%E9%A9%ACMySQL/</url>
      
        <content type="html"><![CDATA[<h1>MySQL基础</h1><hr><h2 id="MySQL的概述"><a class="headerlink" href="#MySQL的概述"></a>MySQL的概述</h2><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240629105741367.png" alt="数据库 vs 数据库管理系统 vs SQL" loading="lazy"></p><hr><p><strong>关系型数据库（RDBMS）</strong></p><ul><li>概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库<ul><li>就是通过表来存储数据的数据库就是关系型数据库</li><li>那不通过表存储数据的数据库就是非关系型数据库</li></ul></li><li>特点：<ul><li>使用表存储数据，格式统一，便于维护</li><li>使用SQL语言操作，标准统一，使用方便</li></ul></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240629110100653.png" alt="RDBMS举例" loading="lazy"></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240629110335692.png" alt="MySQL数据库的数据模型" loading="lazy"></p><hr><h2 id="SQL"><a class="headerlink" href="#SQL"></a>SQL</h2><hr><h3 id="SQL通用语法"><a class="headerlink" href="#SQL通用语法"></a>SQL通用语法</h3><hr><ol><li>SQL语句可以单行或多行书写，以 <strong>分号</strong> 结尾</li><li>SQL语句可以使用 <strong>空格 / 缩进</strong> 来增强语句的可读性</li><li>MySQL数据库的SQL语句不区分大小写，<strong>关键字</strong> 建议使用 <strong>大写</strong></li><li>单行注释：<code>--注释内容</code> 或 <code># 注释内容</code></li><li>多行注释：<code>/* 注释内容 */</code></li></ol><hr><h3 id="SQL的分类"><a class="headerlink" href="#SQL的分类"></a>SQL的分类</h3><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240629111008078.png" alt="SQL的分类" loading="lazy"></p><hr><h3 id="DDL"><a class="headerlink" href="#DDL"></a>DDL</h3><hr><h4 id="数据库操作"><a class="headerlink" href="#数据库操作"></a>数据库操作</h4><hr><p><strong>查询</strong></p><ul><li><p>查询所有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure></li><li><p>查询当前数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> database();</span><br></pre></td></tr></table></figure></li><li><p>创建数据库</p><ul><li><code>if not exists</code> 参数来解决这个问题，数据库不存在, 则创建该数据库，如果存在，则不创建</li><li><code>utf8mb4</code>：支持4个字节</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database </span><br><span class="line">[ if <span class="keyword">not</span> <span class="keyword">exists</span> ] 数据库名 </span><br><span class="line">[ <span class="keyword">default</span> charset 字符集 ] </span><br><span class="line">[ <span class="keyword">collate</span> 排序规则 ];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- [] 中是可以选择加不加</span></span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><ul><li>加上参数 <code>if exists</code> ，如果数据库存在，再执行删除，否则不执行删除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database [ if <span class="keyword">exists</span> ] 数据库名;</span><br></pre></td></tr></table></figure></li><li><p>切换数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure></li><li><p>查看当前所在的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="表操作"><a class="headerlink" href="#表操作"></a>表操作</h4><hr><p><strong>查询</strong></p><ul><li>查询当前数据库所有表</li></ul>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><ul><li><p>查询表结构</p><ul><li>通过这条指令，我们可以查看到指定表的字段，字段的类型、是否可以为NULL，是否存在默认值等信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p>查询指定表的建表语句</p></li></ul>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><p><strong>创建</strong></p><ul><li><p>创建表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 字段<span class="number">1</span>类型 [ COMMENT 字段<span class="number">1</span>注释 ],</span><br><span class="line">字段<span class="number">2</span> 字段<span class="number">2</span>类型 [ COMMENT 字段<span class="number">2</span>注释 ],</span><br><span class="line">字段<span class="number">3</span> 字段<span class="number">3</span>类型 [ COMMENT 字段<span class="number">3</span>注释 ],</span><br><span class="line">......</span><br><span class="line">字段n 字段n类型 [ COMMENT 字段n注释 ]</span><br><span class="line">) [ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure></li></ul><p><strong>数据类型</strong></p><ol><li><p>数值类型</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240629124939993.png" alt="数值类型" loading="lazy"></p></li><li><p>字符串类型</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240629125239692.png" alt="字符串类型" loading="lazy"></p><ul><li>blob 是描述二进制数据的，text 是描述文本数据的</li><li><strong>char</strong> 是 <strong>定长字符串</strong>，指定长度多长，就占用多少个字符，和字段值的长度无关</li><li><strong>varchar</strong> 是 <strong>变长字符串</strong>，指定的长度为最大占用长度 。相对来说，char的性能会更高些</li></ul></li><li><p>日期时间类型</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240629130617457.png" alt="日期时间类型" loading="lazy"></p></li></ol><p><strong>修改</strong></p><ul><li><p>添加字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 数据类型(长度) [comment 注释] [约束];</span><br></pre></td></tr></table></figure></li><li><p>修改数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 字段名 新数据类型(长度);</span><br></pre></td></tr></table></figure></li><li><p>修改字段名和字段类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束];</span><br></pre></td></tr></table></figure></li><li><p>删除字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br></pre></td></tr></table></figure></li><li><p>修改表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 rename <span class="keyword">to</span> 新表名;</span><br></pre></td></tr></table></figure></li></ul><p><strong>删除</strong></p><ul><li><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [if <span class="keyword">exists</span>] 表名;</span><br></pre></td></tr></table></figure></li><li><p>删除指定表，并重新创建该表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="DML"><a class="headerlink" href="#DML"></a>DML</h3><hr><ul><li><p>添加数据（<strong>INSERT</strong>）</p></li><li><p>修改数据（<strong>UPDATE</strong>）</p></li><li><p>删除数据（<strong>DELETE</strong>）</p></li></ul><hr><h4 id="添加数据"><a class="headerlink" href="#添加数据"></a>添加数据</h4><ul><li><p>给 指定字段 添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">values</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure></li><li><p>给 全部字段 添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure></li><li><p>批量 添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">values</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意事项</strong>：</p><ol><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的</li><li>字符串和日期型数据应该包含在引号中</li><li>插入的数据大小，应该在字段的规定范围内</li></ol><hr><h4 id="修改数据"><a class="headerlink" href="#修改数据"></a>修改数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span>, 字段名<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span>, ... [<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ul><li>修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据</li></ul><hr><h4 id="删除数据"><a class="headerlink" href="#删除数据"></a>删除数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件]</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li><p>delete 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据</p></li><li><p>delete 语句不能删除某一个字段的值（可以使用 update，将该字段值置为NULL即可）</p></li></ol><hr><h3 id="DQL"><a class="headerlink" href="#DQL"></a>DQL</h3><hr><p>查询关键字：<code>select</code></p><p><strong>DQL的语法结构</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><hr><h4 id="基本查询（不带任何条件）"><a class="headerlink" href="#基本查询（不带任何条件）"></a>基本查询（不带任何条件）</h4><ul><li><p>查询多个字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>, 字段<span class="number">2</span>, 字段<span class="number">3.</span>.. <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p>设置别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span> [<span class="keyword">as</span> 别名<span class="number">1</span>], 字段<span class="number">2</span> [<span class="keyword">as</span> 别名<span class="number">2</span>] ... <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置别名字段要用 字符串 形式</span></span><br></pre></td></tr></table></figure></li><li><p>去除重复记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段列表 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="条件查询（where）"><a class="headerlink" href="#条件查询（where）"></a>条件查询（where）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件列表;</span><br></pre></td></tr></table></figure><ul><li><p>条件列表：</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240629142223853.png" alt="条件列表" loading="lazy"></p></li></ul><hr><h4 id="聚合函数（count、max、min、avg、sum）"><a class="headerlink" href="#聚合函数（count、max、min、avg、sum）"></a>聚合函数（count、max、min、avg、sum）</h4><p>将一列数据作为一个整体，进行纵向计算</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240629143701748.png" alt="常见的聚合函数" loading="lazy"></p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 聚合函数(字段列表) <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ul><li>NULL 值是不参与所有聚合函数运算的</li></ul><hr><h4 id="分组查询（group-by）"><a class="headerlink" href="#分组查询（group-by）"></a>分组查询（group by）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件] <span class="keyword">group</span> <span class="keyword">by</span> 分组字段名 [<span class="keyword">having</span> 分组后过滤条件];</span><br></pre></td></tr></table></figure><ul><li><strong>where 与 having 的区别</strong>：<ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以</li></ul></li></ul><p><strong>注意事项</strong>：</p><ol><li><p>分组之后，查询的字段一般为 分组之后的字段 和 聚合函数，查询其他字段无任何意义</p></li><li><p>执行顺序：<strong>where &gt; 聚合函数 &gt; having</strong></p></li><li><p>支持多字段分组, 具体语法为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> columnA, columnB</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="排序查询（order-by）"><a class="headerlink" href="#排序查询（order-by）"></a>排序查询（order by）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span> , 字段<span class="number">2</span> 排序方式<span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>排序方式：<ul><li><code>asc</code>：升序（默认值）</li><li><code>desc</code>：降序</li></ul></li></ul><p><strong>注意事项</strong>：</p><ol><li>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</li><li>如果是升序, 可以不指定排序方式ASC</li></ol><hr><h4 id="分页查询（limit）"><a class="headerlink" href="#分页查询（limit）"></a>分页查询（limit）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 limit 起始索引, 查询记录数;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li>起始索引从 0 开始，<em><em>起始索引 = （查询页码 - 1）</em> 每页显示记录数</em>*</li><li>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是 limit</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10</li></ol><p><strong>DQL语句的执行顺序</strong>：</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240629151538901.png" alt="DQL的执行顺序" loading="lazy"></p><hr><h3 id="DCL"><a class="headerlink" href="#DCL"></a>DCL</h3><hr><h4 id="管理用户"><a class="headerlink" href="#管理用户"></a>管理用户</h4><hr><ul><li><p>查询用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure></li><li><p>创建用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意事项</strong>：</p><ol><li>在MySQL中需要通过 <code>用户名@主机名</code> 的方式，来唯一标识一个用户</li><li>主机名可以使用 <code>%</code> 通配</li><li>这类SQL开发人员操作的比较少，主要是DBA（ Database Administrator 数据库管理员）使用</li></ol><hr><h4 id="权限控制"><a class="headerlink" href="#权限控制"></a>权限控制</h4><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240630101132966.png" alt="权限列表" loading="lazy"></p><ul><li><p>查询权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>赋予权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 所有权限可以用 all</span></span><br></pre></td></tr></table></figure></li><li><p>撤销权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">from</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意事项</strong>：</p><ol><li>多个权限之间，使用 逗号 分隔</li><li>授权时， 数据库名和表名可以使用 <code>*</code> 进行通配，代表所有</li></ol><hr><h2 id="函数"><a class="headerlink" href="#函数"></a>函数</h2><hr><h3 id="字符串函数"><a class="headerlink" href="#字符串函数"></a>字符串函数</h3><hr><ul><li><p>字符串拼接，将S1，S2，… Sn拼接成一个字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat(S1, S2, ... Sn)</span><br></pre></td></tr></table></figure></li><li><p>将字符串 str 全部转为 小写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lower</span>(str)</span><br></pre></td></tr></table></figure></li><li><p>将字符串 str 全部转为 大写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">upper</span>(str)</span><br></pre></td></tr></table></figure></li><li><p>左填充，用字符串 pad 对 str 的 左边 进行填充，达到n个字符串长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpad(str, n, pad)</span><br></pre></td></tr></table></figure></li><li><p>右填充，用字符串 pad 对 str 的 右边 进行填充，达到n个字符串长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpad(str, n, pad)</span><br></pre></td></tr></table></figure></li><li><p>去掉字符串头部和尾部的空格</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">trim</span>(str)</span><br></pre></td></tr></table></figure></li><li><p>返回从字符串 str 从 start 位置起的 len 个长度的字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">substring</span>(str, <span class="keyword">start</span>, len)</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="数值函数"><a class="headerlink" href="#数值函数"></a>数值函数</h3><hr><ul><li><p>向上取整</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ceil</span>(x)</span><br></pre></td></tr></table></figure></li><li><p>向下取整</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">floor</span>(x)</span><br></pre></td></tr></table></figure></li><li><p>返回 x/y 的模</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mod</span>(x, y)</span><br></pre></td></tr></table></figure></li><li><p>返回 0 ~ 1 内的随机数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rand()</span><br></pre></td></tr></table></figure></li><li><p>求参数 x 的四舍五入的值，保留 y 位小数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">round(x, y)</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="日期函数"><a class="headerlink" href="#日期函数"></a>日期函数</h3><hr><ul><li><p>返回当前日期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curdate()</span><br></pre></td></tr></table></figure></li><li><p>返回当前时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curtime()</span><br></pre></td></tr></table></figure></li><li><p>返回当前日期和时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now()</span><br></pre></td></tr></table></figure></li><li><p>获取指定 date 的年份</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">year</span>(<span class="type">date</span>)</span><br></pre></td></tr></table></figure></li><li><p>获取指定 date 的月份</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">month</span>(<span class="type">date</span>)</span><br></pre></td></tr></table></figure></li><li><p>获取指定 date 的日期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">day</span>(<span class="type">date</span>)</span><br></pre></td></tr></table></figure></li><li><p>返回一个日期/时间值加上一个时间间隔 expr 后的时间值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date_add(<span class="type">date</span>, <span class="type">interval</span> expr type)</span><br></pre></td></tr></table></figure></li><li><p>返回起始时间 date1 和 结束时间 date2 之间的天数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">datediff(date1, date2)</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="流程函数"><a class="headerlink" href="#流程函数"></a>流程函数</h3><hr><ul><li><p>如果 value 为 true ，则返回 t ，否则返回 f</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(<span class="keyword">value</span>, t, f)</span><br></pre></td></tr></table></figure></li><li><p>如果 value1 不为空，返回 value1，否则返回 value2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifnull(value1, value2)</span><br></pre></td></tr></table></figure></li><li><p>如果 val1 为 true ，返回 res1，… 否则返回 default 默认值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> [val1] <span class="keyword">then</span> [res1]  ...  <span class="keyword">else</span> [<span class="keyword">default</span>] <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- when [val1] then [res1] 这个可以写多个</span></span><br><span class="line"><span class="comment">-- res 是 result</span></span><br></pre></td></tr></table></figure></li><li><p>如果 expr 的值等于 val1 ，返回 res1，… 否则返回 default 默认值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> [expr] <span class="keyword">when</span> [val1] <span class="keyword">then</span> [res1]  ...  <span class="keyword">else</span> [<span class="keyword">default</span>] <span class="keyword">end</span> </span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="约束"><a class="headerlink" href="#约束"></a>约束</h2><hr><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据</p><ul><li><p>非空约束：限制该字段的数据不能为 null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure></li><li><p>唯一约束：保证该字段的所有数据都是唯一、不重复的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unique</span></span><br></pre></td></tr></table></figure></li><li><p>主键约束：主键是一行数据的唯一标识，要求非空且唯一</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">primary</span> key</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 自增</span></span><br><span class="line">auto_increment</span><br></pre></td></tr></table></figure></li><li><p>默认约束：保存数据时，如果未指定该字段的值，则采用默认值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span></span><br></pre></td></tr></table></figure></li><li><p>检查约束：保证字段值满足某一个条件 （8.0.16版本之后）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">check</span></span><br></pre></td></tr></table></figure></li><li><p>外键约束：用来让两张表的数据之间建立连接，保证数据的一致性和完整性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreign</span> key</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意事项</strong>：约束是作用于表中字段上的，可以在 创建表 / 修改表 的时候添加约束</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student&#123;</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment comment &quot;主键&quot;,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment &quot;姓名&quot;,</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">check</span> (age <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> age <span class="operator">&lt;=</span> <span class="number">120</span>) comment &quot;年龄&quot;,</span><br><span class="line">    status <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> &quot;1&quot; comment &quot;状态&quot;,</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) comment &quot;性别&quot;</span><br><span class="line">&#125; comment &quot;用户表&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="外键约束"><a class="headerlink" href="#外键约束"></a>外键约束</h3><hr><p>概念：用来让两张表的数据之间建立连接，从而<strong>保证数据的一致性和完整性</strong></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240630113818822.png" alt="外键关系" loading="lazy"></p><ul><li><p>添加外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名&#123;</span><br><span class="line">字段名 数据类型,</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[<span class="keyword">constraint</span>] [外键名称] <span class="keyword">foreign</span> key(外键字段名) <span class="keyword">references</span> 主表(主表列名)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> key(外键名称) <span class="keyword">references</span> 主表(主表列名);</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加外键</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key (dept_id) <span class="keyword">references</span> dept(id);</span><br></pre></td></tr></table></figure></li><li><p>删除外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">foreign</span> key 外键名称;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_emp_dept_id;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="删除-更新行为"><a class="headerlink" href="#删除-更新行为"></a>删除 / 更新行为</h3><hr><p>概念：添加了外键之后，再删除父表数据时产生的约束行为</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240630115252012.png" alt="具体删除/更新行为" loading="lazy"></p><p><strong>具体语法</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> key (外键字段) <span class="keyword">references</span> 主表名 (主表字段名) <span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> key (外键字段) <span class="keyword">references</span> 主表名 (主表字段名) <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">set</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">set</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="多表查询"><a class="headerlink" href="#多表查询"></a>多表查询</h2><hr><h3 id="多表关系"><a class="headerlink" href="#多表关系"></a>多表关系</h3><hr><p>一对多（多对一）</p><ul><li>在多的一方建立外键，指向一的一方的主键</li></ul><p>多对多</p><ul><li>建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</li></ul><p>一对一</p><ul><li>在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的 ( UNIQUE )</li></ul><hr><h3 id="多表查询概述"><a class="headerlink" href="#多表查询概述"></a>多表查询概述</h3><hr><ul><li><p>多表查询就是指从多张表中查询数据</p></li><li><p>笛卡尔积: 笛卡尔乘积是指在数学中，两个集合 A 集合 和 B 集合的所有组合情况</p></li><li><p>在多表查询中，我们是需要<strong>消除无效的笛卡尔积</strong>的，只保留两张表关联部分的数据</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp , dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure></li></ul><p><strong>多表查询分类</strong>：</p><ul><li><p>连接查询</p><ul><li><p>内连接：相当于查询A、B交集部分数据</p></li><li><p>外连接</p><ul><li>左外连接：查询 左表 所有数据，以及两张表交集部分数据</li><li>右外连接：查询 右表 所有数据，以及两张表交集部分数据</li></ul></li><li><p>自连接：当前表与自身的连接查询，自连接必须使用表别名</p></li></ul></li><li><p>子查询</p></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701090944300.png" alt="A B 集合" loading="lazy"></p><hr><h3 id="内连接"><a class="headerlink" href="#内连接"></a>内连接</h3><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701091115612.png" alt="内连接" loading="lazy"></p><ul><li><p>隐式内连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> , 表<span class="number">2</span> <span class="keyword">where</span> 条件 ... ;</span><br></pre></td></tr></table></figure></li><li><p>显示内连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> [ <span class="keyword">inner</span> ] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件 ... ;</span><br></pre></td></tr></table></figure></li></ul><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询每一个员工的姓名 , 及关联的部门的名称 (隐式内连接实现)</span></span><br><span class="line"><span class="comment">-- 表结构：emp、dept</span></span><br><span class="line"><span class="comment">-- 连接条件：emp.dept_id = dept.id</span></span><br><span class="line"><span class="keyword">select</span> emp.name, dept.name <span class="keyword">from</span> emp, dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> e.name, d.name <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"><span class="comment">-- 如果对表起了别名，就只能使用别名操作了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询每一个员工的姓名 , 及关联的部门的名称 (显式内连接实现)</span></span><br><span class="line"><span class="comment">-- 表结构：emp、dept</span></span><br><span class="line"><span class="comment">-- 连接条件：emp.dept_id = dept.id</span></span><br><span class="line"><span class="keyword">select</span> e.name, d.name <span class="keyword">from</span> emp e <span class="keyword">inner</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><p><strong>对表起别名</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> tablea <span class="keyword">as</span> 别名<span class="number">1</span> , tableb <span class="keyword">as</span> 别名<span class="number">2</span> ;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> tablea 别名<span class="number">1</span> , tableb 别名<span class="number">2</span> ;</span><br></pre></td></tr></table></figure><hr><h3 id="外连接"><a class="headerlink" href="#外连接"></a>外连接</h3><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701092346512.png" alt="外连接示意图" loading="lazy"></p><p><strong>左外连接</strong>：相当于查询 表1（左表）的所有数据，当然也包含 表1 和 表2 交集部分的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">left</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件...;</span><br></pre></td></tr></table></figure><p><strong>右外连接</strong>：相当于查询 表2 （右表）的所有数据，当然也包含 表1 和 表2 交集部分的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">right</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件...;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询emp表的所有数据, 和对应的部门信息（左外连接）</span></span><br><span class="line"><span class="comment">-- 表结构：emp、dept</span></span><br><span class="line"><span class="comment">-- 连接条件：emp.dept_id = dept.id</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, d.name <span class="keyword">from</span> emp e <span class="keyword">left</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询dept表的所有数据, 和对应的员工信息（右外连接）</span></span><br><span class="line"><span class="keyword">select</span> d.<span class="operator">*</span>, e.name <span class="keyword">from</span> emp e <span class="keyword">right</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><p>在日常开发使用时，<strong>更偏向于左外连接</strong></p><hr><h3 id="自连接"><a class="headerlink" href="#自连接"></a>自连接</h3><hr><p>自连接查询，<strong>可以是内连接查询，也可以是外连接查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表A 别名A <span class="keyword">join</span> 表A 别名B <span class="keyword">on</span> 条件...;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工 及其 所属领导的名字</span></span><br><span class="line"><span class="comment">-- 表结构: emp</span></span><br><span class="line"><span class="keyword">select</span> a.name, b.name <span class="keyword">from</span> emp a, emp b <span class="keyword">where</span> a.managerid <span class="operator">=</span> b.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有员工 emp 及其领导的名字 emp , 如果员工没有领导, 也需要查询出来</span></span><br><span class="line"><span class="comment">-- 表结构: emp a , emp b</span></span><br><span class="line"><span class="keyword">select</span> a.name <span class="string">&#x27;员工&#x27;</span>, b.name <span class="string">&#x27;领导&#x27;</span> <span class="keyword">from</span> emp a <span class="keyword">left</span> <span class="keyword">join</span> emp b <span class="keyword">on</span> a.managerid <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure><hr><h3 id="联合查询"><a class="headerlink" href="#联合查询"></a>联合查询</h3><hr><p>union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表A ...</span><br><span class="line"><span class="keyword">union</span>[<span class="keyword">ALL</span>]</span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表B ...;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将薪资低于 5000 的员工 , 和 年龄大于 50 岁的员工全部查询出来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&lt;</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">50</span>;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</li><li><code>union all</code> 会将 <strong>全部的数据直接合并</strong> 在一起，<code>union</code> 会对合并之后的数据 <strong>去重</strong></li></ol><hr><h3 id="子查询"><a class="headerlink" href="#子查询"></a>子查询</h3><hr><p>SQL语句中嵌套 select 语句，称为嵌套查询，又称子查询</p><p>子查询外部的语句可以是 insert / update / delete / select 的任何一个</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> column1 <span class="operator">=</span> (<span class="keyword">select</span> column1 <span class="keyword">from</span> t2);</span><br></pre></td></tr></table></figure><p>根据 子查询结果 不同，分为：</p><ol><li><p>标量子查询（子查询结果为单个值）</p></li><li><p>列子查询（子查询结果为一列）</p></li><li><p>行子查询（子查询结果为一行）</p></li><li><p>表子查询（子查询结果为多行多列）</p></li></ol><p>根据 子查询位置 ，分为：</p><ol><li>where 之后</li><li>from 之后</li><li>select 之后</li></ol><hr><h4 id="标量子查询"><a class="headerlink" href="#标量子查询"></a>标量子查询</h4><hr><p>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式，这种子查询称为 标量子查询</p><p>常用的操作符：<code>=</code>、<code>&lt;&gt;</code>、<code>&gt;</code>、<code>&gt;</code>、<code>=</code>、<code>&lt;</code>、<code>&lt;=</code></p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 &quot;销售部&quot; 的所有员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询 &quot;销售部&quot; 部门ID</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span>;</span><br><span class="line"><span class="comment">-- b. 根据 &quot;销售部&quot; 部门ID, 查询员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询在 &quot;方东白&quot; 入职之后的员工信息</span></span><br><span class="line"><span class="comment">-- a.  查询 &quot;方东白&quot; 的入职日期</span></span><br><span class="line"><span class="keyword">select</span> entrydate <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> &quot;房东白&quot;;</span><br><span class="line"><span class="comment">-- b.  查询指定入职日期之后入职的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2009-02-12&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> (<span class="keyword">select</span> entrydate <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> &quot;房东白&quot;);</span><br></pre></td></tr></table></figure><hr><h4 id="列子查询"><a class="headerlink" href="#列子查询"></a>列子查询</h4><hr><p>列子查询：子查询返回的结果是一列（可以是多行）</p><p>常用的操作符：<code>in</code> 、<code>not in</code> 、 <code>any</code> 、<code>some</code> 、 <code>all</code></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701103546718.png" alt="常用操作符" loading="lazy"></p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 &quot;销售部&quot; 和 &quot;市场部&quot; 的所有员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询 &quot;销售部&quot; 和 &quot;市场部&quot; 的部门ID</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. 根据部门ID, 查询员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询比 财务部 所有人工资都高的员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询所有 财务部 人员工资</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> &quot;财务部&quot;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> &quot;财务部&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. 查询比 财务部 所有人工资都高的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">all</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> &quot;财务部&quot;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询比研发部其中任意一人工资高的员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询研发部所有人工资</span></span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> &quot;研发部&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. 查询比研发部其中任意一人工资高的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">any</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> &quot;研发部&quot;));</span><br></pre></td></tr></table></figure><hr><h4 id="行子查询"><a class="headerlink" href="#行子查询"></a>行子查询</h4><hr><p>行子查询：子查询返回的结果是一行（可以是多列）</p><p>常用的操作符：<code>=</code> 、<code>&lt;&gt;</code> 、<code>in</code> 、<code>not in</code></p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询与 &quot;张无忌&quot; 的薪资及直属领导相同的员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询 &quot;张无忌&quot; 的薪资及直属领导</span></span><br><span class="line"><span class="keyword">select</span> salary, managerid <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> &quot;张无忌&quot;;</span><br><span class="line"><span class="comment">-- b. 查询与 &quot;张无忌&quot; 的薪资及直属领导相同的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> (salary, managerid) <span class="operator">=</span> (<span class="keyword">select</span> salary, managerid <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> &quot;张无忌&quot;);</span><br></pre></td></tr></table></figure><hr><h4 id="表子查询"><a class="headerlink" href="#表子查询"></a>表子查询</h4><hr><p>表子查询：子查询返回的结果是多行多列</p><p>常用的操作符：<code>in</code></p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询与 &quot;鹿杖客&quot; , &quot;宋远桥&quot; 的职位和薪资相同的员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询 &quot;鹿杖客&quot; , &quot;宋远桥&quot; 的职位和薪资</span></span><br><span class="line"><span class="keyword">select</span> job, salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;鹿杖客&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;宋远桥&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. 查询与 &quot;鹿杖客&quot; , &quot;宋远桥&quot; 的职位和薪资相同的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> (job, salary) <span class="keyword">in</span> (<span class="keyword">select</span> job, salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;鹿杖客&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;宋远桥&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询入职日期是 &quot;2006-01-01&quot; 之后的员工信息 , 及其部门信息</span></span><br><span class="line"><span class="comment">-- a. 入职日期是 &quot;2006-01-01&quot; 之后的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. 查询这部分员工, 对应的部门信息</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, d.<span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>) e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><hr><h2 id="事务"><a class="headerlink" href="#事务"></a>事务</h2><hr><p>事务 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作 <strong>要么 同时成功 ，要么 同时失败</strong></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701111408026.png" alt="事务的过程" loading="lazy"></p><p>回滚事务：把数据恢复到事务开始之前的状态</p><p>默认MySQL的事务是自动提交的，也就是说，当执行完一条DML语句时，MySQL会立即隐式的提交事务</p><hr><h3 id="控制事务"><a class="headerlink" href="#控制事务"></a>控制事务</h3><p><strong>方式一</strong>：</p><ul><li><p>查看 / 设置事务提交方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>;  <span class="comment">-- 查看事务的自动提交方式</span></span><br><span class="line"><span class="comment">-- 1 自动提交</span></span><br><span class="line"><span class="comment">-- 0 手动提交</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">-- 设置为手动提交</span></span><br></pre></td></tr></table></figure></li><li><p>提交事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li><li><p>回滚事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure></li></ul><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 查询张三余额</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 张三的余额减少1000</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 李四的余额增加1000</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果正常执行完毕, 则提交事务</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果执行过程中报错, 则回滚事务</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><p><strong>方式二</strong>：</p><ul><li><p>开启事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">begin</span>;</span><br></pre></td></tr></table></figure></li><li><p>提交事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li><li><p>回滚事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure></li></ul><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;  <span class="comment">-- 开启事务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 查询张三余额</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 张三的余额减少1000</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 李四的余额增加1000</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果正常执行完毕, 则提交事务</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果执行过程中报错, 则回滚事务</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="事务四大特性（简称：ACID）"><a class="headerlink" href="#事务四大特性（简称：ACID）"></a>事务四大特性（简称：ACID）</h3><ol><li><strong>原子性</strong>（<strong>A</strong>tomicity）：事务是不可分割的最小操作单元，<strong>要么全部成功，要么全部失败</strong>。</li><li><strong>一致性</strong>（<strong>C</strong>onsistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li><strong>隔离性</strong>（<strong>I</strong>solation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li><strong>持久性</strong>（<strong>D</strong>urability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ol><hr><h3 id="并发事务问题"><a class="headerlink" href="#并发事务问题"></a>并发事务问题</h3><p>指：多个并发执行事务在操作同一数据库时所引发的一系列的问题</p><ul><li><p><strong>赃读</strong>：一个事务读到另外一个事务还没有提交的数据</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702095259551.png" alt="脏读" loading="lazy"></p></li><li><p><strong>不可重复读</strong>：一个事务先后读取同一条记录，但两次读取的数据不同</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702095542236.png" alt="不可重复读" loading="lazy"></p></li><li><p><strong>幻读</strong>：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了 “幻影”</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702095816076.png" alt="幻读" loading="lazy"></p></li></ul><hr><h3 id="事务的隔离级别"><a class="headerlink" href="#事务的隔离级别"></a>事务的隔离级别</h3><p>是用来<strong>解决并发事务所带来的问题的</strong></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702100103700.png" alt="隔离级别分类（√：表示会产生的问题；×：表示不会产生的问题）" loading="lazy"></p><ul><li><p>查看事务隔离级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@transaction_isolation</span></span><br></pre></td></tr></table></figure></li><li><p>设置事务隔离级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> [session<span class="operator">|</span><span class="keyword">global</span>] transaction isolation level &#123;read uncommitted <span class="operator">|</span> read committed <span class="operator">|</span> repeatable read <span class="operator">|</span> serializable&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- session：指对当前的会话窗口有效</span></span><br><span class="line"><span class="comment">-- global：指对所有的会话窗口有效</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>注意</strong>：事务隔离级别越高，数据越安全，但是性能越低</p><hr><h1>MySQL进阶</h1><hr><h2 id="存储引擎"><a class="headerlink" href="#存储引擎"></a>存储引擎</h2><hr><h3 id="MySQL的体系结构"><a class="headerlink" href="#MySQL的体系结构"></a>MySQL的体系结构</h3><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702104852563.png" alt="MySQL的体系结构" loading="lazy"></p><ul><li>连接层<ul><li>主要处理客户端的连接，进行用户认证、授权、校验等相关操作</li></ul></li><li>服务层<ul><li>主要完成SQL的接口、SQL的解析、SQL的优化，跨服务引擎的操作等</li></ul></li><li>引擎层<ul><li>索引是在存储引擎层实现的，这个就说明不同的存储引擎的索引结构是不同的</li></ul></li><li>存储层<ul><li>主要把数据库对应的数据、索引以及日志文件存储起来</li></ul></li></ul><hr><h3 id="存储引擎介绍"><a class="headerlink" href="#存储引擎介绍"></a>存储引擎介绍</h3><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式 。存储引擎是基于表的，而不是基于库的，所以存储引擎也可被称为表类型。</p><ul><li><p>在创建表的时候，指定存储引擎</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名&#123;</span><br><span class="line">字段<span class="number">1</span> 字段<span class="number">1</span>类型 [comment 字段<span class="number">1</span>注释],</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">字段n 字段n类型 [comment 字段n注释]</span><br><span class="line">&#125;engine <span class="operator">=</span> innodb [comment 表注释];</span><br></pre></td></tr></table></figure></li><li><p>查询当前数据库支持的存储引擎</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> engines;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702110013111.png" alt="存储引擎展示" loading="lazy"></p></li></ul><hr><h3 id="存储引擎特点"><a class="headerlink" href="#存储引擎特点"></a>存储引擎特点</h3><ul><li><p><strong>InnoDB</strong></p><ul><li><p>InnoDB是一种 <strong>兼顾高可靠性和高性能</strong> 的通用存储引擎，在 MySQL 5.5 之后，InnoDB是默认的MySQL 存储引擎</p></li><li><p>特点：</p><ul><li>DML（增删改） 操作遵循 ACID 模型，支持 <strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持 <strong>外键</strong> FOREIGN KEY 约束，保证数据的完整性和正确性</li></ul></li><li><p>文件：</p><ul><li><p>xxx.ibd：xxx代表的是表名，innoDB引擎的每张表都会对应这样一个 表空间文件 ，存储该表的表结构（ frm-早期的 、sdi-新版的 ）、数据 和 索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过该指令就可以从ibd文件中提取sdi信息，而sdi数据字典信息中就包含该表的表结构</span></span><br><span class="line">ibd2sdi xxx.ibd</span><br></pre></td></tr></table></figure></li></ul></li><li><p>逻辑存储结构</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702110824361.png" alt="逻辑存储结构" loading="lazy"></p><ul><li><strong>表空间</strong> : InnoDB存储引擎逻辑结构的最高层，ibd 文件其实就是表空间文件，在表空间中可以包含多个Segment段。</li><li><strong>段</strong> : 表空间是由各个段组成的， 常见的段有数据段、索引段、回滚段等。InnoDB中对于段的管理，都是引擎自身完成，不需要人为对其控制，一个段中包含多个区。</li><li><strong>区</strong> : 区是表空间的单元结构，每个区的大小为1M。 默认情况下， InnoDB存储引擎页大小为16K， 即一个区中一共有64个连续的页。</li><li><strong>页</strong> : 页是组成区的最小单元，<strong>页也是 InnoDB 存储引擎磁盘管理的最小单元</strong>，每个页的大小默认为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区。</li><li><strong>行</strong> : InnoDB 存储引擎是面向行的，也就是说数据是按行进行存放的，在每一行中除了定义表时所指定的字段以外，还包含两个隐藏字段。</li></ul></li></ul></li><li><p><strong>MyISAM</strong></p><ul><li>MyISAM是MySQL早期的默认存储引擎</li><li>特点：<ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul></li><li>文件：<ul><li>xxx.sdi：存储表结构信息</li><li>xxx.MYD：存储数据</li><li>xxx.MYI：存储索引</li></ul></li></ul></li><li><p><strong>Memory</strong></p><ul><li>Memory引擎的表数据时存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为临时表或缓存使用</li><li>特点：<ul><li>内存存放</li><li>hash索引（默认）</li></ul></li><li>文件：<ul><li>xxx.sdi：存储表结构信息</li></ul></li></ul></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702115504601.png" alt="InnoDB vs MyISAM vs Memory" loading="lazy"></p><p>InnoDB引擎与MyISAM引擎的区别：</p><ul><li>InnoDB引擎, <strong>支持事务</strong>, 而MyISAM<strong>不支持</strong>。</li><li>InnoDB引擎, <strong>支持行锁和表锁</strong>, 而MyISAM<strong>仅支持表锁, 不支持行锁</strong>。</li><li>InnoDB引擎, <strong>支持外键</strong>, 而MyISAM是<strong>不支持</strong>的。</li></ul><hr><h3 id="存储引擎的选择"><a class="headerlink" href="#存储引擎的选择"></a>存储引擎的选择</h3><ul><li>InnoDB：是Mysql的默认存储引擎，**支持事务、外键 **。如果应用 <strong>对事务的完整性有比较高的要求</strong> ，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。</li><li>MyISAM ： 如果应用是 <strong>以读操作和插入操作为主，只有很少的更新和删除操作</strong> ，并且对事务的完整性、并发性要求不是很高，一般是 <strong>存储业务系统的非核心业务</strong> ，那么选择这个存储引擎是非常合适的。<ul><li>现在大多数情况已经被 MongoDB 取代了</li></ul></li><li>MEMORY：将所有数据保存在内存中， <strong>访问速度快</strong> ，通常 <strong>用于临时表及缓存</strong> 。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性。<ul><li>现在大多数情况已经被 Redis 取代了</li></ul></li></ul><hr><h2 id="索引"><a class="headerlink" href="#索引"></a>索引</h2><hr><h3 id="docker下部署mysql出现的问题"><a class="headerlink" href="#docker下部署mysql出现的问题"></a>docker下部署mysql出现的问题</h3><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702125859544.png" alt="停止3306端口号" loading="lazy"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i:3306</span><br><span class="line"></span><br><span class="line">sudo kill 上面指令找到的pid</span><br><span class="line"></span><br><span class="line">docker pull mysql:8.0.26</span><br><span class="line"></span><br><span class="line">docker run --name mysql --restart=always -v /home/ljaer/mysql:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e TZ=Asia/Shanghai -d mysql:8.0.26</span><br><span class="line"></span><br><span class="line">docker start mysql</span><br><span class="line"></span><br><span class="line">mysql -uroot -proot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果打开表后显示不了中文，用下面指令连接数据库</span></span><br><span class="line">mysql -uroot -proot --default-character-set=utf8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果进入docker容器后无法输入中文</span></span><br><span class="line">docker exec -it docker容器ID env LANG=C.UTF-8 bash</span><br></pre></td></tr></table></figure><hr><h3 id="索引的概述"><a class="headerlink" href="#索引的概述"></a>索引的概述</h3><p>索引（index）是帮助MySQL <strong>高效获取数据</strong> 的 <strong>数据结构(有序)</strong></p><p>优点：</p><ol><li>提高数据检索的效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ol><p>缺点：</p><ol><li>索引列是要占用空间的</li><li>索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE时，效率降低</li></ol><hr><h3 id="索引的结构"><a class="headerlink" href="#索引的结构"></a>索引的结构</h3><p>MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的索引结构</p><ul><li>B+Tree 索引<ul><li><strong>最常见的索引类型</strong>，大部分引擎都支持 B+ 树索引</li></ul></li><li>Hash 索引<ul><li>底层数据结构是用哈希表实现的，只有精确匹配索引列的查询才有效，不支持范围查询</li></ul></li><li>R-tree（空间索引）<ul><li>空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</li></ul></li><li>Full-text（全文索引）<ul><li>是一种通过建立倒排索引，快速匹配文档的方式。类似于Lucene、Solr、ES</li></ul></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702133014617.png" alt="索引结构对比" loading="lazy"></p><hr><h4 id="二叉树"><a class="headerlink" href="#二叉树"></a>二叉树</h4><p>缺点：</p><ul><li>顺序插入时，会形成一个链表，查询性能大大降低。大数据量情况下，层级较深，检索速度慢</li><li>解决办法：<ul><li>可以选择红黑树，<strong>红黑树是一棵自平衡二叉树</strong>，那这样即使是顺序插入数据，最终形成的数据结构也是一棵平衡的二叉树。</li></ul></li><li>红黑树存在的缺点：大数据量情况下，层级较深，检索速度慢</li></ul><hr><h4 id="B-Tree（多路平衡查找树）"><a class="headerlink" href="#B-Tree（多路平衡查找树）"></a>B-Tree（多路平衡查找树）</h4><p>B-Tree，B树是一种多叉路衡查找树，相对于二叉树，B树每个节点可以有多个分支，即多叉</p><p>eg：</p><p>以一颗最大度数（max-degree）为5（5阶）的b-tree为例，那这个B树每个节点最多存储4个key，5个指针：</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702133639723.png" alt="B-Tree" loading="lazy"></p><p>特点：</p><ol><li>5阶的B树，每一个节点最多存储4个key，对应5个指针。</li><li><strong>一旦节点存储的key数量到达5，就会裂变，中间元素向上分裂</strong>。</li><li>在B树中，<strong>非叶子节点和叶子节点都会存放数据</strong>。</li></ol><hr><h4 id="B-Tree"><a class="headerlink" href="#B-Tree"></a>B+Tree</h4><p>B+Tree是B-Tree的变种</p><p>eg：</p><p>以一颗最大度数（max-degree）为4（4阶）的 b+tree 为例：</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702134357952.png" alt="B+Tree" loading="lazy"></p><p>上图可得：</p><ol><li><strong>绿色</strong> 框框起来的部分，是 <strong>索引</strong> 部分，仅仅起到索引数据的作用，不存储数据。</li><li><strong>红色</strong> 框框起来的部分，是 <strong>数据存储</strong> 部分，在其叶子节点中要存储具体的数据</li></ol><p>B+Tree 与 B-Tree相比，主要有以下三点区别：</p><ol><li>所有的数据都会 <strong>出现在叶子节点</strong>。</li><li><strong>叶子节点形成一个单向链表</strong>。</li><li>非叶子节点仅仅起到索引数据作用，具体的数据都是在叶子节点存放的</li></ol><p>B+Tree 相比较二叉树、B-Tree、Hash的优势：</p><ol><li>相对于二叉树，层级更少，搜索效率更高</li><li>对于B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的key-value减少，指针跟着也减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于Hash索引，B+Tree支持范围匹配及排序操作</li></ol><p><strong>注意</strong>：</p><p>MySQL索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，<strong>增加一个指向相邻叶子节点的链表指针</strong>，就形成了带有顺序指针的B+Tree，提高区间访问的性能，利于排序。</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702134840107.png" alt="MySQL优化后的B+树" loading="lazy"></p><hr><h4 id="Hash索引"><a class="headerlink" href="#Hash索引"></a>Hash索引</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。</p><p>特点：</p><ol><li>Hash索引 <strong>只能用于对等比较</strong> (=，in)，不支持范围查询（between，&gt;，&lt; ，…）</li><li><strong>无法利用索引完成排序操作</strong></li><li><strong>查询效率高</strong>，通常（不存在hash冲突的情况）只需要一次检索就可以了，效率通常要高于 B+tree 索引</li></ol><p>存储引擎支持：</p><p>在MySQL中，<strong>支持hash索引的是Memory存储引擎</strong>。 而 <strong>InnoDB中具有自适应hash</strong> 功能，hash索引是InnoDB存储引擎根据B+Tree索引在指定条件下自动构建的</p><hr><h3 id="索引的分类"><a class="headerlink" href="#索引的分类"></a>索引的分类</h3><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703090604129.png" alt="索引的分类" loading="lazy"></p><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703090800789.png" alt="InnoDB索引分类" loading="lazy"></p><p>聚集索引选取规则：</p><ol><li>如果 <strong>存在主键</strong> ，主键索引就是聚集索引</li><li>如果 <strong>不存在主键</strong> ，将使用第一个 <strong>唯一（UNIQUE）索引</strong> 作为聚集索引</li><li>如果表 <strong>没有主键，或没有合适的唯一索引</strong> ，则InnoDB <strong>会自动生成一个rowid</strong> 作为隐藏的聚集索引</li></ol><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703091254162.png" alt="聚集索引 vs 二级索引" loading="lazy"></p><ul><li><strong>聚集索引</strong> 的 叶子节点下挂 的是 <strong>这一行的数据</strong> 。</li><li><strong>二级索引</strong> 的 叶子节点下挂 的是 <strong>该字段值对应的主键值</strong>。</li></ul><p><strong>回表查询</strong>： 先到二级索引中查找数据，找到主键值，然后再到聚集索引中根据主键值，获取数据的方式</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703091517748.png" alt="回表查询示意图" loading="lazy"></p><hr><h3 id="索引的语法"><a class="headerlink" href="#索引的语法"></a>索引的语法</h3><hr><ol><li><p>创建索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> [<span class="keyword">unique</span> <span class="operator">|</span> fulltext] index index_name <span class="keyword">on</span> table_name (index_col_name, ...);</span><br></pre></td></tr></table></figure></li><li><p>查看索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure></li><li><p>删除索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> index index_name <span class="keyword">on</span> table_name;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703095655775.png" alt="index数据行展示，用`\G`" loading="lazy"></p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_name <span class="keyword">on</span> tb_user(name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- phone手机号字段的值，是非空，且唯一的，为该字段创建唯一索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index idx_user_phone <span class="keyword">on</span> tb_user(phone);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为profession、age、status创建联合索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_pro_age_sta <span class="keyword">on</span> tb_user(profession, age, status);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为email建立合适的索引来提升查询效率</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_email <span class="keyword">on</span> tb_user(email);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> tb_user;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> index idx_user_email <span class="keyword">on</span> tb_user;</span><br></pre></td></tr></table></figure><hr><h3 id="SQL-性能分析"><a class="headerlink" href="#SQL-性能分析"></a>SQL 性能分析</h3><hr><h4 id="SQL-执行频率"><a class="headerlink" href="#SQL-执行频率"></a>SQL 执行频率</h4><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 可以提供服务器状态信息</span></span><br><span class="line"><span class="comment">-- session 是查看当前会话 </span></span><br><span class="line"><span class="comment">-- global 是查询全局数据 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> [session<span class="operator">|</span><span class="keyword">global</span>] status</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如下指令，可以查看当前数据库的INSERT、UPDATE、DELETE、SELECT的访问频次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;Com_______&#x27;</span>; </span><br><span class="line"><span class="comment">-- 这里是7个 _ </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Com_binlog    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_commit    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_delete    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_import    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_insert    <span class="operator">|</span> <span class="number">27</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_repair    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_revoke    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_select    <span class="operator">|</span> <span class="number">22</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_signal    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_update    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_xa_end    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Com_delete: 删除次数</span></span><br><span class="line"><span class="comment">-- Com_insert: 插入次数</span></span><br><span class="line"><span class="comment">-- Com_select: 查询次数</span></span><br><span class="line"><span class="comment">-- Com_update: 更新次数</span></span><br></pre></td></tr></table></figure><hr><h4 id="慢查询日志"><a class="headerlink" href="#慢查询日志"></a>慢查询日志</h4><hr><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。</p><p>MySQL的慢查询日志 <strong>默认没有开启</strong> ，我们可以查看一下系统变量 <code>slow_query_log</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询慢查询日志开关是否开启</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;slow_query_log&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name  <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"><span class="operator">|</span> slow_query_log <span class="operator">|</span> OFF   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果要开启慢查询日志，需要在MySQL的配置文件（<code>/etc/my.cnf</code>）中配置如下信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启MySQL慢日志查询开关</span></span><br><span class="line"><span class="string">slow_query_log=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span></span><br><span class="line"><span class="string">long_query_time=2</span></span><br></pre></td></tr></table></figure><p>配置完毕之后，通过以下指令重新启动MySQL服务器进行测试，查看慢日志文件中记录的信息<code>/var/lib/mysql/localhost-slow.log</code></p><p>在 docker容器 中修改配置的指令，先进入mysql的容器内，执行下面的指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mysql/my.cnf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果执行不成功，要先在容器中安装vim</span></span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若报错 E: Unable to locate package vim</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要对 apt进行更新</span></span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>通过慢查询日志，就可以定位出执行效率比较低的SQL，从而有针对性的进行优化。</p><hr><h4 id="profile-详情"><a class="headerlink" href="#profile-详情"></a>profile 详情</h4><hr><p>慢查询日志只会记录执行时间超过我们预设的指定时间之后的SQL语句，有一些接近我们预设时间但是小于它的SQL语句也需要优化，这时候就需要 profile 指令。</p><p><code>show profiles</code> 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了</p><p>通过 <code>have_profiling</code> 参数，能够看到当前MySQL是否支持 profile 操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@have_profiling</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@have_profiling</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> YES              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br></pre></td></tr></table></figure><p>可以看到，当前MySQL是支持 profile操作的，但是开关是关闭的。可以通过set语句在session/global级别开启profiling：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@profiling</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@profiling</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> profiling <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@profiling</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 证明开关已经打开了</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@profiling</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br></pre></td></tr></table></figure><p>通过如下指令查看指令的执行耗时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看每一条SQL的耗时基本情况</span></span><br><span class="line"><span class="keyword">show</span> profiles;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+---------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Query_ID <span class="operator">|</span> Duration   <span class="operator">|</span> Query                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+---------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> <span class="number">0.00113150</span> <span class="operator">|</span> <span class="keyword">set</span> profiling <span class="operator">=</span> <span class="number">1</span>                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span> <span class="number">0.00120900</span> <span class="operator">|</span> <span class="keyword">select</span> @<span class="variable">@profiling</span>                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span> <span class="number">0.00056800</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span> <span class="number">0.00155600</span> <span class="operator">|</span> <span class="keyword">SELECT</span> DATABASE()                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">5</span> <span class="operator">|</span> <span class="number">0.01656000</span> <span class="operator">|</span> <span class="keyword">show</span> databases                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">6</span> <span class="operator">|</span> <span class="number">0.00975675</span> <span class="operator">|</span> <span class="keyword">show</span> tables                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">7</span> <span class="operator">|</span> <span class="number">0.00249350</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">8</span> <span class="operator">|</span> <span class="number">0.00215200</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">9</span> <span class="operator">|</span> <span class="number">0.00297975</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> <span class="number">0.00223900</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+---------------------------------------+</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看指定query_id的SQL语句各个阶段的耗时情况</span></span><br><span class="line"><span class="keyword">show</span> profile <span class="keyword">for</span> query query_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> profile <span class="keyword">for</span> query <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Status                         <span class="operator">|</span> Duration <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> starting                       <span class="operator">|</span> <span class="number">0.000210</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Executing hook <span class="keyword">on</span> transaction  <span class="operator">|</span> <span class="number">0.000074</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> starting                       <span class="operator">|</span> <span class="number">0.000244</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> checking permissions           <span class="operator">|</span> <span class="number">0.000074</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Opening tables                 <span class="operator">|</span> <span class="number">0.000165</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> init                           <span class="operator">|</span> <span class="number">0.000075</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">System</span> lock                    <span class="operator">|</span> <span class="number">0.000193</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> optimizing                     <span class="operator">|</span> <span class="number">0.000081</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statistics                     <span class="operator">|</span> <span class="number">0.000239</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> preparing                      <span class="operator">|</span> <span class="number">0.000087</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> executing                      <span class="operator">|</span> <span class="number">0.000088</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">end</span>                            <span class="operator">|</span> <span class="number">0.000069</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> query <span class="keyword">end</span>                      <span class="operator">|</span> <span class="number">0.000068</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> waiting <span class="keyword">for</span> handler <span class="keyword">commit</span>     <span class="operator">|</span> <span class="number">0.000111</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> closing tables                 <span class="operator">|</span> <span class="number">0.000079</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> freeing items                  <span class="operator">|</span> <span class="number">0.000247</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cleaning up                    <span class="operator">|</span> <span class="number">0.000137</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+----------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看指定query_id的SQL语句CPU的使用情况</span></span><br><span class="line"><span class="keyword">select</span> profile cpu <span class="keyword">for</span> query query_id;</span><br></pre></td></tr></table></figure><hr><h4 id="explain-执行计划"><a class="headerlink" href="#explain-执行计划"></a>explain 执行计划</h4><hr><p>explain 或者 desc命令获取 MySQL 如何执行 select 语句的信息，包括在 select 语句执行过程中表如何连接和连接的顺序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 直接在<span class="keyword">select</span>语句之前加上关键字 explain <span class="operator">/</span> <span class="keyword">desc</span></span><br><span class="line">explain <span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703141831033.png" alt="执行后的结果" loading="lazy"></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703141905990.png" alt="各个字段的含义" loading="lazy"></p><ul><li>说明：比较重要的字段有 <code>type</code>、<code>possible_key</code>、<code>key</code>、<code>key_len</code></li></ul><hr><h3 id="索引的使用原则"><a class="headerlink" href="#索引的使用原则"></a>索引的使用原则</h3><hr><h4 id="验证索引效率"><a class="headerlink" href="#验证索引效率"></a>验证索引效率</h4><ol><li><p>首先准备的一张表 tb_sku , 在这张表中准备了1000w的记录</p></li><li><p>先执行下面的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_sku <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>\G;</span><br></pre></td></tr></table></figure></li><li><p>执行时间为：<img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703145008807.png" alt loading="lazy"></p></li><li><p>然后再执行下面的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_sku <span class="keyword">where</span> sn <span class="operator">=</span> <span class="string">&#x27;100000003145001&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>执行时间为：<img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703145118623.png" alt loading="lazy"></p></li><li><p>创建一个有关 sn 的索引，就是构建 B+ 树的过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_sku_xn <span class="keyword">on</span> tb_sku(sn);</span><br></pre></td></tr></table></figure></li><li><p>再执行上面查询 sn 的SQL语句，执行时间为：<img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703145441968.png" alt loading="lazy"></p></li></ol><p><strong>总结</strong>：sn字段建立了索引之后，查询性能大大提升。建立索引前后，查询耗时都不是一个数量级的。</p><hr><h4 id="最左前缀法则"><a class="headerlink" href="#最左前缀法则"></a>最左前缀法则</h4><p>如果索引了多列（联合索引），要遵守最左前缀法则。</p><p>最左前缀法则：指的是查询从索引的最左列开始，并且不跳过索引中的列。如果跳跃某一列，<strong>索引将会部分失效（后面的字段索引失效）</strong>。</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> tb_user;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703151039306.png" alt="查询结果" loading="lazy"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703151137701.png" alt="查询结果" loading="lazy"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">31</span> <span class="keyword">and</span> status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703151210708.png" alt="查询结果" loading="lazy"></p><hr><h4 id="范围查询"><a class="headerlink" href="#范围查询"></a>范围查询</h4><hr><p>联合索引中，出现范围查询（<code>&gt;</code>，<code>&lt;</code>），<strong>范围查询右侧的列索引失效</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">&gt;</span> <span class="number">30</span> <span class="keyword">and</span> status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703151850883.png" alt="实现结果" loading="lazy"></p><ul><li>说明：当范围查询使用 <code>&gt;</code> 或 <code>&lt;</code> 时，走联合索引了，但是索引的长度为49，就说明范围查询右边的status字段是没有走索引的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">&gt;=</span> <span class="number">30</span> <span class="keyword">and</span> status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703152041235.png" alt="实现结果" loading="lazy"></p><ul><li>说明：当范围查询使用 <code>&gt;=</code> 或 <code>&lt;=</code> 时，走联合索引了，但是索引的长度为54，就说明所有的字段都是走索引的</li></ul><p><strong>总结</strong>：尽可能的使用类似于 <code>&gt;=</code> 或 <code>&lt;=</code> 这类的范围查询，而避免使用 <code>&gt;</code> 或 <code>&lt;</code></p><hr><h4 id="索引失效的情况"><a class="headerlink" href="#索引失效的情况"></a>索引失效的情况</h4><hr><h5 id="索引列运算"><a class="headerlink" href="#索引列运算"></a>索引列运算</h5><hr><p>不要在索引列上进行运算操作，<strong>索引将失效</strong></p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> <span class="built_in">substring</span>(phone, <span class="number">10</span>, <span class="number">2</span>) <span class="operator">=</span> <span class="string">&#x27;15&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703152546432.png" alt="实现结果" loading="lazy"></p><hr><h5 id="字符串不加引号"><a class="headerlink" href="#字符串不加引号"></a>字符串不加引号</h5><hr><p>字符串类型字段使用时，不加引号，<strong>索引将失效</strong></p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="number">17799990015</span>;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703152757070.png" alt="实现结果" loading="lazy"></p><hr><h5 id="模糊匹配"><a class="headerlink" href="#模糊匹配"></a>模糊匹配</h5><hr><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，<strong>索引失效</strong></p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="keyword">like</span> <span class="string">&#x27;%工程&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703153108256.png" alt="实现结果" loading="lazy"></p><hr><h5 id="or-连接的条件"><a class="headerlink" href="#or-连接的条件"></a>or 连接的条件</h5><hr><p>用 or 分割开的条件， 如果 or 前的条件中的列有索引，而后面的列中没有索引，那么涉及的<strong>索引都不会被用到</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- age没有索引，phone有索引，索引也会失效</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="string">&#x27;17799990015&#x27;</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">23</span>;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703153720208.png" alt="实现结果" loading="lazy"></p><p>如果根据 age 字段建立一个索引，则再执行上面的 SQL 语句，结果为：</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240703154027934.png" alt="实现结果" loading="lazy"></p><hr><h5 id="数据分布影响"><a class="headerlink" href="#数据分布影响"></a>数据分布影响</h5><hr><p>如果MySQL评估 <strong>使用索引比全表更慢</strong> ，<strong>则不使用索引</strong></p><p>例如：相同的SQL语句，只是传入的字段值不同，最终的执行计划也完全不一样，这是因为为MySQL在查询时，<strong>会评估 使用索引的效率 与 走全表扫描的效率</strong> ，如果走全表扫描更快，则放弃索引，走全表扫描。 因为索引是用来索引少量数据的，如果通过索引查询返回大批量的数据，则还不如走全表扫描来的快，此时索引就会失效。</p><p>同理，<code>is null</code> 、<code>is not null</code> 是否走索引，得具体情况具体分析，并不是固定的。</p><hr><h4 id="SQL-提示"><a class="headerlink" href="#SQL-提示"></a>SQL 提示</h4><hr><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中 <strong>加入一些人为的提示</strong> 来达到化操作的目的。</p><p><strong>注意</strong>：MySQL优先选择联合索引，这是MySQL自动选择的结果。</p><ol><li><p><code>use index</code>：<strong>建议</strong> MySQL使用哪一个索引完成此次查询（仅仅是建议，mysql内部还会再次进</p><p>行评估）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user use index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>ignore index</code>：<strong>忽略</strong> 指定的索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user ignore index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>force index</code>：<strong>强制</strong> 使用索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user force index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="覆盖索引"><a class="headerlink" href="#覆盖索引"></a>覆盖索引</h4><hr><p>覆盖索引 是指 查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到。</p><p>尽量使用 覆盖索引，减少使用<code>select *</code></p><p>在 explain 字段中的 extra 那一项中：</p><ul><li><code>Using where; Using Index</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</li><li><code>Using index condition</code>：查找使用了索引，但是需要回表查询（有的SQL语句需要先查辅助索引，如果辅助索引上面有些字段查询不到，则再查询聚集索引，根据id值查询到对应的行数据）数据</li></ul><p><strong>问题</strong>：一张表, 有四个字段（id, username, password, status）, 由于数据量大, 需要对以下SQL语句进行优化, 该如何进行才是最优方案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,username,password <span class="keyword">from</span> tb_user <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;itcast&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>答案</strong>： 针对于 username, password建立联合索引，SQL语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_user_name_pass <span class="keyword">on</span> tb_user(username,password);</span><br></pre></td></tr></table></figure><p>这样可以避免上述的SQL语句，在查询的过程中，出现回表查询。</p><hr><h4 id="前缀索引"><a class="headerlink" href="#前缀索引"></a>前缀索引</h4><hr><p>当字段类型为字符串（varchar，text，longtext等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO， 影响查询效率。</p><p><strong>前缀索引</strong>：可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_xxxx <span class="keyword">on</span> table_name(<span class="keyword">column</span>(n));</span><br></pre></td></tr></table></figure><p><strong>前缀长度</strong>：可以根据 <strong>索引的选择性</strong> 来决定，而选择性是指 <strong>不重复的索引值（基数）和数据表的记录总数的比值</strong>，索引选择性越高则查询效率越高。</p><p><strong>唯一索引</strong> 的选择性是 1 ，这是最好的索引选择性，性能也是最好的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看索引选择性的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span>(email)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="keyword">distinct</span>(email)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                            <span class="number">1.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="built_in">substring</span>(email, <span class="number">1</span>, <span class="number">10</span>)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="built_in">substring</span>(email, <span class="number">1</span>, <span class="number">10</span>)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                                             <span class="number">1.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------------------+</span></span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704094656407.png" alt="举例" loading="lazy"></p><hr><h4 id="单列索引-与-联合索引"><a class="headerlink" href="#单列索引-与-联合索引"></a>单列索引 与 联合索引</h4><hr><p>单列索引：即一个索引只包含单个列。</p><p>联合索引：即一个索引包含了多个列。</p><p>如果存在多个查询条件，考虑针对于查询字段建立索引时，<strong>建议建立联合索引，而非单列索引</strong>，因为联合索引如果设计得当，可以减少回表查询。</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704101457267.png" alt="联合索引的查询流程" loading="lazy"></p><hr><h3 id="索引设计原则"><a class="headerlink" href="#索引设计原则"></a>索引设计原则</h3><hr><ol><li>针对于 <strong>数据量较大</strong> ，且 <strong>查询比较频繁</strong> 的表建立索引</li><li>针对于常作为查询条件（<strong>where</strong>）、<strong>排序（order by）</strong>、**分组（group by）**操作的字段建立索引</li><li>尽量选择 <strong>区分度高的列</strong> 作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是 <strong>字符串类型</strong> 的字段，<strong>字段的长度较长</strong>，可以针对于字段的特点，建立 <strong>前缀索引</strong></li><li><strong>尽量使用联合索引，减少单列索引</strong>，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要 <strong>控制索引的数量</strong>，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率</li><li>如果索引列 <strong>不能存储 NULL 值，请在创建表时使用 NOT NULL 约束它</strong>。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><hr><h2 id="SQL-优化"><a class="headerlink" href="#SQL-优化"></a>SQL 优化</h2><hr><h3 id="插入优化"><a class="headerlink" href="#插入优化"></a>插入优化</h3><hr><h4 id="insert-优化"><a class="headerlink" href="#insert-优化"></a>insert 优化</h4><ol><li><p>批量插入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user <span class="keyword">values</span>(&quot;1&quot;, &quot;test1&quot;), (&quot;2&quot;, &quot;test2&quot;), (&quot;3&quot;, &quot;test3&quot;);</span><br></pre></td></tr></table></figure></li><li><p>手动事务提交</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user <span class="keyword">values</span>(&quot;1&quot;, &quot;test1&quot;), (&quot;2&quot;, &quot;test2&quot;), (&quot;3&quot;, &quot;test3&quot;);</span><br><span class="line">....</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li><li><p>主键顺序插入</p></li></ol><hr><h4 id="大批量数据插入"><a class="headerlink" href="#大批量数据插入"></a>大批量数据插入</h4><p>如果一次性需要插入大批量数据(比如: 几百万的记录)，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的 <strong>load指令</strong> 进行插入</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704103536054.png" alt="load指令的流程" loading="lazy"></p><ul><li><p>在 load指令 中数据之间通过 <code>,</code> 分隔</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 客户端连接服务端时，加上参数 -–local-infile</span></span><br><span class="line">mysql –<span class="operator">-</span><span class="keyword">local</span><span class="operator">-</span>infile <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> local_infile <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行load指令将准备好的数据，加载到表结构中</span></span><br><span class="line">load data <span class="keyword">local</span> infile <span class="string">&#x27;/xxx.sql&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> tb_user fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> lines terminated <span class="keyword">by</span> <span class="string">&#x27;\n&#x27;</span> ;</span><br></pre></td></tr></table></figure></li><li><p>将 sql 文件拷贝到docker容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /本地路径/your_file.sql 容器名称:/容器路径/your_file.sql</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /load_user_100w_sort.sql mysql:/load_user_100w_sort.sql</span><br></pre></td></tr></table></figure></li></ul><p><strong>主键 顺序插入 性能高于 乱序插入</strong></p><hr><h3 id="主键优化"><a class="headerlink" href="#主键优化"></a>主键优化</h3><ol><li><p>数据组织方式</p><ul><li>在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为 <strong>索引组织表</strong>（IOT）</li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704114238428.png" alt="逻辑存储结构" loading="lazy"></p></li><li><p>页分裂</p><ul><li><p>页可以为空，也可以填充一半，也可以填充100%。每个页包含了 <strong>2-N</strong> 行（也就是说每个页至少包含两行数据）数据(如果一行数据过大，会行溢出)，根据主键排列</p></li><li><p>主键顺序插入效果：</p></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704114355691.png" alt="主键顺序插入" loading="lazy"></p><ul><li><p>主键乱序插入效果：</p><ul><li><p>如果原始的页数据为下图，插入一个id值为50的新数据</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704114615068.png" alt="原始" loading="lazy"></p></li><li><p>之后进行 <strong>页分裂</strong>，效果如下：</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704114740719.png" alt="页分裂" loading="lazy"></p></li><li><p>最后输出的结果：</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704114813313.png" alt="输出" loading="lazy"></p></li></ul></li></ul></li><li><p>页合并</p><ul><li><p>当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用</p></li><li><p>起始的索引结构如下：</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704115004756.png" alt="起始" loading="lazy"></p></li><li><p>当页中删除的记录达到 <strong>MERGE_THRESHOLD（默认为页的50%）</strong>，InnoDB会开始寻找最靠近的页（前或后）看看是否可以将 <strong>两个页合并</strong> 以优化空间使用</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704115044793.png" alt="页合并" loading="lazy"></p></li><li><p><strong>注意</strong>：</p><ul><li>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或者创建索引时指定</li></ul></li></ul></li><li><p>主键设计原则</p><ul><li>满足业务需求的情况下，尽量 <strong>降低主键的长度</strong>（是根据二级索引说的，因为二级索引的叶子节点的磁盘空间存储的是主键值）</li><li>插入数据时，尽量选择顺序插入，选择<strong>使用 AUTO_INCREMENT</strong> 自增主键</li><li>尽量 <strong>不要使用UUID做主键或者是其他自然主键</strong>，如身份证号</li><li>业务操作时，<strong>避免对主键的修改</strong></li></ul></li></ol><hr><h3 id="order-by-优化"><a class="headerlink" href="#order-by-优化"></a>order by 优化</h3><hr><p>MySQL的排序分为以下两种情况：</p><ol><li><code>Using filesort</code> : 通过表的索引或全表扫描，读取满足条件的数据行，然后 <strong>在排序缓冲区sort buffer中完成排序操作</strong> ，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li><code>Using index</code> : <strong>通过有序索引</strong> 顺序扫描直接 <strong>返回有序数据</strong>，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p><strong>总结</strong>：<strong>Using index 的性能高，而 Using filesort 的性能低</strong>，我们在 <strong>优化排序操作时，尽量要优化为 Using index</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- age字段无索引，执行SQL语句</span></span><br><span class="line">explain <span class="keyword">select</span> id, age, phone <span class="keyword">from</span> tb_user <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704120316065.png" alt="输出结果" loading="lazy"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建立关于age、phone的联合索引</span></span><br><span class="line">explain <span class="keyword">select</span> id, age, phone <span class="keyword">from</span> tb_user <span class="keyword">order</span> <span class="keyword">by</span> age, phone;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704120458854.png" alt="输出结果" loading="lazy"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建立age升序，phone降序的联合索引</span></span><br><span class="line"><span class="comment">-- 注意：每个索引默认按照升序排列</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_age_phone_ad <span class="keyword">on</span> tb_user(age <span class="keyword">asc</span>, phone <span class="keyword">desc</span>);</span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> id, age, phone <span class="keyword">from</span> tb_user <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>, phone <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704121255581.png" alt="实现结果" loading="lazy"></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704121456594.png" alt="叶子节点的排列顺序" loading="lazy"></p><ul><li>先按照 age 升序排列，如果 age 相同，再按照 phone 降序排列</li></ul><p><strong>总结</strong>：</p><ol><li>根据排序字段 <strong>建立合适的索引</strong>，多字段排序时，也 遵循最左前缀法则</li><li>尽量 <strong>使用覆盖索引</strong></li><li>多字段排序, 一个升序一个降序，此时需要注意联合索引在创建时的规则（<code>asc</code> / <code>desc</code>）</li><li>如果 <strong>不可避免的出现 filesort</strong> ，大数据量排序时，可以 <strong>适当增大排序缓冲区大小 sort_buffer_size</strong> (默认256k)</li></ol><hr><h3 id="group-by-优化"><a class="headerlink" href="#group-by-优化"></a>group by 优化</h3><hr><ol><li>在分组操作时，可以 <strong>通过索引</strong> 来提高效率</li><li>分组操作时，索引的使用也是 <strong>满足最左前缀法则</strong> 的</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 首先建立 profession、age、status 的联合索引</span></span><br><span class="line"><span class="comment">-- 根据 age 进行分组查询</span></span><br><span class="line">explain <span class="keyword">select</span> age, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user <span class="keyword">group</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704122743013.png" alt="实现结果" loading="lazy"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据 age 进行分组查询，并提前根据 profession 进行过滤</span></span><br><span class="line">explain <span class="keyword">select</span> age, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704122852702.png" alt="实现结果" loading="lazy"></p><hr><h3 id="limit-优化"><a class="headerlink" href="#limit-优化"></a>limit 优化</h3><hr><p>在数据量比较大时，如果进行 limit 分页查询，<strong>在查询时，越往后，分页查询效率越低</strong></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704123113922.png" alt="举例" loading="lazy"></p><p>优化思路：一般分页查询时，通过<strong>创建 覆盖索引</strong> 能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_sku t , (<span class="keyword">select</span> id <span class="keyword">from</span> tb_sku <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">9000000</span>,<span class="number">10</span>) a <span class="keyword">where</span> t.id <span class="operator">=</span> a.id;</span><br></pre></td></tr></table></figure><hr><h3 id="count-优化"><a class="headerlink" href="#count-优化"></a>count 优化</h3><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user;</span><br></pre></td></tr></table></figure><ul><li>在 MyISAM 引擎把一个表的总行数存在磁盘上，因此执行 count(*) 时候会直接返回这个数，效率很高</li><li>在 InnoDB 引擎执行 count(*) 的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数，效率不高</li></ul><p>优化思路：自己计数</p><p>用法：<code>count(*)</code>、<code>count(主键)</code>、<code>count(字段)</code>、<code>count(1)</code></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704124004643.png" alt="count的几种方式" loading="lazy"></p><p>按照效率排序的话，<strong>count(字段) &lt; count(主键 id) &lt; count(1) ≈ count(*)</strong>，所以 <strong>尽量使用 count(*)</strong> 。</p><hr><h3 id="update-优化"><a class="headerlink" href="#update-优化"></a>update 优化</h3><hr><ul><li><p>在执行下面的SQL语句时，会锁定id为1这一行的数据，然后事务提交之后，行锁释放</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> course <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;javaEE&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>然而，当我们开启多个事务，在执行下面的SQL时，我们发现行锁升级为了表锁。 导致该update语句的性能大大降低</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> course <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;SpringBoot&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;PHP&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>总结</strong>：InnoDB 的 <strong>行锁</strong> 是 <strong>针对索引加的锁</strong>，<strong>不是针对记录加的锁</strong>，并且该索引不能失效，否则会 <strong>从行锁升级为表锁</strong></p><p>所以 <strong>要尽量根据 主键/ 索引字段 进行数据更新</strong></p><hr><h2 id="视图-存储过程-触发器"><a class="headerlink" href="#视图-存储过程-触发器"></a>视图 / 存储过程 / 触发器</h2><hr><h3 id="视图（view）"><a class="headerlink" href="#视图（view）"></a>视图（view）</h3><hr><p>视图（View）：是一种 <strong>虚拟存在的表</strong> 。视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的</p><p>简单说，视图 <strong>只保存了查询的SQL逻辑</strong>，不保存查询结果。</p><hr><h4 id="语法"><a class="headerlink" href="#语法"></a>语法</h4><hr><ul><li><p>创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> [<span class="keyword">or</span> replace] <span class="keyword">view</span> 视图名称[(列名列表)] <span class="keyword">as</span> <span class="keyword">select</span>语句 [<span class="keyword">with</span>[<span class="keyword">cascaded</span> <span class="operator">|</span> <span class="keyword">local</span>] <span class="keyword">check</span> option];</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_v_1 <span class="keyword">as</span> <span class="keyword">select</span> id, name <span class="keyword">from</span> itcast.tb_user <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704132219615.png" alt="创建视图" loading="lazy"></p></li><li><p>查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看创建视图语句</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> 视图名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看视图数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 视图名称 ...;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> stu_v_1;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704132445471.png" alt="查看创建视图语句" loading="lazy"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 与表操作是一样的</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu_v_1 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704132613685.png" alt="查询结果" loading="lazy"></p></li><li><p>修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- or replace 在创建时候可以不加，但是修改的时候要加上</span></span><br><span class="line"><span class="keyword">create</span> [<span class="keyword">or</span> replace] <span class="keyword">view</span> 视图名称[(列名列表)] <span class="keyword">as</span> <span class="keyword">select</span>语句 [<span class="keyword">with</span>[<span class="keyword">cascaded</span> <span class="operator">|</span> <span class="keyword">local</span>] <span class="keyword">check</span> option];</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> 视图名称[(列名列表)] <span class="keyword">as</span> <span class="keyword">select</span>语句 [<span class="keyword">with</span>[<span class="keyword">cascaded</span> <span class="operator">|</span> <span class="keyword">local</span>] <span class="keyword">check</span> option];</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_v_1 <span class="keyword">as</span> <span class="keyword">select</span> id, name, profession <span class="keyword">from</span> itcast.tb_user <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> stu_v_1 <span class="keyword">as</span> <span class="keyword">select</span> id, name <span class="keyword">from</span> itcast.tb_user <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> [if <span class="keyword">exists</span>] 视图名称 [,视图名称]...</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> if <span class="keyword">exists</span> stu_v_1;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="检查选项"><a class="headerlink" href="#检查选项"></a>检查选项</h4><hr><p>当使用 <code>with check option</code> 子句创建视图时，MySQL会通过视图检查正在更改的每个行，例如：插入，更新，删除，以使其符合视图的定义。 MySQL允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。为了确定检查的范围，mysql提供了两个选项： <code>cascaded</code> 和 <code>local</code> ，默认值为 <code>cascaded</code> 。</p><ol><li><p><strong>cascaded（级联）</strong></p><p><strong>with check option 如果上一层有这个选项，则会传递给下一层</strong>。</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704134133937.png" alt="cascaded" loading="lazy"></p><ul><li>比如，v2视图是基于v1视图的，如果在v2视图创建的时候指定了检查选项为 cascaded，但是v1视图创建时未指定检查选项。 则在执行检查时，不仅会检查v2，还会级联检查v2的关联视图v1</li></ul></li><li><p><strong>local（本地）</strong></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704135702813.png" alt="local" loading="lazy"></p><ul><li>比如，v2视图是基于v1视图的，如果在v2视图创建的时候指定了检查选项为 local ，但是v1视图创建时未指定检查选项。 则在执行检查时，知会检查v2，不会检查v2的关联视图v1。</li></ul></li></ol><hr><h4 id="视图的更新"><a class="headerlink" href="#视图的更新"></a>视图的更新</h4><hr><p>不是说所有的视图都可以进行增删改。要使视图可更新，<strong>视图中的行与基础表中的行之间必须存在一对一的关系</strong>。如果视图包含以下任何一项，则该视图不可更新：</p><ol><li>聚合函数或窗口函数（<code>sum()</code>、 <code>min()</code>、 <code>max()</code>、 <code>count()</code>等）</li><li><code>distinct</code></li><li><code>group by</code></li><li><code>having</code></li><li><code>union</code> 或者 <code>union all</code></li></ol><hr><h4 id="视图的作用"><a class="headerlink" href="#视图的作用"></a>视图的作用</h4><hr><ol><li>简单<ul><li>简化用户的操作、理解。那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的条件</li></ul></li><li>安全<ul><li>数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据</li></ul></li><li>数据独立<ul><li>视图可帮助用户屏蔽真实表结构变化带来的影响</li></ul></li></ol><hr><h3 id="存储过程（procedure）"><a class="headerlink" href="#存储过程（procedure）"></a>存储过程（procedure）</h3><hr><p>存储过程：是 <strong>事先经过编译并存储在数据库中的一段 SQL 语句的集合</strong>，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的</p><p>简而言之，就是 <strong>数据库 SQL 语言层面的代码封装与重用</strong></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705123718166.png" alt="存储过程图示" loading="lazy"></p><hr><h4 id="存储过程的特点"><a class="headerlink" href="#存储过程的特点"></a>存储过程的特点</h4><ol><li><strong>封装，复用</strong><ul><li>可以把某一业务SQL封装在存储过程中，需要用到的时候直接调用即可</li></ul></li><li><strong>可以接收参数，也可以返回数据</strong><ul><li>在存储过程中，可以传递参数，也可以接收返回值</li></ul></li><li><strong>减少网络交互，效率提升</strong><ul><li>如果涉及到多条SQL，每执行一次都是一次网络传输。而如果封装在存储过程中，我们只需要网络交互一次可能就可以了</li></ul></li></ol><hr><h4 id="基本语法"><a class="headerlink" href="#基本语法"></a>基本语法</h4><ul><li><p>创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称([参数列表])</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> 名称([参数]);</span><br></pre></td></tr></table></figure></li><li><p>查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询指定数据库的存储过程及状态信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.routines <span class="keyword">where</span> routine_schema <span class="operator">=</span> &quot;xxx&quot;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询某个存储过程的定义</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称;</span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> [if <span class="keyword">exists</span>] 存储过程名称;</span><br></pre></td></tr></table></figure></li></ul><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 存储过程的基本语法</span></span><br><span class="line"><span class="comment">-- 创建</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p1()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> p1();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.ROUTINES <span class="keyword">where</span> ROUTINE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;itcast&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> p1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> p1;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705125437256.png" alt="datagrip表结构" loading="lazy"></p><p><strong>注意</strong>：在命令行中，执行创建存储过程的SQL时，需要通过关键字 <code>delimiter</code> 指定SQL语句的结束符。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">含义是 $$ 为结束符号</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所以之后在xshell命令行中写存储过程创建的语句是：</span></span><br><span class="line">create procedure p1()</span><br><span class="line">begin</span><br><span class="line">    select count(*) from tb_user;</span><br><span class="line"><span class="meta prompt_">end$</span><span class="language-bash">$</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这样可以避免出现 ; 但没执行完指令的情况</span></span><br></pre></td></tr></table></figure><hr><h4 id="变量"><a class="headerlink" href="#变量"></a>变量</h4><hr><h5 id="系统变量"><a class="headerlink" href="#系统变量"></a>系统变量</h5><p>系统变量 是MySQL服务器提供，不是用户定义的，属于服务器层面。分为全局变量（ <strong>global</strong> ）、会话变量（ <strong>session</strong>，这个是 默认的 ）</p><ol><li><p>查看系统变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看所有系统变量</span></span><br><span class="line"><span class="keyword">show</span> [session<span class="operator">|</span><span class="keyword">global</span>] variables;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 可以通过 like 模糊匹配方式查找变量</span></span><br><span class="line"><span class="keyword">show</span> [session<span class="operator">|</span><span class="keyword">global</span>] variables <span class="keyword">like</span> &quot;...&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看指定变量的值</span></span><br><span class="line"><span class="keyword">select</span> @@[session<span class="operator">|</span><span class="keyword">global</span>] 系统变量名;</span><br></pre></td></tr></table></figure></li><li><p>设置系统变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> [session<span class="operator">|</span><span class="keyword">global</span>] 系统变量名<span class="operator">=</span>值;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> @@[session<span class="operator">|</span><span class="keyword">global</span>]系统变量名<span class="operator">=</span>值;</span><br></pre></td></tr></table></figure></li></ol><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 变量：系统变量</span></span><br><span class="line"><span class="comment">-- 查看系统变量</span></span><br><span class="line"><span class="keyword">show</span> variables;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看与事务提交相关的系统变量</span></span><br><span class="line"><span class="keyword">show</span> session variables <span class="keyword">like</span> &quot;auto%&quot;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> &quot;auto%&quot;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>;</span><br><span class="line"><span class="comment">-- 1 开启  0 关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置系统变量</span></span><br><span class="line"><span class="keyword">set</span> session autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@session</span>.autocommit <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li><p>如果没有指定 <code>session / global</code>，默认是 <code>session</code>，会话变量。</p><ul><li><p>全局变量（<code>global</code>）：全局变量针对于所有的会话。</p></li><li><p>会话变量（<code>session</code>）：会话变量针对于单个会话，在另外一个会话窗口就不生效了</p></li></ul></li><li><p>mysql 服务重新启动之后，所设置的全局参数会失效，要想不失效，可以在 <code>/etc/my.cnf</code> 中配置</p></li></ol><hr><h5 id="用户自定义变量"><a class="headerlink" href="#用户自定义变量"></a>用户自定义变量</h5><p><strong>用户定义变量</strong> 是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用 <code>@变量名</code> 使用就可以。其作用域为 当前连接</p><ul><li><p>赋值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@var_name</span> <span class="operator">=</span> expr [, <span class="variable">@var_name</span> <span class="operator">=</span> expr] ... ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@var_name</span> :<span class="operator">=</span> expr [, <span class="variable">@var_name</span> :<span class="operator">=</span> expr] ... ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="variable">@var_name</span> :<span class="operator">=</span> expr [, <span class="variable">@var_name</span> :<span class="operator">=</span> expr] ... ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将 select 字段名 from 表名 获得的值赋给 @var_name</span></span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">into</span> <span class="variable">@var_name</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="variable">@var_name</span> ;</span><br></pre></td></tr></table></figure></li></ul><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 变量：用户变量</span></span><br><span class="line"><span class="comment">-- 赋值</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@myname</span> <span class="operator">=</span> <span class="string">&#x27;itcast&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@myage</span> :<span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@mygender</span> :<span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>, <span class="variable">@myhobby</span> <span class="operator">=</span> <span class="string">&#x27;java&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@mycolor</span> :<span class="operator">=</span> <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> <span class="variable">@mycount</span> <span class="keyword">from</span> tb_user;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@myname</span>, <span class="variable">@myage</span>, <span class="variable">@mygender</span>, <span class="variable">@myhobby</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@mycolor</span>, <span class="variable">@mycount</span>;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：用户定义的变量 <strong>无需对其进行声明或初始化</strong> ，只不过获取到的值为 NULL</p><hr><h5 id="局部变量"><a class="headerlink" href="#局部变量"></a>局部变量</h5><p><strong>局部变量</strong> 是根据需要定义的在局部生效的变量，访问之前，需要 <strong>declare</strong> 声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是 <strong>在其内声明的 begin … end 块</strong></p><ul><li><p>声明</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> 变量名 变量类型[<span class="keyword">default</span> ...];</span><br></pre></td></tr></table></figure><ul><li>变量类型就是数据库字段类型：int、bigint、char、varchar、date、time等</li></ul></li><li><p>赋值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> 变量名 <span class="operator">=</span> 值;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> 变量名 :<span class="operator">=</span> 值;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">into</span> 变量名 <span class="keyword">from</span> 表名...;</span><br></pre></td></tr></table></figure></li></ul><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 变量：局部变量</span></span><br><span class="line"><span class="comment">-- 声明  declare</span></span><br><span class="line"><span class="comment">-- 赋值</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p2()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">declare</span>  stu_count <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> stu_count :<span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> stu_count <span class="keyword">from</span> tb_user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> stu_count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">call</span> p2();</span><br></pre></td></tr></table></figure><hr><h4 id="if"><a class="headerlink" href="#if"></a>if</h4><hr><h5 id="语法-2"><a class="headerlink" href="#语法-2"></a>语法</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if 条件<span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">...</span><br><span class="line">elseif 条件<span class="number">2</span> <span class="keyword">then</span>     <span class="comment">-- 可选</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span><span class="comment">-- 可选</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span> if；</span><br></pre></td></tr></table></figure><p>按照顺序判断</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据定义的分数score变量，判定当前分数对应的分数等级</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p3()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> score <span class="type">int</span> <span class="keyword">default</span> <span class="number">58</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">10</span>);</span><br><span class="line">if score <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;优秀&#x27;</span>;</span><br><span class="line">elseif score <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><hr><h4 id="存储过程的参数"><a class="headerlink" href="#存储过程的参数"></a>存储过程的参数</h4><hr><p>参数的类型，主要分为以下三种：<code>in</code>、<code>out</code>、<code>inout</code></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705172853508.png" alt="参数" loading="lazy"></p><h5 id="语法-3"><a class="headerlink" href="#语法-3"></a>语法</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称([<span class="keyword">in</span> <span class="operator">/</span> <span class="keyword">out</span> <span class="operator">/</span> <span class="keyword">inout</span> 参数名 参数类型])</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">...  <span class="comment">-- SQL语句</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据传入（in）参数score，判定当前分数对应的分数等级，并返回（out）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p4(<span class="keyword">in</span> score <span class="type">int</span>, <span class="keyword">out</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">if score <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;优秀&#x27;</span>;</span><br><span class="line">elseif score <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> p4(<span class="number">68</span>, <span class="variable">@result</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@result</span>;</span><br></pre></td></tr></table></figure><hr><h4 id="case"><a class="headerlink" href="#case"></a>case</h4><hr><p>case结构及作用，和MySQL基础中的流程控制函数很类似</p><h5 id="语法-4"><a class="headerlink" href="#语法-4"></a>语法</h5><ul><li><p>第一种格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> case_value</span><br><span class="line"><span class="keyword">when</span> when_value1 <span class="keyword">then</span> statement_list1</span><br><span class="line">[<span class="keyword">when</span> when_value2 <span class="keyword">then</span> statement_list2] ...</span><br><span class="line">[<span class="keyword">else</span> statement_list]</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br></pre></td></tr></table></figure></li><li><p>第二种格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> case_value</span><br><span class="line"><span class="keyword">when</span> search_condition1 <span class="keyword">then</span> statement_list1</span><br><span class="line">[<span class="keyword">when</span> search_condition2 <span class="keyword">then</span> statement_list2] ...</span><br><span class="line">[<span class="keyword">else</span> statement_list]</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br></pre></td></tr></table></figure></li></ul><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据传入的月份，判定月份所属的季节（要求采用case结构）。</span></span><br><span class="line"><span class="comment">-- 1-3月份，为第一季度</span></span><br><span class="line"><span class="comment">-- 4-6月份，为第二季度</span></span><br><span class="line"><span class="comment">-- 7-9月份，为第三季度</span></span><br><span class="line"><span class="comment">-- 10-12月份，为第四季度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p6(<span class="keyword">in</span> <span class="keyword">month</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">3</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;第一季度&#x27;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">4</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">6</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;第二季度&#x27;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">7</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">9</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;第三季度&#x27;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">10</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">12</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;第四季度&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;非法参数&#x27;</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> concat(&quot;您输入的月份为：&quot;, <span class="keyword">month</span>, &quot;，所属的季度为：&quot;, <span class="keyword">result</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> p6(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><hr><h4 id="循环的语法结构"><a class="headerlink" href="#循环的语法结构"></a>循环的语法结构</h4><hr><h5 id="while"><a class="headerlink" href="#while"></a>while</h5><p>while 循环是有条件的循环控制语句。满足条件后，再执行循环体中的SQL语句 （可以看成 while）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 先判定条件，如果条件为true，则执行逻辑，否则，不执行逻辑</span></span><br><span class="line"></span><br><span class="line">while 条件 do</span><br><span class="line"><span class="keyword">SQL</span>逻辑...</span><br><span class="line"><span class="keyword">end</span> while;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 计算从1累加到n的值，n为传入的参数值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p6(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">while n <span class="operator">&gt;</span> <span class="number">0</span> do</span><br><span class="line"><span class="keyword">set</span> total :<span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line"><span class="keyword">set</span> n :<span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> while;</span><br><span class="line"><span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> p6(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h5 id="repeat"><a class="headerlink" href="#repeat"></a>repeat</h5><p>repeat是有条件的循环控制语句, 当满足 until 声明的条件的时候，则退出循环 （可以看成 do…while）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 先执行一次逻辑，然后判定UNTIL条件是否满足，如果满足，则退出。如果不满足，则继续下一次循环</span></span><br><span class="line"></span><br><span class="line">repeat</span><br><span class="line"><span class="keyword">SQL</span>逻辑...</span><br><span class="line">until 条件</span><br><span class="line"><span class="keyword">end</span> repeat;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 计算从1累加到n的值，n为传入的参数值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p7(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">repeat</span><br><span class="line"><span class="keyword">set</span> total :<span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line"><span class="keyword">set</span> n :<span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span> ;</span><br><span class="line">until n <span class="operator">&lt;=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span> repeat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> p7(<span class="number">8</span>);</span><br></pre></td></tr></table></figure><h5 id="loop"><a class="headerlink" href="#loop"></a>loop</h5><p>loop 实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用其来实现简单的死循环</p><p>loop 可以配合一下两个语句使用：</p><ol><li>leave ：配合循环使用，退出循环 （可以看成 for 中的退出条件）</li><li>iterate：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环 (可以看成 continue)</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[begin_label:] loop</span><br><span class="line"><span class="keyword">SQL</span>逻辑...</span><br><span class="line"><span class="keyword">end</span> loop [end_label];</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">leave label;    <span class="comment">-- 退出指定标记的循环体</span></span><br><span class="line">iterate label;  <span class="comment">-- 直接进入下一次循环</span></span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 计算从1累加到n的值，n为传入的参数值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p8(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">sum : loop</span><br><span class="line">if n <span class="operator">&lt;=</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">leave sum;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> total :<span class="operator">=</span> totl <span class="operator">+</span> n;</span><br><span class="line"><span class="keyword">set</span> n :<span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> loop sum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> p9(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><hr><h4 id="游标"><a class="headerlink" href="#游标"></a>游标</h4><hr><p>游标（CURSOR）是用来 <strong>存储查询结果集的数据类型</strong> , 在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括 游标的声明、open、fetch 和 close</p><p><strong>声明游标</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> 游标名称 <span class="keyword">cursor</span> <span class="keyword">for</span> 查询语句;</span><br></pre></td></tr></table></figure><p><strong>打开游标</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> 游标名称;</span><br></pre></td></tr></table></figure><p><strong>获取游标记录</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fetch</span> 游标名称 <span class="keyword">into</span> 变量[,变量 ];</span><br></pre></td></tr></table></figure><p><strong>关闭游标</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">close</span> 游标名称</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据传入的参数uage，来查询用户表tb_user中，所有的用户年龄小于等于uage的用户姓名（name）和专业（profession），并将用户的姓名和专业插入到所创建的一张新表 (id,name,profession)中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 游标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p11(<span class="keyword">in</span> uage <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="comment">-- 先声明变量，再声明游标</span></span><br><span class="line">    <span class="keyword">declare</span> uname <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">declare</span> upro <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 1. 声明游标，来存储查询的结果集</span></span><br><span class="line">    <span class="keyword">declare</span> u_cursor <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> name, profession <span class="keyword">from</span> tb_user <span class="keyword">where</span> age <span class="operator">&lt;=</span> uage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user_pro;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 2. 创建表结构</span></span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> tb_user_pro(</span><br><span class="line">        id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">        name <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">        profession <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 3. 开启游标</span></span><br><span class="line">    <span class="keyword">open</span> u_cursor;</span><br><span class="line"></span><br><span class="line">    while <span class="literal">true</span> do</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- 4. 获取游标中的记录</span></span><br><span class="line">        <span class="keyword">fetch</span> u_cursor <span class="keyword">into</span> uname, upro;</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- 5. 插入数据到新表中</span></span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> tb_user_pro <span class="keyword">values</span> (<span class="keyword">null</span>, uname, upro);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span> while;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 6. 关闭游标</span></span><br><span class="line">    <span class="keyword">close</span> u_cursor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> p11(<span class="number">40</span>);</span><br></pre></td></tr></table></figure><hr><h4 id="条件处理程序"><a class="headerlink" href="#条件处理程序"></a>条件处理程序</h4><hr><p>条件处理程序（Handler）可以用来 <strong>定义在流程控制结构执行过程中遇到问题时相应的处理步骤</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> handler_action handler <span class="keyword">for</span> condition_value [, condition_value] ... statement;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># handler_action 的取值：</span><br><span class="line">continue: 继续执行当前程序</span><br><span class="line">exit: 终止执行当前程序</span><br><span class="line"></span><br><span class="line"># condition_value 的取值：</span><br><span class="line"><span class="keyword">sqlstate</span> sqlstate_value: 状态码，如 <span class="number">02000</span></span><br><span class="line"><span class="keyword">sqlwarning</span>: 所有以<span class="number">01</span>开头的<span class="keyword">SQLSTATE</span>代码的简写</span><br><span class="line"><span class="keyword">not</span> found: 所有以<span class="number">02</span>开头的<span class="keyword">SQLSTATE</span>代码的简写</span><br><span class="line"><span class="keyword">sqlexception</span>: 所有没有被<span class="keyword">SQLWARNING</span> 或 <span class="keyword">NOT</span> FOUND捕获的<span class="keyword">SQLSTATE</span>代码的简写</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 问题和上面的问题是一样的</span></span><br><span class="line"><span class="comment">-- 游标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p11(<span class="keyword">in</span> uage <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="comment">-- 先声明变量，再声明游标</span></span><br><span class="line">    <span class="keyword">declare</span> uname <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">declare</span> upro <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 1. 声明游标，来存储查询的结果集</span></span><br><span class="line">    <span class="keyword">declare</span> u_cursor <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> name, profession <span class="keyword">from</span> tb_user <span class="keyword">where</span> age <span class="operator">&lt;=</span> uage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 这是一个条件处理程序，当sql码为02000时，就触发退出程序，并且在退出时关闭游标</span></span><br><span class="line">    <span class="comment">-- 执行这个程序就不会报错</span></span><br><span class="line">    <span class="keyword">declare</span> exit handler <span class="keyword">for</span> <span class="keyword">sqlstate</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">close</span> u_cursor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user_pro;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 2. 创建表结构</span></span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> tb_user_pro(</span><br><span class="line">        id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">        name <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">        profession <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 3. 开启游标</span></span><br><span class="line">    <span class="keyword">open</span> u_cursor;</span><br><span class="line"></span><br><span class="line">    while <span class="literal">true</span> do</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- 4. 获取游标中的记录</span></span><br><span class="line">        <span class="keyword">fetch</span> u_cursor <span class="keyword">into</span> uname, upro;</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- 5. 插入数据到新表中</span></span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> tb_user_pro <span class="keyword">values</span> (<span class="keyword">null</span>, uname, upro);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span> while;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 6. 关闭游标</span></span><br><span class="line">    <span class="keyword">close</span> u_cursor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> p11(<span class="number">40</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="存储函数（function）"><a class="headerlink" href="#存储函数（function）"></a>存储函数（function）</h3><hr><p>存储函数是有返回值的存储过程，存储函数的<strong>参数只能是 in 类型</strong>的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> 存储函数名称([参数列表])</span><br><span class="line"><span class="keyword">returns</span> type [characteristic ...]</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">-- SQL语句</span></span><br><span class="line"><span class="keyword">return</span> ...;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>characteristic说明：</p><ul><li><code>deterministic</code>：相同的输入参数总是产生相同的结果</li><li><code>no sql</code>：不包含 SQL 语句</li><li><code>reads sql data</code>：包含读取数据的语句，但不包含写入数据的语句</li></ul><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 存储函数</span></span><br><span class="line"><span class="comment">-- 计算从1累加到n的值，n为传入的参数值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> fun1(n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">returns</span> <span class="type">int</span> <span class="keyword">deterministic</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    while n <span class="operator">&gt;</span> <span class="number">0</span> do</span><br><span class="line">        <span class="keyword">set</span> total :<span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line">        <span class="keyword">set</span> n :<span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span> while;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5050</span></span><br><span class="line"><span class="keyword">select</span> fun1(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="触发器（trigger）"><a class="headerlink" href="#触发器（trigger）"></a>触发器（trigger）</h3><hr><p>触发器：是与表有关的数据库对象，指在 insert / update / delete 之前（before）或之后（after），触发并执行触发器中定义的SQL语句集合，跟日志差不多</p><p>触发器的这种特性可以协助应用在数据库端 <strong>确保数据的完整性，日志记录，数据校验等操作</strong></p><p>使用别名 <code>old</code> 和 <code>new</code> 来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705204530160.png" alt="触发器类型" loading="lazy"></p><hr><h4 id="语法-5"><a class="headerlink" href="#语法-5"></a>语法</h4><ul><li><p>创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_name</span><br><span class="line">before <span class="operator">/</span> after </span><br><span class="line"><span class="keyword">insert</span> <span class="operator">/</span> <span class="keyword">update</span> <span class="operator">/</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span> tbl_name <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span>  <span class="comment">-- 行级触发器</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">trigger_stmt;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p>查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> triggers;</span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> [schema_name.]trigger_name;</span><br><span class="line"><span class="comment">-- 如果没有指定schema_name，默认为当前数据库</span></span><br></pre></td></tr></table></figure></li></ul><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通过触发器记录 tb_user 表的数据变更日志，将变更日志插入到日志表user_logs中, 包含增加, 修改 , 删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 准备工作</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_logs(</span><br><span class="line">id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">operation <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;操作类型, insert/update/delete&#x27;</span>,</span><br><span class="line">operate_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">operate_id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;操作的ID&#x27;</span>,</span><br><span class="line">operate_params <span class="type">varchar</span>(<span class="number">500</span>) comment <span class="string">&#x27;操作参数&#x27;</span>,</span><br><span class="line"><span class="keyword">primary</span> key(`id`)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入数据触发器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tb_user_insert_trigger</span><br><span class="line">    after <span class="keyword">insert</span> <span class="keyword">on</span> tb_user <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> user_logs(id, operation, operate_time, operate_id, operate_params) <span class="keyword">values</span></span><br><span class="line">    (<span class="keyword">null</span>, <span class="string">&#x27;insert&#x27;</span>, now(), new.id, concat(<span class="string">&#x27;插入数据内容为：id = &#x27;</span>, new.id, <span class="string">&#x27;name = &#x27;</span>, new.name, <span class="string">&#x27;email = &#x27;</span>, NEW.email));</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改数据触发器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tb_user_update_trigger</span><br><span class="line">    after <span class="keyword">update</span> <span class="keyword">on</span> tb_user <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> user_logs(id, operation, operate_time, operate_id, operate_params) <span class="keyword">values</span></span><br><span class="line">        (<span class="keyword">null</span>, <span class="string">&#x27;update&#x27;</span>, now(), new.id, concat(<span class="string">&#x27;更新之前数据内容为：id = &#x27;</span>, OLD.id, <span class="string">&#x27;name = &#x27;</span>, OLD.name, <span class="string">&#x27;email = &#x27;</span>, OLD.email, <span class="string">&#x27;更新之后数据内容为：id = &#x27;</span>, NEW.id, <span class="string">&#x27;name = &#x27;</span>, NEW.name, <span class="string">&#x27;email = &#x27;</span>, NEW.email ));</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除数据触发器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tb_user_delete_trigger</span><br><span class="line">    after <span class="keyword">delete</span> <span class="keyword">on</span> tb_user <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> user_logs(id, operation, operate_time, operate_id, operate_params) <span class="keyword">values</span></span><br><span class="line">        (<span class="keyword">null</span>, <span class="string">&#x27;delete&#x27;</span>, now(), OLD.id, concat(<span class="string">&#x27;删除之前数据内容为：id = &#x27;</span>, OLD.id, <span class="string">&#x27;name = &#x27;</span>, OLD.name, <span class="string">&#x27;email = &#x27;</span>, OLD.email));</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看触发器的指令</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> triggers;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除触发器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> tb_user_insert_trigger;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00 仿今日头条项目</title>
      <link href="/2024/06/25/00-%E5%A4%B4%E6%9D%A1%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE/"/>
      <url>/2024/06/25/00-%E5%A4%B4%E6%9D%A1%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1>仿今日头条项目</h1><hr><h2 id="相关技术栈"><a class="headerlink" href="#相关技术栈"></a>相关技术栈</h2><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627143033806.png" alt="技术栈" loading="lazy"></p><ul><li>Spring-Cloud-Gateway : 微服务之前架设的网关服务，实现服务注册中的API请求路由，以及控制流速控制和熔断处理都是常用的架构手段，而这些功能Gateway天然支持</li><li>运用Spring Boot快速开发框架，构建项目工程；并结合Spring Cloud全家桶技术，实现后端个人中心、自媒体、管理中心等微服务。</li><li>运用Spring Cloud Alibaba Nacos作为项目中的注册中心和配置中心</li><li>运用mybatis-plus作为持久层提升开发效率</li><li>运用Kafka完成内部系统消息通知；与客户端系统消息通知；以及实时数据计算</li><li>运用Redis缓存技术，实现热数据的计算，提升系统性能指标</li><li>使用Mysql存储用户数据，以保证上层数据查询的高性能</li><li>使用Mongo存储用户热数据，以保证用户热数据高扩展和高性能指标</li><li>使用FastDFS作为静态资源存储器，在其上实现热静态资源缓存、淘汰等功能</li><li>运用Hbase技术，存储系统中的冷数据，保证系统数据的可靠性</li><li>运用ES搜索技术，对冷数据、文章数据建立索引，以保证冷数据、文章查询性能</li><li>运用AI技术，来完成系统自动化功能，以提升效率及节省成本。比如实名认证自动化</li><li>PMD&amp;P3C : 静态代码扫描工具，在项目中扫描项目代码，检查异常点、优化点、代码规范等，为开发团队提供规范统一，提升项目代码质量</li></ul><hr><h2 id="环境搭建"><a class="headerlink" href="#环境搭建"></a>环境搭建</h2><hr><h3 id="docker-安装-Nacos"><a class="headerlink" href="#docker-安装-Nacos"></a>docker 安装 Nacos</h3><hr><ol><li><p>docker拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos/nacos-server:1.2.0</span><br></pre></td></tr></table></figure></li><li><p>创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --env MODE=standalone --name nacos --restart=always  -d -p 8848:8848 nacos/nacos-server:1.2.0</span><br></pre></td></tr></table></figure><ul><li><p>MODE=standalone 单机版</p></li><li><p>–restart=always 开机启动</p></li><li><p>-p 8848:8848  映射端口</p></li><li><p>-d 创建一个守护式容器在后台运行</p></li></ul></li><li><p>访问地址：<a href="http://192.168.88.129:8848/nacos">http://192.168.88.129:8848/nacos</a></p></li></ol><hr><h2 id="初始项目模块介绍"><a class="headerlink" href="#初始项目模块介绍"></a>初始项目模块介绍</h2><hr><ul><li>父工程<ul><li><code>coo1heisenberg-todaynews</code><ul><li>统一管理项目依赖，继承springboot</li></ul></li></ul></li><li>子工程<ul><li><code>todaynews-common</code><ul><li>主要用来定义项目通用的配置（例如：全局异常）<ul><li>全局异常处理器会根据异常分为可预知异常（CostomException）、不可预知异常（Exception）</li></ul></li></ul></li><li><code>todaynews-feign-api</code><ul><li>主要定义远程接口</li></ul></li><li><code>todaynews-gateway</code><ul><li>管理网关微服务</li></ul></li><li><code>todaynews-model</code><ul><li>存储数据库中的表的对应的实体类（pojo、dto）</li></ul></li><li><code>todaynews-service</code><ul><li>存储所有微服务相关的工程</li></ul></li><li><code>todaynews-test</code><ul><li>主要是项目中常用的测试案例</li></ul></li><li><code>todaynews-utils</code><ul><li>存储项目中常用的工具类</li></ul></li></ul></li></ul><hr><h2 id="app端-登录"><a class="headerlink" href="#app端-登录"></a>app端 登录</h2><hr><p>关于app端用户相关的内容较多，可以单独设置一个库leadnews_user</p><table><thead><tr><th><strong>表名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>ap_user</td><td>APP用户信息表</td></tr><tr><td>ap_user_fan</td><td>APP用户粉丝信息表</td></tr><tr><td>ap_user_follow</td><td>APP用户关注信息表</td></tr><tr><td>ap_user_realname</td><td>APP实名认证信息表</td></tr></tbody></table><p>项目中的持久层使用的mybatis-plus，一般都使用mybais-plus逆向生成对应的实体类</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705121627494.png" alt="Ap_User表" loading="lazy"></p><p>则app_user表对应的实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;ap_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApUser</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码、通信等加密盐</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;salt&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码,md5加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;password&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;phone&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;image&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 0 男</span></span><br><span class="line"><span class="comment">     * 1 女</span></span><br><span class="line"><span class="comment">     * 2 未知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;sex&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 0 未</span></span><br><span class="line"><span class="comment">     * 1 是</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;is_certification&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean certification;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否身份认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;is_identity_authentication&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean identityAuthentication;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 0正常</span></span><br><span class="line"><span class="comment">     * 1锁定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;status&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 0 普通用户</span></span><br><span class="line"><span class="comment">     * 1 自媒体人</span></span><br><span class="line"><span class="comment">     * 2 大V</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;flag&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Short flag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;created_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个表中有一项为salt，是手动加密（md5+随机字符串）</p><ul><li><p>md5是不可逆加密，md5相同的密码每次加密都一样，不太安全。在md5的基础上手动加盐（salt）处理</p></li><li><p>注册-&gt;生成盐</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627163739363.png" alt="注册流程" loading="lazy"></p></li><li><p>登录-&gt;使用盐来配合验证</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627163927354.png" alt="登录流程" loading="lazy"></p></li></ul><hr><h3 id="运营端微服务的搭建"><a class="headerlink" href="#运营端微服务的搭建"></a>运营端微服务的搭建</h3><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627165609381.png" alt="微服务架构" loading="lazy"></p><hr><h3 id="app登录-接口定义"><a class="headerlink" href="#app登录-接口定义"></a>app登录 接口定义</h3><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627165926734.png" alt="接口定义" loading="lazy"></p><h4 id="常见端口的响应信息"><a class="headerlink" href="#常见端口的响应信息"></a>常见端口的响应信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的结果返回类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String errorMessage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.errorMessage = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.errorMessage = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">errorResult</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>();</span><br><span class="line">        <span class="keyword">return</span> result.error(code, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">okResult</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>();</span><br><span class="line">        <span class="keyword">return</span> result.ok(code, <span class="literal">null</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">okResult</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> setAppHttpCodeEnum(AppHttpCodeEnum.SUCCESS, AppHttpCodeEnum.SUCCESS.getErrorMessage());</span><br><span class="line">        <span class="keyword">if</span>(data!=<span class="literal">null</span>) &#123;</span><br><span class="line">            result.setData(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 查询一个对象</span></span><br><span class="line"><span class="comment">// Map map = new HashMap();</span></span><br><span class="line"><span class="comment">// map.put(&quot;name&quot;,&quot;zhangsan&quot;);</span></span><br><span class="line"><span class="comment">// map.put(&quot;age&quot;,18);</span></span><br><span class="line"><span class="comment">// ResponseResult result = ResponseResult.okResult(map);</span></span><br><span class="line"><span class="comment">// System.out.println(JSON.toJSONString(result));</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">errorResult</span><span class="params">(AppHttpCodeEnum enums)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> setAppHttpCodeEnum(enums,enums.getErrorMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 新增，修改，删除  在项目中统一返回成功即可</span></span><br><span class="line"><span class="comment">// ResponseResult result = ResponseResult.errorResult(AppHttpCodeEnum.SUCCESS);</span></span><br><span class="line"><span class="comment">// System.out.println(JSON.toJSONString(result));</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">errorResult</span><span class="params">(AppHttpCodeEnum enums, String errorMessage)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> setAppHttpCodeEnum(enums,errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//根据不用的业务返回不同的提示信息  比如：当前操作需要登录、参数错误</span></span><br><span class="line"><span class="comment">// ResponseResult result = ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);</span></span><br><span class="line"><span class="comment">// System.out.println(JSON.toJSONString(result));</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">setAppHttpCodeEnum</span><span class="params">(AppHttpCodeEnum enums)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> okResult(enums.getCode(),enums.getErrorMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 前置</span></span><br><span class="line"><span class="comment">// AppHttpCodeEnum success = AppHttpCodeEnum.SUCCESS;</span></span><br><span class="line"><span class="comment">// System.out.println(success.getCode());</span></span><br><span class="line"><span class="comment">// System.out.println(success.getErrorMessage());*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResponseResult <span class="title function_">setAppHttpCodeEnum</span><span class="params">(AppHttpCodeEnum enums, String errorMessage)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> okResult(enums.getCode(),errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;?&gt; error(Integer code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.errorMessage = msg;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;?&gt; ok(Integer code, T data) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;?&gt; ok(Integer code, T data, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.errorMessage = msg;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;?&gt; ok(T data) &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getErrorMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setErrorMessage</span><span class="params">(String errorMessage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.errorMessage = errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHost</span><span class="params">(String host)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分页的返回结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResponseResult</span> <span class="keyword">extends</span> <span class="title class_">ResponseResult</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer currentPage;</span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="keyword">private</span> Integer total;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResponseResult</span><span class="params">(Integer currentPage, Integer size, Integer total)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.currentPage = currentPage;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 查询分页信息</span></span><br><span class="line"><span class="comment">// PageResponseResult responseResult = new PageResponseResult(1,5,50);</span></span><br><span class="line"><span class="comment">// List list = new ArrayList();</span></span><br><span class="line"><span class="comment">// list.add(&quot;todaynews&quot;);</span></span><br><span class="line"><span class="comment">// list.add(&quot;coo1heisenberg&quot;);</span></span><br><span class="line"><span class="comment">// responseResult.setData(list);</span></span><br><span class="line"><span class="comment">// System.out.println(JSON.toJSONString(responseResult));</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResponseResult</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurrentPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrentPage</span><span class="params">(<span class="type">int</span> currentPage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.currentPage = currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotal</span><span class="params">(<span class="type">int</span> total)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="app登录-分析"><a class="headerlink" href="#app登录-分析"></a>app登录 分析</h3><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627172928628.png" alt="登录分析" loading="lazy"></p><hr><h3 id="app登录-微服务框架"><a class="headerlink" href="#app登录-微服务框架"></a>app登录 微服务框架</h3><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627175352891.png" alt="微服务架构" loading="lazy"></p><h4 id="控制层-controller-v1"><a class="headerlink" href="#控制层-controller-v1"></a>控制层 controller.v1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApUserLoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApUserService apUserService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @RequestBody：因为传过来的都是JSON的数据，需要这个注释转换</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login_auth&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginDto dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> apUserService.login(dto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="持久层-mapper"><a class="headerlink" href="#持久层-mapper"></a>持久层 mapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="comment">// @Mapper注解的接口继承BaseMapper进行增删改查</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApUserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;ApUser&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="业务层-service"><a class="headerlink" href="#业务层-service"></a>业务层 service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Service接口继承IService，实现类继承ServiceImpl。也可以使用Service类进行增删改查</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;ApUser&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * app端登录功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(LoginDto dto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现类-service-Impl"><a class="headerlink" href="#实现类-service-Impl"></a>实现类 service.Impl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApUserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ApUserMapper, ApUser&gt; <span class="keyword">implements</span> <span class="title class_">ApUserService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * app端登录功能</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(LoginDto dto)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 正常登录 用户名和密码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNoneBlank(dto.getPhone())</span><br><span class="line">                &amp;&amp; StringUtils.isNoneBlank(dto.getPassword())) &#123;</span><br><span class="line">            <span class="comment">// 1.1 根据手机号查询用户信息</span></span><br><span class="line">            <span class="comment">// Mybatis-Plus中的定义（复习！！！）</span></span><br><span class="line">            <span class="type">ApUser</span> <span class="variable">dbUser</span> <span class="operator">=</span> getOne(Wrappers.&lt;ApUser&gt;lambdaQuery().eq(ApUser::getPhone, dto.getPhone()));</span><br><span class="line">            <span class="keyword">if</span> (dbUser == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.DATA_NOT_EXIST, <span class="string">&quot;用户信息不存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1.2 比对密码</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> dbUser.getSalt();</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> dto.getPassword();</span><br><span class="line">            <span class="comment">// Spring框架提供的MD5加密</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">pswd</span> <span class="operator">=</span> DigestUtils.md5DigestAsHex((password + salt).getBytes());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!pswd.equals(dbUser.getPassword())) &#123;</span><br><span class="line">                <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.LOGIN_PASSWORD_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1.3 返回数据  生成jwt  user</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> AppJwtUtil.getToken(dbUser.getId().longValue());</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">            <span class="comment">// Salt和password是不需要返回给前端的</span></span><br><span class="line">            dbUser.setSalt(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            dbUser.setPassword(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;user&quot;</span>,dbUser);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ResponseResult.okResult(map);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 游客登录</span></span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;token&quot;</span>, AppJwtUtil.getToken(<span class="number">0L</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ResponseResult.okResult(map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UserApplication-java"><a class="headerlink" href="#UserApplication-java"></a>UserApplication.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.heima.user.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(UserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="资源类-resources"><a class="headerlink" href="#资源类-resources"></a>资源类 resources</h4><h5 id="bootstrap-yml"><a class="headerlink" href="#bootstrap-yml"></a>bootstrap.yml</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">51801</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">todaynews-user</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.130</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.130</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br></pre></td></tr></table></figure><h5 id="logback-vml"><a class="headerlink" href="#logback-vml"></a>logback.vml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件的存储地址,使用绝对路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;d:/logs&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Console 输出设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/leadnews.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 异步输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ASYNC&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">discardingThreshold</span>&gt;</span>0<span class="tag">&lt;/<span class="name">discardingThreshold</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">queueSize</span>&gt;</span>512<span class="tag">&lt;/<span class="name">queueSize</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加附加的appender,最多只能添加一个 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis.cache.decorators.LoggingCache&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework.boot&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;appender-ref ref=&quot;ASYNC&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注册中心-nacos"><a class="headerlink" href="#注册中心-nacos"></a>注册中心 nacos</h4><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627203541366.png" alt="nacos" loading="lazy"></p><hr><h2 id="接口测试工具"><a class="headerlink" href="#接口测试工具"></a>接口测试工具</h2><hr><h3 id="Postman"><a class="headerlink" href="#Postman"></a>Postman</h3><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627192832041.png" alt="测试用户登录" loading="lazy"></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627192900245.png" alt="测试游客登录" loading="lazy"></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627193103689.png" alt="测试错误登录" loading="lazy"></p><hr><h3 id="Swagger"><a class="headerlink" href="#Swagger"></a>Swagger</h3><hr><p>Swagger是一个在线的接口文档管理中心</p><p>SpringBoot集成Swagger</p><ul><li><p>引入依赖，在<code>todaynews-model</code>和<code>todaynews-common</code>中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>todaynews-common</code>工程中添加一个配置类，新增<code>com.heima.common.swagger.SwaggerConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.common.swagger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Docket <span class="title function_">buildDocket</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">              .apiInfo(buildApiInfo())</span><br><span class="line">              .select()</span><br><span class="line">              <span class="comment">// 要扫描的API(Controller)基础包</span></span><br><span class="line">              .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.heima&quot;</span>))</span><br><span class="line">              .paths(PathSelectors.any())</span><br><span class="line">              .build();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ApiInfo <span class="title function_">buildApiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;海森堡&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">              .title(<span class="string">&quot;头条点评-平台管理API文档&quot;</span>)</span><br><span class="line">              .description(<span class="string">&quot;头条点评后台api&quot;</span>)</span><br><span class="line">              .contact(contact)</span><br><span class="line">              .version(<span class="string">&quot;1.0.0&quot;</span>).build();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>todaynews-common</code>模块中的<code>resources</code>目录中新增以下目录和文件</p><ul><li><p>文件：<code>resources/META-INF/Spring.factories</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line">  <span class="string">com.heima.common.exception.ExceptionCatch,\</span></span><br><span class="line">  <span class="string">com.heima.common.swagger.SwaggerConfiguration</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>常用Swagger注解如下：</p><ul><li><p>@Api：修饰整个类，描述Controller的作用</p></li><li><p>@ApiOperation：描述一个类的一个方法，或者说一个接口</p></li><li><p>@ApiParam：单个参数的描述信息</p></li><li><p>@ApiModel：用对象来接收参数</p></li><li><p>@ApiModelProperty：用对象接收参数时，描述对象的一个字段</p></li><li><p>@ApiResponse：HTTP响应其中1个描述</p></li><li><p>@ApiResponses：HTTP响应整体描述</p></li><li><p>@ApiIgnore：使用该注解忽略这个API</p></li><li><p>@ApiError ：发生错误返回的信息</p></li><li><p>@ApiImplicitParam：一个请求参数</p></li><li><p>@ApiImplicitParams：多个请求参数的描述信息</p></li></ul></li><li><p>启动user微服务，访问地址：<a href="http://localhost:51801/swagger-ui.html">http://localhost:51801/swagger-ui.html</a></p></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ApUserLoginController.java文件下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/login&quot;)</span></span><br><span class="line"><span class="meta">@Api(value = &quot;app端用户登录&quot;, tags = &quot;app端用户登录&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApUserLoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApUserService apUserService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @RequestBody：因为传过来的都是JSON的数据，需要这个注释转换</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;用户登录&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login_auth&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginDto dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> apUserService.login(dto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model类下的LoginDTO</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录用的手机号和密码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// required = true 指必须输入的</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;手机号&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;密码&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627200620825.png" alt="测试结果" loading="lazy"></p><hr><h3 id="knife4j"><a class="headerlink" href="#knife4j"></a>knife4j</h3><hr><p>核心功能：</p><ul><li>文档说明</li><li>在线调试</li><li>个性化配置</li><li>离线文档</li><li>接口排序</li></ul><p>快速集成</p><ul><li><p>在<code>todaynews-common</code>模块中的<code>pom.xml</code>文件中引入<code>knife4j</code>的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>todaynews-common</code>模块中新建配置类，新建Swagger的配置文件<code>SwaggerConfiguration.java</code>文件，创建springfox提供的Docket分组对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.common.knife4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// @EnableSwagger2：该注解是Springfox-swagger框架提供的使用Swagger注解</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="comment">// @EnableKnife4j：该注解是knife4j提供的增强注解,Ui提供了例如动态参数、参数过滤、接口排序等增强功能,如果你想使用这些增强功能就必须加该注解，否则可以不用加</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span></span><br><span class="line"><span class="meta">@Import(BeanValidatorPluginsConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Configuration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;defaultApi2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">defaultApi2</span><span class="params">()</span> &#123;</span><br><span class="line">        Docket docket=<span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                <span class="comment">//分组名称</span></span><br><span class="line">                .groupName(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//这里指定Controller扫描包路径</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.heima&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;头条点评API文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;头条点评API文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>todaynews-common</code>模块中的<code>resources</code>目录中新增以下目录和文件</p><ul><li><p>文件：<code>resources/META-INF/Spring.factories</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line">  <span class="string">com.heima.common.exception.ExceptionCatch,\</span></span><br><span class="line">  <span class="string">com.heima.common.swagger.SwaggerConfiguration</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>访问，在浏览器输入地址：<a href="http://localhost:51801/doc.html">http://localhost:51801/doc.html</a></p></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627202304180.png" alt="输出示例" loading="lazy"></p><hr><h2 id="app端-网关"><a class="headerlink" href="#app端-网关"></a>app端 网关</h2><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627202525385.png" alt="网关介绍" loading="lazy"></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627202651222.png" alt="本项目要搭建的网关" loading="lazy"></p><h3 id="网关的搭建流程"><a class="headerlink" href="#网关的搭建流程"></a>网关的搭建流程</h3><h4 id="导入依赖"><a class="headerlink" href="#导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注册中心-nacos-2"><a class="headerlink" href="#注册中心-nacos-2"></a>注册中心 nacos</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">DELETE</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">PUT</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">OPTION</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># 平台管理</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://leadnews-user</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627204911840.png" alt="nacos 注册中心" loading="lazy"></p><h4 id="bootstrap-yml-2"><a class="headerlink" href="#bootstrap-yml-2"></a>bootstrap.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">51601</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">todaynews-app-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.130</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.130</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br></pre></td></tr></table></figure><h4 id="AppGatewayApplication-java"><a class="headerlink" href="#AppGatewayApplication-java"></a>AppGatewayApplication.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 加入注册中心</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppGatewayApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(AppGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="认证过滤器"><a class="headerlink" href="#认证过滤器"></a>认证过滤器</h3><hr><p>主要用来校验当前的token</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627205700670.png" alt="过滤流程" loading="lazy"></p><p><strong>实现流程</strong>：</p><ol><li><p>在<code>com.heima.app.gateway.util</code>包下拷贝<code>AppJwtUtil.java</code></p></li><li><p>在<code>com.heima.app.gateway.filter</code>包下新建全局过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">// AuthorizeFilter实现了GatewayFilter和Ordered接口，用于实现全局过滤器的逻辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">Ordered</span>, GlobalFilter &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取 request 和 response</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 判断是否是登录</span></span><br><span class="line">        <span class="keyword">if</span> (request.getURI().getPath().contains(<span class="string">&quot;/login&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeaders().getFirst(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 判断token是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="comment">// HttpStatus.UNAUTHORIZED：401</span></span><br><span class="line">            response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> response.setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 判断token是否有效</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取token中的数据</span></span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claimsBody</span> <span class="operator">=</span> AppJwtUtil.getClaimsBody(token);</span><br><span class="line">            <span class="comment">// 是否是过期</span></span><br><span class="line">            <span class="comment">// -1：有效，0：有效，1：过期，2：过期</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> AppJwtUtil.verifyToken(claimsBody);</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="number">1</span> || result == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// HttpStatus.UNAUTHORIZED：401</span></span><br><span class="line">                response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">                <span class="keyword">return</span> response.setComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// HttpStatus.UNAUTHORIZED：401</span></span><br><span class="line">            response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> response.setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优先级设置  值越小 优先级越高</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动user服务，继续访问其他微服务，会提示需要认证才能访问，这个时候需要在heads中设置设置token才能正常访问</p></li></ol><hr><h2 id="app端-前端项目集成"><a class="headerlink" href="#app端-前端项目集成"></a>app端 前端项目集成</h2><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627215814448.png" alt="nginx" loading="lazy"></p><ul><li>通过nginx的反向代理功能访问后台的网关资源</li><li>通过nginx的静态服务器功能访问前端静态页面</li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240627225906987.png" alt="流程" loading="lazy"></p><ul><li><p>在 nginx 安装的 conf 目录下新建一个文件夹<code>todaynews.conf</code>,在当前文件夹中新建<code>todaynews-app.conf</code>文件，配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">upstream  heima-app-gateway&#123;</span><br><span class="line">    server <span class="attr">localhost</span>:<span class="number">51601</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen <span class="number">8801</span>;</span><br><span class="line">location / &#123;</span><br><span class="line">root <span class="attr">D</span>:<span class="regexp">/BaiduNetdiskDownload/</span>todaynews/app-web/;</span><br><span class="line">index index.<span class="property">html</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~<span class="regexp">/app/</span>(.*) &#123;</span><br><span class="line">proxy_pass <span class="attr">http</span>:<span class="comment">//heima-app-gateway/$1;</span></span><br><span class="line">proxy_set_header <span class="variable constant_">HOST</span> $host;  # 不改变源请求头的值</span><br><span class="line">proxy_pass_request_body on;  #开启获取请求体</span><br><span class="line">proxy_pass_request_headers on;  #开启获取请求头</span><br><span class="line">proxy_set_header X-<span class="title class_">Real</span>-<span class="variable constant_">IP</span> $remote_addr;   # 记录真实发出请求的客户端<span class="variable constant_">IP</span></span><br><span class="line">proxy_set_header X-<span class="title class_">Forwarded</span>-<span class="title class_">For</span> $proxy_add_x_forwarded_for;  #记录代理信息</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>nginx.conf   把里面注释的内容和静态资源配置相关删除，引入 todaynews-app.conf文件加载，配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.<span class="property">types</span>;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"># 引入自定义配置文件</span><br><span class="line">include todaynews.<span class="property">conf</span><span class="comment">/*.conf;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="app端-文章列表"><a class="headerlink" href="#app端-文章列表"></a>app端 文章列表</h2><hr><p>导入数据库 leadnews_article</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701142207366.png" alt="leadnews_article" loading="lazy"></p><p><strong>为什么文章表要拆分成多个表？</strong></p><ul><li>垂直分表：将一个表的字段分散到多个表中，每个表存储其中一部分字段</li><li>优势：<ol><li>减少IO争抢，减少锁表的几率，查看文章概述与文章详情互不影响</li><li>充分发挥高频数据的操作效率，对文章概述数据操作的高效率不会被操作文章详情数据的低效率所累</li></ol></li><li>拆分规则：<ol><li>把不常用的字段单独放在一张表</li><li>把 text，blob 等大字段拆分出来单独放在一张表</li><li>经常组合查询的字段单独放在一张表中</li></ol></li></ul><hr><h3 id="文章列表加载"><a class="headerlink" href="#文章列表加载"></a>文章列表加载</h3><hr><p><strong>实现思路</strong>：</p><ol><li>在默认频道展示10条文章信息</li><li>可以切换频道查看不同种类文章</li><li>当用户下拉可以加载最新的文章（分页）本页文章列表中发布时间为最大的时间为依据</li><li>当用户上拉可以加载更多的文章信息（按照发布时间）本页文章列表中发布时间最小的时间为依据</li><li>如果是当前频道的首页，前端传递默认参数：<ul><li>minBehotTime：0（毫秒）</li><li>maxBehotTime：20000000000000（毫秒）—&gt;2063年</li></ul></li></ol><p><strong>表结构分析</strong>：</p><ul><li><p>ap_article   文章基本信息表</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705122212208.png" alt="ap_article" loading="lazy"></p></li><li><p>ap_article_config   文章配置表</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705122251758.png" alt="ap_article_config" loading="lazy"></p></li><li><p>ap_article_content  文章内容表</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705122323599.png" alt="ap_article_content" loading="lazy"></p></li><li><p>三表之间的关系</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705122358416.png" alt="三表之间的关系" loading="lazy"></p></li></ul><p><strong>接口定义</strong>：</p><table><thead><tr><th></th><th><strong>加载首页</strong></th><th><strong>加载更多</strong></th><th><strong>加载最新</strong></th></tr></thead><tbody><tr><td>接口路径</td><td><code>/api/v1/article/load</code></td><td><code>/api/v1/article/loadmore</code></td><td><code>/api/v1/article/loadnew</code></td></tr><tr><td>请求方式</td><td>POST</td><td>POST</td><td>POST</td></tr><tr><td>参数</td><td>ArticleHomeDto</td><td>ArticleHomeDto</td><td>ArticleHomeDto</td></tr><tr><td>响应结果</td><td>ResponseResult</td><td>ResponseResult</td><td>ResponseResult</td></tr></tbody></table><p><strong>注意</strong>：POST请求可以把数据携带在请求体里，GET请求只能将数据拼接在uri的后面，请求参数比较多一般用POST</p><p>其中，ArticleHomeDto 为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.model.article.dtos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleHomeDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大时间</span></span><br><span class="line">    Date maxBehotTime;</span><br><span class="line">    <span class="comment">// 最小时间</span></span><br><span class="line">    Date minBehotTime;</span><br><span class="line">    <span class="comment">// 分页size</span></span><br><span class="line">    Integer size;</span><br><span class="line">    <span class="comment">// 频道ID</span></span><br><span class="line">    String tag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>app端 文章列表加载的步骤</strong>：</p><ol><li>在 nacos 中添加对应的配置</li><li>定义接口，包括：接口路径、请求方式、入参、出参</li><li>编写mapper文件，包括：文章表与文章配置表多表查询</li><li>编写业务层代码</li><li>编写控制器代码</li><li>swagger测试或前后端联调测试</li></ol><ul><li><p>在 nacos 中添加对应的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/leadnews_article?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment"># 设置Mapper接口所对应的XML文件位置，如果你在Mapper接口中有自定义方法，需要进行该配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/*.xml</span></span><br><span class="line">  <span class="comment"># 设置别名包扫描路径，通过该属性可以给包中的类注册别名</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.heima.model.article.pojos</span></span><br></pre></td></tr></table></figure></li><li><p>定义接口，在<code>com.heima.article.controller.v1</code>目录下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleHomeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载首页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/load&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">load</span><span class="params">(<span class="meta">@RequestBody</span> ArticleHomeDto dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载更多</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/loadmore&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">loadmore</span><span class="params">(<span class="meta">@RequestBody</span> ArticleHomeDto dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载最新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/loadnew&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">loadnew</span><span class="params">(<span class="meta">@RequestBody</span> ArticleHomeDto dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写mapper文件</p><ol><li><p>在<code>com.heima.article.mapper</code>目录下，编写一个接口文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApArticleMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;ApArticle&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载文章列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type  1  加载更多  2  加载最新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ApArticle&gt; <span class="title function_">loadArticleList</span><span class="params">(ArticleHomeDto dto, Short type)</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>resources.mapper</code>目录下，编写mapper对应的映射文件 ApArticleMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.heima.article.mapper.ApArticleMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;resultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.heima.model.article.pojos.ApArticle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;author_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;authorId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;author_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;authorName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;channel_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;channelId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;channel_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;channelName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;layout&quot;</span> <span class="attr">property</span>=<span class="string">&quot;layout&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">property</span>=<span class="string">&quot;flag&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;images&quot;</span> <span class="attr">property</span>=<span class="string">&quot;images&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;labels&quot;</span> <span class="attr">property</span>=<span class="string">&quot;labels&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;likes&quot;</span> <span class="attr">property</span>=<span class="string">&quot;likes&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;collection&quot;</span> <span class="attr">property</span>=<span class="string">&quot;collection&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">property</span>=<span class="string">&quot;comment&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;views&quot;</span> <span class="attr">property</span>=<span class="string">&quot;views&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;province_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;provinceId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;county_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;countyId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;publish_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;publishTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sync_status&quot;</span> <span class="attr">property</span>=<span class="string">&quot;syncStatus&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;static_url&quot;</span> <span class="attr">property</span>=<span class="string">&quot;staticUrl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;loadArticleList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;resultMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        aa.*</span><br><span class="line">        FROM</span><br><span class="line">        `ap_article` aa</span><br><span class="line">        LEFT JOIN ap_article_config aac ON aa.id = aac.article_id</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            and aac.is_delete != 1</span><br><span class="line">            and aac.is_down != 1</span><br><span class="line">            <span class="comment">&lt;!-- loadmore --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;type != null and type == 1&quot;</span>&gt;</span></span><br><span class="line">                and aa.publish_time &lt;![CDATA[&lt;]]&gt; #&#123;dto.minBehotTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;type != null and type == 2&quot;</span>&gt;</span></span><br><span class="line">                and aa.publish_time &lt;![CDATA[&gt;]]&gt; #&#123;dto.maxBehotTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;dto.tag != &#x27;__all__&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and aa.channel_id = #&#123;dto.tag&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by aa.publish_time desc</span><br><span class="line">        limit #&#123;dto.size&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>编写业务层代码</p><ol><li><p>在 <code>com.heima.article.service</code>目录下定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApArticleService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;ApArticle&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载文章列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type  1  加载更多  2  加载最新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">load</span><span class="params">(ArticleHomeDto dto, Short type)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在<code>com.heima.article.service.Impl</code>目录下定义实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApArticleServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ApArticleMapper, ApArticle&gt; <span class="keyword">implements</span> <span class="title class_">ApArticleService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApArticleMapper apArticleMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">short</span> <span class="variable">MAX_PAGE_SIZE</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * public static final Short LOADTYPE_LOAD_MORE = 1;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * public static final Short LOADTYPE_LOAD_NEW = 2;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * public static final String DEFAULT_TAG = &quot;__all__&quot;;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载文章列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 1  加载更多  2  加载最新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">load</span><span class="params">(ArticleHomeDto dto, Short type)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 检验参数</span></span><br><span class="line">        <span class="comment">// 分页条数的校验</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">size</span> <span class="operator">=</span> dto.getSize();</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="literal">null</span> || size == <span class="number">0</span>) &#123;</span><br><span class="line">            size = <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页值不超过50</span></span><br><span class="line">        size = Math.min(size, MAX_PAGE_SIZE);</span><br><span class="line">        </span><br><span class="line">        dto.setsize(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验参数  --&gt;  type</span></span><br><span class="line">        <span class="keyword">if</span> (!type.equals(ArticleConstants.LOADTYPE_LOAD_MORE) &amp;&amp; !type.equals(ArticleConstants.LOADTYPE_LOAD_NEW)) &#123;</span><br><span class="line">            type = ArticleConstants.LOADTYPE_LOAD_MORE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 频道参数的校验</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(dto.getTag())) &#123;</span><br><span class="line">            dto.setTag(ArticleConstants.DEFAULT_TAG);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 时间校验</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getMaxBehotTime() == <span class="literal">null</span>) &#123;</span><br><span class="line">            dto.setMaxBehotTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dto.getMinBehotTime() == <span class="literal">null</span>) &#123;</span><br><span class="line">            dto.setMinBehotTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 查询</span></span><br><span class="line">        List&lt;ApArticle&gt; articleList = apArticleMapper.loadArticleList(dto, type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 返回</span></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(articleList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>编写控制器代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleHomeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApArticleService apArticleService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载首页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/load&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">load</span><span class="params">(<span class="meta">@RequestBody</span> ArticleHomeDto dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> apArticleService.load(dto, ArticleConstants.LOADTYPE_LOAD_MORE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载更多</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/loadmore&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">loadmore</span><span class="params">(<span class="meta">@RequestBody</span> ArticleHomeDto dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> apArticleService.load(dto, ArticleConstants.LOADTYPE_LOAD_MORE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载最新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/loadnew&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">loadnew</span><span class="params">(<span class="meta">@RequestBody</span> ArticleHomeDto dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> apArticleService.load(dto, ArticleConstants.LOADTYPE_LOAD_NEW);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还需要配置这个微服务的网关路由，在 nacos 中进行配置 leadnews-app-gateway</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">DELETE</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">PUT</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">OPTION</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># 用户微服务</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://leadnews-user</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=</span> <span class="number">1</span></span><br><span class="line">        <span class="comment"># 文章微服务</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">article</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://leadnews-article</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/article/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="app端-文章详情"><a class="headerlink" href="#app端-文章详情"></a>app端 文章详情</h2><hr><p>实现方案一：用户某一条文章，根据文章的id去查询文章内容表，返回渲染页面</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701163251903.png" alt="方案一" loading="lazy"></p><p>实现方案二：静态模板展示</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701163546679.png" alt="方案二" loading="lazy"></p><hr><h3 id="Freemarker"><a class="headerlink" href="#Freemarker"></a>Freemarker</h3><p>Freemarker 是一款 <strong>模板引擎技术</strong> ： 即一种基于模板和要改变的数据， 并用来生成输出文本（HTML网页，电子邮件，配置文件，源代码等）的通用工具。 它不是面向最终用户的，而<strong>是一个Java类库</strong>，是一款程序员可以嵌入他们所开发产品的组件。</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701164013513.png" alt="Freemarker" loading="lazy"></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701164135750.png" alt="模板引擎对比" loading="lazy"></p><p><strong>注意</strong>：freemarker 模板文件通常都是以 <code>ftl</code> 作为扩展名,也可以为 html 、xml 、jsp 等</p><p><strong>测试案例</strong>：</p><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- apache 对 java io 的封装工具库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置 application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8881</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">freemarker-demo</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">freemarker:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span>  <span class="comment">#关闭模板缓存，方便测试</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">template_update_delay:</span> <span class="number">0</span> <span class="comment">#检查模板更新延迟时间，设置为0表示立即检查，如果时间大于0会有缓存不方便进行模板测试</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.ftl</span>               <span class="comment">#指定Freemarker模板文件的后缀名</span></span><br></pre></td></tr></table></figure></li><li><p>在resources下创建templates，此目录为 <strong>freemarker的默认模板存放目录</strong></p></li><li><p>在templates下创建模板文件 01-basic.ftl ，模板中的插值表达式最终会被freemarker替换成具体的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--模板文件 01-basic.ftl--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>普通文本 String 展示：<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Hello $&#123;name&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>对象Student中的数据展示：<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">姓名：$&#123;stu.name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">年龄：$&#123;stu.age&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个 Student 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">//生日</span></span><br><span class="line">    <span class="keyword">private</span> Float money;<span class="comment">//钱包</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Controller类，通过Model类来传参，最后返回模板文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/basic&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model model)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// name</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;freemarker&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// stu</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setName(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">        student.setAge(<span class="number">18</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;stu&quot;</span>,student);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;01-basic&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreemarkerDemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(FreemarkerDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试，访问 <a href="http://localhost:8881/basic">http://localhost:8881/basic</a></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701171447205.png" alt="测试结果" loading="lazy"></p></li></ul><hr><h4 id="Freemarker-指令语法"><a class="headerlink" href="#Freemarker-指令语法"></a>Freemarker 指令语法</h4><ul><li><p>注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#-- ... --&gt;</span><br></pre></td></tr></table></figure></li><li><p>插值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p>FTL指令：和HTML标记类似，名字前加#予以区分，Freemarker会解析标签中的表达式或逻辑</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;# &gt; FTL指令 &lt;/#&gt;</span><br></pre></td></tr></table></figure></li><li><p>文本：仅文本信息，这些不是freemarker的注释、插值、FTL指令的内容会被freemarker忽略解析，<strong>直接输出内容</strong></p></li></ul><p><strong>集合指令 - List</strong>：用来遍历 list</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#list&gt;&lt;/#list&gt;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;#list stus as stu&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu_index+1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.money&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">&lt;/#list&gt;</span><br></pre></td></tr></table></figure><p><strong>集合指令 - Map</strong>：用来遍历 map</p><ol><li><p>获取 map 中的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map[&#x27;keyname&#x27;].property</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.keyname.property</span><br></pre></td></tr></table></figure></li><li><p>遍历 map</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#list userMap?keys as key&gt;</span><br><span class="line">    key:$&#123;key&#125; -- value:$&#123;userMap[&quot;$&#123;key&#125;&quot;]&#125;</span><br><span class="line">&lt;/#list&gt;</span><br></pre></td></tr></table></figure></li></ol><p>eg：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span>方式一：通过map[&#x27;keyname&#x27;].property<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">输出stu1的学生信息：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">姓名：$&#123;stuMap[&#x27;stu1&#x27;].name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">年龄：$&#123;stuMap[&#x27;stu1&#x27;].age&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span>方式二：通过map.keyname.property<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">输出stu2的学生信息：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">姓名：$&#123;stuMap.stu2.name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">年龄：$&#123;stuMap.stu2.age&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>if指令</strong>：if 指令即判断指令，是常用的FTL指令，freemarker在解析时遇到if会进行判断，条件为真则输出if中间的内容，否则跳过内容不再输出。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#if &gt;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#if expression&gt;</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">&lt;/#if&gt;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在freemarker中，判断是否相等，= 与 == 是一样的</p><p>eg：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>钱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &lt;#list stus as stu &gt;</span><br><span class="line">        &lt;#if stu.name=&#x27;小红&#x27;&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu_index&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.money&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &lt;#else &gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu_index&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.money&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &lt;/#if&gt;</span><br><span class="line">    &lt;/#list&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运算符</strong>：</p><ol><li><p>算数运算符：FreeMarker表达式中<strong>完全支持算术运算</strong></p><ul><li>加法： <code>+</code></li><li>减法： <code>-</code></li><li>乘法： <code>*</code></li><li>除法： <code>/</code></li><li>求模 (求余)： <code>%</code></li></ul></li><li><p>比较运算符</p><ul><li><strong><code>=</code><strong>或者</strong><code>==</code></strong>:判断两个值是否相等.</li><li><strong><code>!=</code></strong>:判断两个值是否不等.</li><li><strong><code>&gt;</code><strong>或者</strong><code>gt</code></strong>:判断左边值是否大于右边值</li><li><strong><code>&gt;=</code><strong>或者</strong><code>gte</code></strong>:判断左边值是否大于等于右边值</li><li><strong><code>&lt;</code><strong>或者</strong><code>lt</code></strong>:判断左边值是否小于右边值</li><li><strong><code>&lt;=</code><strong>或者</strong><code>lte</code></strong>:判断左边值是否小于等于右边值</li></ul></li><li><p><strong>比较运算符注意事项</strong>：</p><ul><li>**<code>=</code><strong>和</strong><code>!=</code>**可以用于字符串、数值和日期来比较是否相等</li><li>**<code>=</code><strong>和</strong><code>!=</code>**两边必须是相同类型的值,否则会产生错误</li><li>字符串 <strong><code>&quot;x&quot;</code></strong> 、<strong><code>&quot;x &quot;</code></strong> 、**<code>&quot;X&quot;</code>**比较是不等的.因为FreeMarker是精确比较</li><li>其它的运行符可以作用于数字和日期,但不能作用于字符串</li><li>使用**<code>gt</code><strong>等字母运算符代替</strong><code>&gt;</code><strong>会有更好的效果,因为 FreeMarker会把</strong><code>&gt;</code>**解释成FTL标签的结束字符</li><li>可以使用括号来避免这种情况,如:<strong><code>&lt;#if (x&gt;y)&gt;</code></strong></li></ul></li><li><p>逻辑运算符</p><ul><li>逻辑与：&amp;&amp;</li><li>逻辑或：||</li><li>逻辑非：!</li></ul></li><li><p>空值处理</p><ul><li><p>判断某变量是否存在使用 <code>??</code>，用法为：<code>variable??</code>，如果该变量存在，返回true，否则返回false</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;#-- 为防止stus为空报错可以加上判断 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;#if stus??&gt;</span><br><span class="line">&lt;#list stus as stu&gt;</span><br><span class="line">    ......</span><br><span class="line">&lt;/#list&gt;</span><br><span class="line">&lt;/#if&gt;</span><br></pre></td></tr></table></figure></li><li><p>缺失变量默认值使用 <code>!</code></p><ol><li><p>使用 <code>!</code> 要以指定一个默认值，当变量为空时显示默认值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;name!&#125;</span><br><span class="line"></span><br><span class="line">&lt;#-- 表示如果name为空显示空字符串 --&gt;</span><br></pre></td></tr></table></figure></li><li><p>如果是嵌套对象则建议使用 <code>()</code> 括起来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;(stu.bestFriend.name)!&#125;</span><br><span class="line"></span><br><span class="line">&lt;#-- 如果stu或bestFriend或name为空默认显示空字符串 --&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ol><p><strong>内建函数</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量 + ? + 函数名称</span><br></pre></td></tr></table></figure><ol><li><p>和到某个集合的大小</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;集合名?size&#125;</span><br></pre></td></tr></table></figure></li><li><p>日期格式化</p><blockquote><p>显示年月日: <strong><code>$&#123;today?date&#125;</code></strong><br>显示时分秒：<strong><code>$&#123;today?time&#125;</code></strong><br>显示日期+时间：<strong><code>$&#123;today?datetime&#125;</code></strong><br>自定义格式化：  <strong><code>$&#123;today?string(&quot;yyyy年MM月&quot;)&#125;</code></strong></p></blockquote></li><li><p>内建函数<code>c</code></p><p>使用c函数将数字型转成字符串输出：<code>$&#123;point?c&#125;</code></p></li><li><p>将 json 字符串转成对象 <code>eval</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;#-- assign标签，assign的作用是定义一个变量 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;#assign text=&quot;&#123;&#x27;bank&#x27;:&#x27;工商银行&#x27;,&#x27;account&#x27;:&#x27;10101920201920212&#x27;&#125;&quot; /&gt;</span><br><span class="line">&lt;#assign data=text?eval /&gt;</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="输出静态化文件"><a class="headerlink" href="#输出静态化文件"></a>输出静态化文件</h4><p>使用 freemarker 原生api 将 页面 生成 html 文件</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701180311562.png" alt="输出静态化文件" loading="lazy"></p><ol><li><p>修改 application.yml 文件，添加以下模板存放位置的配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8881</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">freemarker-demo</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">freemarker:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span>  <span class="comment">#关闭模板缓存，方便测试</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">template_update_delay:</span> <span class="number">0</span> <span class="comment">#检查模板更新延迟时间，设置为0表示立即检查，如果时间大于0会有缓存不方便进行模板测试</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.ftl</span>               <span class="comment">#指定Freemarker模板文件的后缀名</span></span><br><span class="line">    <span class="attr">template-loader-path:</span> <span class="string">classpath:/templates</span></span><br></pre></td></tr></table></figure></li><li><p>在 test 下创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = FreemarkerDemoApplication.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreemarkerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TemplateException &#123;</span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> configuration.getTemplate(<span class="string">&quot;01-basic.ftl&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 合成方法</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 两个参数</span></span><br><span class="line"><span class="comment">         * 第一个参数：模型数据</span></span><br><span class="line"><span class="comment">         * 第二个参数：输出流</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        template.process(getDate(), <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d:\\list.html&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map <span class="title function_">getDate</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小强对象模型数据</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu1.setName(<span class="string">&quot;小强&quot;</span>);</span><br><span class="line">        stu1.setAge(<span class="number">18</span>);</span><br><span class="line">        stu1.setMoney(<span class="number">1000.86f</span>);</span><br><span class="line">        stu1.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小红对象模型数据</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu2.setName(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">        stu2.setMoney(<span class="number">200.1f</span>);</span><br><span class="line">        stu2.setAge(<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将两个对象模型数据存放到List集合中</span></span><br><span class="line">        List&lt;Student&gt; stus = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        stus.add(stu1);</span><br><span class="line">        stus.add(stu2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向map中存放List集合数据</span></span><br><span class="line">        map.put(<span class="string">&quot;stus&quot;</span>, stus);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map数据</span></span><br><span class="line">        HashMap&lt;String, Student&gt; stuMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        stuMap.put(<span class="string">&quot;stu1&quot;</span>, stu1);</span><br><span class="line">        stuMap.put(<span class="string">&quot;stu2&quot;</span>, stu2);</span><br><span class="line">        <span class="comment">//向map中存放Map数据</span></span><br><span class="line">        map.put(<span class="string">&quot;stuMap&quot;</span>, stuMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回Map</span></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="MinIO"><a class="headerlink" href="#MinIO"></a>MinIO</h3><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701193650874.png" alt="对象存储方式的对比" loading="lazy"></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701193650874.png" alt="分布式文件系统对比" loading="lazy"></p><p>MinIO基于Apache License v2.0开源协议的对象存储服务，可以做为云存储的解决方案用来保存海量的图片，视频，文档。由于采用Golang实现，服务端可以工作在Windows,Linux, OS X和FreeBSD上。配置简单，基本是复制可执行程序，单行命令可以运行起来。</p><hr><h4 id="Docker安装流程"><a class="headerlink" href="#Docker安装流程"></a>Docker安装流程</h4><ol><li><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure></li><li><p>创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \-p 9000:9000 \-p 9001:9001 \--name minio --restart=always --privileged=true \-v /home/minio/data:/data \-e &quot;MINIO_ROOT_USER=minio&quot; \-e &quot;MINIO_ROOT_PASSWORD=minio123&quot; \minio/minio server /data --console-address &quot;:9001&quot;</span><br></pre></td></tr></table></figure></li><li><p>访问 minio 系统</p><p><a href="http://192.168.88.129:9001/login">http://192.168.88.129:9001/login</a></p></li></ol><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701203328546.png" alt="Minio登录界面" loading="lazy"></p><h4 id="Minio的使用"><a class="headerlink" href="#Minio的使用"></a>Minio的使用</h4><ul><li>bucket – 类比于文件系统的目录</li><li>Object – 类比文件系统的文件</li><li>Keys – 类比文件名</li></ul><h4 id="Minio上传文件进行静态访问"><a class="headerlink" href="#Minio上传文件进行静态访问"></a>Minio上传文件进行静态访问</h4><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建测试类，上传html文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list.html上传到minio中，并且可以在浏览器中访问</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\list.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1. 获取minio的链接信息，创建一个minio的客户端</span></span><br><span class="line">            <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> MinioClient.builder()</span><br><span class="line">                    .credentials(<span class="string">&quot;minio&quot;</span>, <span class="string">&quot;minio123&quot;</span>)</span><br><span class="line">                    .endpoint(<span class="string">&quot;http://192.168.88.129:9000&quot;</span>)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 上传</span></span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">                    .object(<span class="string">&quot;list.html&quot;</span>)  <span class="comment">// 文件名称</span></span><br><span class="line">                    .contentType(<span class="string">&quot;text/html&quot;</span>)  <span class="comment">// 文件类型</span></span><br><span class="line">                    .bucket(<span class="string">&quot;leadnews&quot;</span>)  <span class="comment">// 桶名词  与minio创建的名词一致</span></span><br><span class="line">                    .stream(fileInputStream, fileInputStream.available(), -<span class="number">1</span>)  <span class="comment">// 文件流</span></span><br><span class="line">                    .build();</span><br><span class="line">            minioClient.putObject(putObjectArgs);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 访问路径</span></span><br><span class="line">            System.out.println(<span class="string">&quot;http://192.168.88.129:9000/leadnews/list.html&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="封装MinIO为starter"><a class="headerlink" href="#封装MinIO为starter"></a>封装MinIO为starter</h4><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701212459467.png" alt="抽取文件服务为starter" loading="lazy"></p><p>在<code>heima.leadnews.starter</code>目录下封装了MinIO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(MinIOConfigProperties.class)</span></span><br><span class="line"><span class="meta">@Import(MinIOConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOFileStorageService</span> <span class="keyword">implements</span> <span class="title class_">FileStorageService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinIOConfigProperties minIOConfigProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">separator</span> <span class="operator">=</span> <span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dirPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename  yyyy/mm/dd/file.jpg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">builderFilePath</span><span class="params">(String dirPath,String filename)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">50</span>);</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(dirPath))&#123;</span><br><span class="line">            stringBuilder.append(dirPath).append(separator);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">todayStr</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        stringBuilder.append(todayStr).append(separator);</span><br><span class="line">        stringBuilder.append(filename);</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  上传图片文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix  文件前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename  文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  文件全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadImgFile</span><span class="params">(String prefix, String filename,InputStream inputStream)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> builderFilePath(prefix, filename);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">                    .object(filePath)</span><br><span class="line">                    .contentType(<span class="string">&quot;image/jpg&quot;</span>)</span><br><span class="line">                    .bucket(minIOConfigProperties.getBucket()).stream(inputStream,inputStream.available(),-<span class="number">1</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            minioClient.putObject(putObjectArgs);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">urlPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(minIOConfigProperties.getReadPath());</span><br><span class="line">            urlPath.append(separator+minIOConfigProperties.getBucket());</span><br><span class="line">            urlPath.append(separator);</span><br><span class="line">            urlPath.append(filePath);</span><br><span class="line">            <span class="keyword">return</span> urlPath.toString();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;minio put file error.&quot;</span>,ex);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;上传文件失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  上传html文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix  文件前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename   文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream  文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  文件全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadHtmlFile</span><span class="params">(String prefix, String filename,InputStream inputStream)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> builderFilePath(prefix, filename);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">                    .object(filePath)</span><br><span class="line">                    .contentType(<span class="string">&quot;text/html&quot;</span>)</span><br><span class="line">                    .bucket(minIOConfigProperties.getBucket()).stream(inputStream,inputStream.available(),-<span class="number">1</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            minioClient.putObject(putObjectArgs);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">urlPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(minIOConfigProperties.getReadPath());</span><br><span class="line">            urlPath.append(separator+minIOConfigProperties.getBucket());</span><br><span class="line">            urlPath.append(separator);</span><br><span class="line">            urlPath.append(filePath);</span><br><span class="line">            <span class="keyword">return</span> urlPath.toString();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;minio put file error.&quot;</span>,ex);</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;上传文件失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pathUrl  文件全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String pathUrl)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> pathUrl.replace(minIOConfigProperties.getEndpoint()+<span class="string">&quot;/&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> key.indexOf(separator);</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucket</span> <span class="operator">=</span> key.substring(<span class="number">0</span>,index);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> key.substring(index+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 删除Objects</span></span><br><span class="line">        <span class="type">RemoveObjectArgs</span> <span class="variable">removeObjectArgs</span> <span class="operator">=</span> RemoveObjectArgs.builder().bucket(bucket).object(filePath).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.removeObject(removeObjectArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;minio remove file error.  pathUrl:&#123;&#125;&quot;</span>,pathUrl);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pathUrl  文件全路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  文件流</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] downLoadFile(String pathUrl)  &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> pathUrl.replace(minIOConfigProperties.getEndpoint()+<span class="string">&quot;/&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> key.indexOf(separator);</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucket</span> <span class="operator">=</span> key.substring(<span class="number">0</span>,index);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> key.substring(index+<span class="number">1</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = minioClient.getObject(GetObjectArgs.builder().bucket(minIOConfigProperties.getBucket()).object(filePath).build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;minio down file error.  pathUrl:&#123;&#125;&quot;</span>,pathUrl);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">rc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!((rc = inputStream.read(buff, <span class="number">0</span>, <span class="number">100</span>)) &gt; <span class="number">0</span>)) <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            byteArrayOutputStream.write(buff, <span class="number">0</span>, rc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在项目中集成：</p><ul><li><p>导入文件管理依赖，在 pom.xml 文件下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>heima-file-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加minio配置文件，在 resources下面创建 application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">minio</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">minio123</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="string">leadnews</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">http://192.168.88.129:9000</span></span><br><span class="line">  <span class="attr">readPath:</span> <span class="string">http://192.168.88.129:9000</span></span><br></pre></td></tr></table></figure></li><li><p>在spring管理的bean中注入FileStorageService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = MinIOApplication.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list.html上传到minio中，并且可以在浏览器中访问</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileStorageService fileStorageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\list.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> fileStorageService.uploadHtmlFile(<span class="string">&quot;&quot;</span>, <span class="string">&quot;list.html&quot;</span>, fileInputStream);</span><br><span class="line"></span><br><span class="line">        System.out.println(path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="文章详情页的展示"><a class="headerlink" href="#文章详情页的展示"></a>文章详情页的展示</h3><p><strong>实现步骤</strong>：</p><ul><li><p>在article微服务中添加MinIO和freemarker的支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--集成了minio的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>heima-file-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在nacos的leadnews-article中在后面添加配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">minio</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">minio123</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="string">leadnews</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">http://192.168.88.129:9000</span></span><br><span class="line">  <span class="attr">readPath:</span> <span class="string">http://192.168.88.129:9000</span></span><br></pre></td></tr></table></figure></li><li><p>将模板文件（article.ftl）拷贝到article微服务下</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701215614064.png" alt="实现结果" loading="lazy"></p></li><li><p>将 index.js 和 index.css 两个文件手动上传到MinIO中（为了加快文件的响应速度，在js文件夹中上传了axios.min.js文件）</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240701223826309.png" alt="css与js依赖" loading="lazy"></p></li><li><p>新建 ApArticleContentMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApArticleContentMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;ApArticleContent&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 artile 微服务中新增 测试类（暂时手动生成详情静态页）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = ArticleApplication.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleFreemarkerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApArticleContentMapper apArticleContentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileStorageService fileStorageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApArticleService apArticleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createStaticUrlTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 已知文章id</span></span><br><span class="line">        <span class="comment">// 1. 获取文章内容</span></span><br><span class="line">        <span class="type">ApArticleContent</span> <span class="variable">apArticleContent</span> <span class="operator">=</span> apArticleContentMapper</span><br><span class="line">                .selectOne(Wrappers.&lt;ApArticleContent&gt;lambdaQuery()</span><br><span class="line">                        .eq(ApArticleContent::getArticleId, <span class="string">&quot;1383827787629252610L&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (apArticleContent != <span class="literal">null</span> &amp;&amp; StringUtils.isNotBlank(apArticleContent.getContent())) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 文章内容通过freemarker生成html文件</span></span><br><span class="line">            <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> configuration.getTemplate(<span class="string">&quot;article.ftl&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 数据模型</span></span><br><span class="line">            Map&lt;String, Object&gt; content = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            content.put(<span class="string">&quot;content&quot;</span>, JSONArray.parseArray(apArticleContent.getContent()));</span><br><span class="line"></span><br><span class="line">            <span class="type">StringWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 合成</span></span><br><span class="line">            template.process(content, out);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 把html文件上传到minio中</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(out.toString().getBytes());</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> fileStorageService.uploadHtmlFile(<span class="string">&quot;&quot;</span>, apArticleContent.getArticleId() + <span class="string">&quot;.html&quot;</span>, in);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 修改ap_article表，保存static_url字段</span></span><br><span class="line">            apArticleService.update(Wrappers.&lt;ApArticle&gt;lambdaUpdate().eq(ApArticle::getId, apArticleContent.getArticleId())</span><br><span class="line">                    .set(ApArticle::getStaticUrl, path));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="自媒体-文章发布"><a class="headerlink" href="#自媒体-文章发布"></a>自媒体 文章发布</h2><hr><h3 id="自媒体后台搭建"><a class="headerlink" href="#自媒体后台搭建"></a>自媒体后台搭建</h3><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702140944430.png" alt="后台搭建" loading="lazy"></p><p><strong>自媒体后台搭建流程</strong>：</p><ol><li>基础环境 和 数据准备<ul><li>sql 脚本</li><li>拷贝对应的实体类到<code>heima-leadnews-model</code>模块下的<code>com.heima.model</code></li></ul></li><li>在<code>heima-leadnews-service</code>下指定初始子模块</li><li>添加对应的 nacos 配置</li><li>在<code>heima-leadnews-gateway</code>工程下指定初始子模块</li><li>添加对应的 nacos 配置</li><li>启动 gateway 与service 的SpringApplication的启动类，等待前端搭建完联调</li></ol><hr><h3 id="自媒体前端搭建"><a class="headerlink" href="#自媒体前端搭建"></a>自媒体前端搭建</h3><hr><p>通过nginx的虚拟主机功能，使用同一个nginx访问多个项目</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702144006196.png" alt="自媒体前端搭建" loading="lazy"></p><p><strong>自媒体前端搭建流程</strong>：</p><ol><li>在 nginx 中 leadnews.conf 目录中新增 heima-leadnews-wemedia.conf 文件</li><li>网关地址修改（localhost:51602）</li><li>前端项目目录修改（wemedia-web解压的目录）</li><li>访问端口修改(8802)</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">upstream</span>  <span class="string">heima-wemedia-gateway&#123;</span></span><br><span class="line">    <span class="string">server</span> <span class="string">localhost:51602;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line"><span class="string">listen</span> <span class="number">8802</span><span class="string">;</span></span><br><span class="line"><span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line"><span class="string">root</span> <span class="string">D:/BaiduNetdiskDownload/todaynews/wemedia-web/;</span></span><br><span class="line"><span class="string">index</span> <span class="string">index.html;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">location</span> <span class="string">~/wemedia/MEDIA/(.*)</span> &#123;</span><br><span class="line"><span class="string">proxy_pass</span> <span class="string">http://heima-wemedia-gateway/$1;</span></span><br><span class="line"><span class="string">proxy_set_header</span> <span class="string">HOST</span> <span class="string">$host;</span>  <span class="comment"># 不改变源请求头的值</span></span><br><span class="line"><span class="string">proxy_pass_request_body</span> <span class="string">on;</span>  <span class="comment">#开启获取请求体</span></span><br><span class="line"><span class="string">proxy_pass_request_headers</span> <span class="string">on;</span>  <span class="comment">#开启获取请求头</span></span><br><span class="line"><span class="string">proxy_set_header</span> <span class="string">X-Real-IP</span> <span class="string">$remote_addr;</span>   <span class="comment"># 记录真实发出请求的客户端IP</span></span><br><span class="line"><span class="string">proxy_set_header</span> <span class="string">X-Forwarded-For</span> <span class="string">$proxy_add_x_forwarded_for;</span>  <span class="comment">#记录代理信息</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>启动nginx，访问 <a href="http://localhost:8802">http://localhost:8802</a></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702144929712.png" alt="前端展示" loading="lazy"></p></li></ol><hr><h3 id="自媒体素材管理"><a class="headerlink" href="#自媒体素材管理"></a>自媒体素材管理</h3><hr><ul><li><p>需求分析</p><ul><li>图片上传的页面，首先是展示素材信息，可以点击图片上传，弹窗后可以上传图片</li></ul></li><li><p>表结构分析</p><ul><li><p>wm_material 媒体图文素材信息表</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705122533218.png" alt="wm_material" loading="lazy"></p></li><li></li></ul></li><li><p>创建对应的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 自媒体图文素材信息表</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> itheima</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;wm_material&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmMaterial</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自媒体用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;user_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;url&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 素材类型</span></span><br><span class="line"><span class="comment">            0 图片</span></span><br><span class="line"><span class="comment">            1 视频</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;type&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Short type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否收藏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;is_collection&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Short isCollection;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;created_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现流程</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702152300461.png" alt="实现思路" loading="lazy"></p><ol><li><p>token解析为用户存入header，在<code>com.heima.wemedia.gateway.filter.AuthorizeFilter.java</code>文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">Ordered</span>, GlobalFilter &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取request和response对象</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.判断是否是登录</span></span><br><span class="line">        <span class="keyword">if</span> (request.getURI().getPath().contains(<span class="string">&quot;/login&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeaders().getFirst(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.判断token是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> response.setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.判断token是否有效</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claimsBody</span> <span class="operator">=</span> AppJwtUtil.getClaimsBody(token);</span><br><span class="line">            <span class="comment">//是否是过期</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> AppJwtUtil.verifyToken(claimsBody);</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="number">1</span> || result == <span class="number">2</span>) &#123;</span><br><span class="line">                response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">                <span class="keyword">return</span> response.setComplete();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取用户信息</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">userId</span> <span class="operator">=</span> claimsBody.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 存入到header中</span></span><br><span class="line">            request.mutate().headers(httpHeaders -&gt; &#123;</span><br><span class="line">                httpHeaders.add(<span class="string">&quot;userId&quot;</span>, userId + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;).build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重置请求</span></span><br><span class="line">            exchange.mutate().request(request);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优先级设置  值越小  优先级越高</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建拦截器，从header中获取用户存入当前线程</p><ul><li><p>先在 <code>com.heima.utils.thread.WmThreadLocalUtil.java</code>下创建一个可以创建线程，获取线程以及清楚线程的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmThreadLocalUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ThreadLocal&lt;WmUser&gt; WM_USER_THREAD_LOCAL = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存入线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(WmUser wmUser)</span> &#123;</span><br><span class="line">        WM_USER_THREAD_LOCAL.set(wmUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从线程中获取</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WmUser <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> WM_USER_THREAD_LOCAL.get();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        WM_USER_THREAD_LOCAL.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>com.heima.wemedia.interceptor.WmTokenInterceptor.java</code>文件下定义拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmTokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到header中的用户信息，并且存入到当前线程中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;userId&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (userId != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 存入到当前线程中</span></span><br><span class="line">            <span class="type">WmUser</span> <span class="variable">wmUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WmUser</span>();</span><br><span class="line">            wmUser.setId(Integer.valueOf(userId));</span><br><span class="line">            WmThreadLocalUtil.setUser(wmUser);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理线程中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        WmThreadLocalUtil.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>com.heima.wemedia.config.WebMvcConfig.java</code>文件下配置拦截器生效，拦截所有的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">WmTokenInterceptor</span>()).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>上传图片</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702154816911.png" alt="其中MutlipartFile是SpringMVC默认的文件接收类型" loading="lazy"></p><ul><li><p>在<code>com.heima.wemedia.controller.v1.WmMaterialController.java</code>文件下定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/material&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmMaterialController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload_picture&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">uploadPicture</span><span class="params">(MultipartFile multipartFile)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>com.heima.wemedia.mapper.WmMaterialMapper.java</code>中创建对应的mapper文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WmMaterialMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;WmMaterial&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>com.heima.wemedia.service.WmMaterialService.java</code>中创建业务层的接口类，并定义对应要实现的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WmMaterialService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;WmMaterial&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> multipartFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">uploadPicture</span><span class="params">(MultipartFile multipartFile)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>com.heima.wemedia.service.impl.WmMaterialServiceImpl.java</code>中完成对应业务成的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmMaterialServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;WmMaterialMapper, WmMaterial&gt; <span class="keyword">implements</span> <span class="title class_">WmMaterialService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileStorageService fileStorageService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> multipartFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">uploadPicture</span><span class="params">(MultipartFile multipartFile)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 检查参数</span></span><br><span class="line">        <span class="keyword">if</span> (multipartFile == <span class="literal">null</span> || multipartFile.getSize() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 上传图片到MinIO中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保证生成的图片不重复，可以用uuid</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比如 originalFilename 获取的名字是 aa.jpg</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> multipartFile.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 截取 . 的后半部分，比如：.jpg</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">postfix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileId = fileStorageService</span><br><span class="line">                    .uploadImgFile(<span class="string">&quot;&quot;</span>, fileName + postfix, multipartFile.getInputStream());</span><br><span class="line">            log.info(<span class="string">&quot;上传图片到MinIO中，fileId:&#123;&#125;&quot;</span>, fileId);  <span class="comment">// 打印上传成功的日志</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">&quot;WmMaterialServiceImpl-上传图片失败&quot;</span>);  <span class="comment">// 打印上传失败的日志</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 把图片保存到数据库中</span></span><br><span class="line">        <span class="type">WmMaterial</span> <span class="variable">wmMaterial</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WmMaterial</span>();</span><br><span class="line">        wmMaterial.setUserId(WmThreadLocalUtil.getUser().getId());</span><br><span class="line">        wmMaterial.setUrl(fileId);</span><br><span class="line">        wmMaterial.setIsCollection((<span class="type">short</span>) <span class="number">0</span>); <span class="comment">// 是否收藏  0  不收藏  1  收藏</span></span><br><span class="line">        wmMaterial.setType((<span class="type">short</span>) <span class="number">0</span>);  <span class="comment">// 0  图片  1  视频</span></span><br><span class="line">        wmMaterial.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        save(wmMaterial);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 返回结果</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(wmMaterial);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上面的实现类用到了MinIO，所以要分别在业务层的pom.xml中填入对应的依赖以及在nacos中添加对应的配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>heima-file-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">minio</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">minio123</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="string">leadnews</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">http://192.168.88.129:9000</span></span><br><span class="line">  <span class="attr">readPath:</span> <span class="string">http://192.168.88.129:9000</span></span><br></pre></td></tr></table></figure></li><li><p>完成<code>com.heima.wemedia.controller.v1.WmMaterialController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/material&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmMaterialController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WmMaterialService wmMaterialService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload_picture&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">uploadPicture</span><span class="params">(MultipartFile multipartFile)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wmMaterialService.uploadPicture(multipartFile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>图片列表</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702162313777.png" alt="图片列表接口" loading="lazy"></p><ul><li><p>在<code>com.heima.wemedia.controller.v1.WmMaterialController.java</code>文件下定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">findList</span><span class="params">(<span class="meta">@RequestBody</span> WmMaterialDto dto)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>com.heima.model.wemedia.dtos.WmMaterialDto</code>下创建这个接口需要的DTO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmMaterialDto</span> <span class="keyword">extends</span> <span class="title class_">PageRequestDto</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1 收藏</span></span><br><span class="line"><span class="comment">     * 0 未收藏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Short isCollection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>com.heima.wemedia.service.WmMaterialService.java</code>文件下创建业务层的接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 素材列表查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">findList</span><span class="params">(WmMaterialDto dto)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在<code>com.heima.wemedia.service.impl.WmMaterialServiceImpl.java</code>文件下来实现业务成对应的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 素材列表查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">findList</span><span class="params">(WmMaterialDto dto)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 检查参数</span></span><br><span class="line">    dto.checkParam();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    public void checkParam() &#123;</span></span><br><span class="line"><span class="comment">    if (this.page == null || this.page &lt; 0) &#123;</span></span><br><span class="line"><span class="comment">        setPage(1);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if (this.size == null || this.size &lt; 0 || this.size &gt; 100) &#123;</span></span><br><span class="line"><span class="comment">        setSize(10);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 分页查询</span></span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(dto.getPage(), dto.getSize());</span><br><span class="line">    LambdaQueryWrapper&lt;WmMaterial&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 是否收藏</span></span><br><span class="line">    <span class="keyword">if</span> (dto.getIsCollection() != <span class="literal">null</span> &amp;&amp; dto.getIsCollection() == <span class="number">1</span>) &#123;</span><br><span class="line">        lambdaQueryWrapper.eq(WmMaterial::getIsCollection, dto.getIsCollection());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 按照用户查询</span></span><br><span class="line">    lambdaQueryWrapper.eq(WmMaterial::getUserId,WmThreadLocalUtil.getUser().getId());</span><br><span class="line">    <span class="comment">// 按照时间倒叙查询</span></span><br><span class="line">    lambdaQueryWrapper.orderByDesc(WmMaterial::getCreatedTime);</span><br><span class="line">    page(page, lambdaQueryWrapper);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 结果返回</span></span><br><span class="line">    <span class="type">ResponseResult</span> <span class="variable">responseResult</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageResponseResult</span>(dto.getPage(), dto.getSize(), (<span class="type">int</span>)page.getTotal());</span><br><span class="line">    responseResult.setData(page.getRecords());</span><br><span class="line">    <span class="keyword">return</span> responseResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>把<code>com.heima.wemedia.controller.v1.WmMaterialController.java</code>文件补全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">findList</span><span class="params">(<span class="meta">@RequestBody</span> WmMaterialDto dto)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> wmMaterialService.findList(dto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在启动类加上mybatis-plus的分页插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.heima.wemedia.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WemediaApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(WemediaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// Mybatis-Plus的分页插件</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><hr><h3 id="自媒体文章管理"><a class="headerlink" href="#自媒体文章管理"></a>自媒体文章管理</h3><hr><h4 id="频道列表查询"><a class="headerlink" href="#频道列表查询"></a>频道列表查询</h4><hr><ol><li><p>表结构分析</p><ul><li><p>wm_channel 频道信息表</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705122630097.png" alt="wm_channel" loading="lazy"></p></li></ul></li><li><p>创建对应数据库表的实体类 wm_channel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;wm_channel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmChannel</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 频道名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 频道描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;description&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否默认频道</span></span><br><span class="line"><span class="comment">     * 1：默认     true</span></span><br><span class="line"><span class="comment">     * 0：非默认   false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;is_default&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isDefault;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否启用</span></span><br><span class="line"><span class="comment">     * 1：启用   true</span></span><br><span class="line"><span class="comment">     * 0：禁用   false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;status&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;ord&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer ord;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;created_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>频道列表查询对应的接口</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702165406291.png" alt="频道列表查询接口" loading="lazy"></p><ul><li><p>接口定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/channel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmchannelController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/channels&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WmChannelMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;WmChannel&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WmChannelService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;WmChannel&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有频道</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmChannelServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;WmChannelMapper, WmChannel&gt; <span class="keyword">implements</span> <span class="title class_">WmChannelService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有频道</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(list());</span><br><span class="line">        <span class="comment">// list()是mybatis-plus中的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>补全controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/channel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmChannelController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WmChannelService wmChannelService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/channels&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wmChannelService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h4 id="文章列表加载-2"><a class="headerlink" href="#文章列表加载-2"></a>文章列表加载</h4><hr><ol><li><p>表结构分析</p><ul><li><p>wm_news  自媒体文章表</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705122800531.png" alt="wm_news" loading="lazy"></p></li></ul></li><li><p>创建对应数据库表的实体类 wm_news</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;wm_news&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmNews</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自媒体用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;user_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;title&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图文内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;content&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章布局</span></span><br><span class="line"><span class="comment">            0 无图文章</span></span><br><span class="line"><span class="comment">            1 单图文章</span></span><br><span class="line"><span class="comment">            3 多图文章</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;type&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Short type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图文频道ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;channel_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer channelId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(&quot;labels&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String labels;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;created_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;submited_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date submitedTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前状态</span></span><br><span class="line"><span class="comment">            0 草稿</span></span><br><span class="line"><span class="comment">            1 提交（待审核）</span></span><br><span class="line"><span class="comment">            2 审核失败</span></span><br><span class="line"><span class="comment">            3 人工审核</span></span><br><span class="line"><span class="comment">            4 人工审核通过</span></span><br><span class="line"><span class="comment">            8 审核通过（待发布）</span></span><br><span class="line"><span class="comment">            9 已发布</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;status&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Short status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定时发布时间，不定时则为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;publish_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date publishTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拒绝理由</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;reason&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String reason;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布库文章ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;article_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long articleId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * //图片用逗号分隔</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;images&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String images;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(&quot;enable&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Short enable;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//状态枚举类</span></span><br><span class="line">    <span class="meta">@Alias(&quot;WmNewsStatus&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Status</span>&#123;</span><br><span class="line">        NORMAL((<span class="type">short</span>)<span class="number">0</span>),SUBMIT((<span class="type">short</span>)<span class="number">1</span>),FAIL((<span class="type">short</span>)<span class="number">2</span>),ADMIN_AUTH((<span class="type">short</span>)<span class="number">3</span>),ADMIN_SUCCESS((<span class="type">short</span>)<span class="number">4</span>),SUCCESS((<span class="type">short</span>)<span class="number">8</span>),PUBLISHED((<span class="type">short</span>)<span class="number">9</span>);</span><br><span class="line">        <span class="type">short</span> code;</span><br><span class="line">        Status(<span class="type">short</span> code)&#123;</span><br><span class="line">            <span class="built_in">this</span>.code = code;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">short</span> <span class="title function_">getCode</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口定义</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702174305119.png" alt="自媒体文件列表接口" loading="lazy"></p><ul><li><p>接口定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/news&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmNewsController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数查询一般都用 @PostMapping</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">findList</span><span class="params">(<span class="meta">@RequestBody</span> WmNewsPageReqDto dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义 WmNewsPageReqDto 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmNewsPageReqDto</span> <span class="keyword">extends</span> <span class="title class_">PageRequestDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Short status;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date beginPubDate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date endPubDate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所属频道ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer channelId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String keyword;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WmNewsMapper</span>  <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;WmNews&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WmNewsService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;WmNews&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条件查询文章列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">findList</span><span class="params">(WmNewsPageReqDto dto)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmNewsServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;WmNewsMapper, WmNews&gt; <span class="keyword">implements</span> <span class="title class_">WmNewsService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条件查询文章列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">findList</span><span class="params">(WmNewsPageReqDto dto)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 检查参数</span></span><br><span class="line">        dto.checkParam();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 分页的条件查询</span></span><br><span class="line">        <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(dto.getPage(), dto.getSize());</span><br><span class="line">        LambdaQueryWrapper&lt;WmNews&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 状态精确查询</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getStatus() != <span class="literal">null</span>) &#123;</span><br><span class="line">            lambdaQueryWrapper.eq(WmNews::getStatus, dto.getStatus());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 频道精确查询</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getChannelId() != <span class="literal">null</span>) &#123;</span><br><span class="line">            lambdaQueryWrapper.eq(WmNews::getChannelId, dto.getChannelId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 时间范围查询</span></span><br><span class="line">        <span class="keyword">if</span> (dto.getBeginPubDate() != <span class="literal">null</span> &amp;&amp; dto.getEndPubDate() != <span class="literal">null</span>) &#123;</span><br><span class="line">            lambdaQueryWrapper.between(WmNews::getSubmitedTime, dto.getBeginPubDate(), dto.getEndPubDate());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关键字的模糊查询</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(dto.getKeyword())) &#123;</span><br><span class="line">            lambdaQueryWrapper.like(WmNews::getTitle, dto.getKeyword());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询当前登录人的文章</span></span><br><span class="line">        lambdaQueryWrapper.eq(WmNews::getUserId, WmThreadLocalUtil.getUser().getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照发布时间倒叙查询</span></span><br><span class="line">        lambdaQueryWrapper.orderByDesc(WmNews::getPublishTime);</span><br><span class="line"></span><br><span class="line">        page(page, lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 结果返回</span></span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">responseResult</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageResponseResult</span>(dto.getPage(), dto.getSize(), (<span class="type">int</span>) page.getTotal());</span><br><span class="line">        responseResult.setData(page.getRecords());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> responseResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>补全controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/news&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmNewsController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WmNewsService wmNewsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数查询一般都用 @PostMapping</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">findList</span><span class="params">(<span class="meta">@RequestBody</span> WmNewsPageReqDto dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wmNewsService.findList(dto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h4 id="文章发布、修改、保存草稿"><a class="headerlink" href="#文章发布、修改、保存草稿"></a>文章发布、修改、保存草稿</h4><hr><ol><li><p>需求分析</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702181607864.png" alt="需求分析" loading="lazy"></p></li><li><p>表结构的分析</p><ul><li><p>wm_material 素材表</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705122850337.png" alt="wm_material" loading="lazy"></p></li><li><p>wm_news_material 文章素材关系表</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705122920247.png" alt="wm_news_material" loading="lazy"></p></li><li><p>保存文章，除了需要 wm_news 表以外，还需要 wm_material 素材表、wm_news_material 文章素材关系表</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702182048888.png" alt="三张表之间的关系" loading="lazy"></p></li><li><p>文章素材关系表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;wm_news_material&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmNewsMaterial</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 素材ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;material_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer materialId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图文ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;news_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer newsId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用类型</span></span><br><span class="line"><span class="comment">            0 内容引用</span></span><br><span class="line"><span class="comment">            1 主图引用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;type&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Short type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;ord&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Short ord;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>实现流程</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702182517493.png" alt="实现思路" loading="lazy"></p></li><li><p>接口定义</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702182620234.png" alt="发布文章接口" loading="lazy"></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240702182829753.png" alt="WmNewsDto的Json字符串" loading="lazy"></p></li><li><p>WmNewsDto的DTO对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmNewsDto</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 频道id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer channelId;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String labels;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date publishTime;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章封面类型  0 无图 1 单图 3 多图 -1 自动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Short type;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date submitedTime; </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态 提交为1  草稿为0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Short status;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封面图片列表 多张图以逗号隔开</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; images;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">submitNews</span><span class="params">(<span class="meta">@RequestBody</span> WmNewsDto wmNewsDto)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新增 WmNewsMaterialMapper 类，文章与素材的关联关系需要批量保存，索引需要定义mapper文件和对应的映射文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WmNewsMaterialMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;WmNewsMaterial&gt; &#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 批量保存文章的方法</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> materialIds</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> newsId</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveRelations</span><span class="params">(<span class="meta">@Param(&quot;materialIds&quot;)</span> List&lt;Integer&gt; materialIds, <span class="meta">@Param(&quot;newsId&quot;)</span> Integer newsId, <span class="meta">@Param(&quot;type&quot;)</span> Short type)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>resources目录下的 WmNewsMaterialMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.heima.wemedia.mapper.WmNewsMaterialMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveRelations&quot;</span>&gt;</span></span><br><span class="line">        insert into wm_news_material (material_id,news_id,type,ord)</span><br><span class="line">        values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;materialIds&quot;</span> <span class="attr">index</span>=<span class="string">&quot;ord&quot;</span> <span class="attr">item</span>=<span class="string">&quot;mid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            (#&#123;mid&#125;,#&#123;newsId&#125;,#&#123;type&#125;,#&#123;ord&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>常量类准备</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WemediaConstants</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Short</span> <span class="variable">COLLECT_MATERIAL</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//收藏</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Short</span> <span class="variable">CANCEL_COLLECT_MATERIAL</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//取消收藏</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WM_NEWS_TYPE_IMAGE</span> <span class="operator">=</span> <span class="string">&quot;image&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Short</span> <span class="variable">WM_NEWS_NONE_IMAGE</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Short</span> <span class="variable">WM_NEWS_SINGLE_IMAGE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Short</span> <span class="variable">WM_NEWS_MANY_IMAGE</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Short</span> <span class="variable">WM_NEWS_TYPE_AUTO</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Short</span> <span class="variable">WM_CONTENT_REFERENCE</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Short</span> <span class="variable">WM_COVER_REFERENCE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 WmNewsService 中新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布修改文章、保存文章为草稿</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> wmNewsDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">submitNews</span><span class="params">(WmNewsDto wmNewsDto)</span>;</span><br></pre></td></tr></table></figure></li><li><p>对应的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布修改文章、保存文章为草稿</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> wmNewsDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">submitNews</span><span class="params">(WmNewsDto wmNewsDto)</span> &#123;</span><br><span class="line">    <span class="comment">// 0. 条件判断</span></span><br><span class="line">    <span class="keyword">if</span> (wmNewsDto == <span class="literal">null</span> || wmNewsDto.getContent() == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1. 保存或修改文章</span></span><br><span class="line">    <span class="type">WmNews</span> <span class="variable">wmNews</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WmNews</span>();</span><br><span class="line">    <span class="comment">// 属性拷贝，属性名称和类型相同时才会拷贝</span></span><br><span class="line">    BeanUtils.copyProperties(wmNewsDto, wmNews);</span><br><span class="line">    <span class="comment">// 封面图片 list ---&gt; string</span></span><br><span class="line">    <span class="keyword">if</span> (wmNewsDto.getImages() != <span class="literal">null</span> &amp;&amp; wmNewsDto.getImages().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// [wqqqdqd.jpg,oiqw.jpg] --&gt; wqqqdqd.jpg,oiqw.jpg</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">imageStr</span> <span class="operator">=</span> StringUtils.join(wmNewsDto.getImages(), <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        wmNews.setImages(imageStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果当前封面类型为自动 -1</span></span><br><span class="line">    <span class="keyword">if</span> (wmNewsDto.getType().equals(WemediaConstants.WM_NEWS_TYPE_AUTO)) &#123;</span><br><span class="line">        wmNews.setType(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    saveOrUpdateWmNews(wmNews);</span><br><span class="line">    <span class="comment">// 2. 判断是否为草稿，如果为草稿结束当前方法</span></span><br><span class="line">    <span class="keyword">if</span> (wmNewsDto.getStatus().equals(WmNews.Status.NORMAL.getCode())) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(AppHttpCodeEnum.SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 不是草稿，保存文章内容、图片与素材的关系</span></span><br><span class="line">    <span class="comment">// 获取文章内容中的图片信息</span></span><br><span class="line">    List&lt;String&gt; materials = extractUrlInfo(wmNewsDto.getContent());</span><br><span class="line">    saveRelativeInfoForContent(materials, wmNews.getId());</span><br><span class="line">    <span class="comment">// 4. 不是草稿，保存文章封面图片与素材的关系</span></span><br><span class="line">    <span class="comment">// 如果当前布局是自动，需要匹配封面图片</span></span><br><span class="line">    saveRelativeInfoForCover(wmNewsDto, wmNews, materials);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(AppHttpCodeEnum.SUCCESS);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第一个功能，如果当前封面类型为自动，则设置封面类型的数据</span></span><br><span class="line"><span class="comment"> * 1，如果内容图片大于等于1，小于3  单图  type 1</span></span><br><span class="line"><span class="comment"> * 2，如果内容图片大于等于3  多图  type 3</span></span><br><span class="line"><span class="comment"> * 3，如果内容没有图片，无图  type 0</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 第二个功能：保存封面图片与素材的关系</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> wmNewsDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> wmNews</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> materials</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveRelativeInfoForCover</span><span class="params">(WmNewsDto wmNewsDto, WmNews wmNews, List&lt;String&gt; materials)</span> &#123;</span><br><span class="line">    List&lt;String&gt; images = wmNewsDto.getImages();</span><br><span class="line">    <span class="comment">// 如果当前封面类型为自动，则设置封面类型的数据</span></span><br><span class="line">    <span class="keyword">if</span> (wmNewsDto.getType().equals(WemediaConstants.WM_NEWS_TYPE_AUTO)) &#123;</span><br><span class="line">        <span class="comment">// 多图</span></span><br><span class="line">        <span class="keyword">if</span> (materials.size() &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            wmNews.setType(WemediaConstants.WM_NEWS_MANY_IMAGE);</span><br><span class="line">            images = materials.stream().limit(<span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 单图</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (materials.size() &gt; <span class="number">1</span> &amp;&amp; materials.size() &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            wmNews.setType(WemediaConstants.WM_NEWS_SINGLE_IMAGE);</span><br><span class="line">            images = materials.stream().limit(<span class="number">1</span>).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 无图</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            wmNews.setType(WemediaConstants.WM_NEWS_NONE_IMAGE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 修改文章</span></span><br><span class="line">        <span class="keyword">if</span> (images != <span class="literal">null</span> &amp;&amp; images.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            wmNews.setImages(StringUtils.join(images, <span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        updateById(wmNews);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存封面图片与素材的关系</span></span><br><span class="line">    <span class="keyword">if</span> (images != <span class="literal">null</span> &amp;&amp; images.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        saveRelativeInfo(images, wmNews.getId(), WemediaConstants.WM_COVER_REFERENCE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理文章内容图片与素材的关系</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> materials</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newsId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveRelativeInfoForContent</span><span class="params">(List&lt;String&gt; materials, Integer newsId)</span> &#123;</span><br><span class="line">    <span class="comment">// WemediaConstants.WM_CONTENT_REFERENCE 为 0</span></span><br><span class="line">    saveRelativeInfo(materials, newsId, WemediaConstants.WM_CONTENT_REFERENCE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WmNewsMaterialMapper wmNewsMaterialMapper;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WmMaterialMapper wmMaterialMapper;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存文章图片与素材的关系到数据库中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> materials</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newsId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> wmContentReference</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveRelativeInfo</span><span class="params">(List&lt;String&gt; materials, Integer newsId, Short wmContentReference)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (materials != <span class="literal">null</span> &amp;&amp; !materials.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 通过图片的url查询素材的id</span></span><br><span class="line">        List&lt;WmMaterial&gt; dbMaterials = wmMaterialMapper</span><br><span class="line">                .selectList(Wrappers.&lt;WmMaterial&gt;lambdaQuery().in(WmMaterial::getUrl, materials));</span><br><span class="line">        <span class="comment">// 判断素材是否有效</span></span><br><span class="line">        <span class="keyword">if</span> (dbMaterials == <span class="literal">null</span> || dbMaterials.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 手动抛出异常</span></span><br><span class="line">            <span class="comment">// 第一个功能：能够提示调用者素材失效了</span></span><br><span class="line">            <span class="comment">// 第二个功能：进行数据的回滚</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(AppHttpCodeEnum.MATERIAL_REFERENCE_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (materials.size() != dbMaterials.size()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(AppHttpCodeEnum.MATERIAL_REFERENCE_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; idList = dbMaterials.stream().map(WmMaterial::getId).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 批量保存</span></span><br><span class="line">        wmNewsMaterialMapper.saveRelations(idList, newsId, wmContentReference);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提取文章内容中的图片信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; <span class="title function_">extractUrlInfo</span><span class="params">(String content)</span> &#123;</span><br><span class="line">    List&lt;String&gt; materials = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 将Json字符串转换成Map格式</span></span><br><span class="line">    List&lt;Map&gt; maps = JSON.parseArray(content, Map.class);</span><br><span class="line">    <span class="keyword">for</span> (Map map : maps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.get(<span class="string">&quot;type&quot;</span>).equals(<span class="string">&quot;image&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">imageUrl</span> <span class="operator">=</span> (String) map.get(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">            materials.add(imageUrl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> materials;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存或修改文章</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> wmNews</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveOrUpdateWmNews</span><span class="params">(WmNews wmNews)</span> &#123;</span><br><span class="line">    <span class="comment">// 补全属性</span></span><br><span class="line">    wmNews.setUserId(WmThreadLocalUtil.getUser().getId());</span><br><span class="line">    wmNews.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    wmNews.setSubmitedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    wmNews.setEnable((<span class="type">short</span>) <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (wmNews.getId() == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 保存</span></span><br><span class="line">        save(wmNews);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 修改</span></span><br><span class="line">        <span class="comment">// 删除文章图片与素材的关系</span></span><br><span class="line">        wmNewsMaterialMapper</span><br><span class="line">                .delete(Wrappers.&lt;WmNewsMaterial&gt;lambdaQuery()</span><br><span class="line">                        .eq(WmNewsMaterial::getNewsId, wmNews.getId()));</span><br><span class="line">        updateById(wmNews);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>补全controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">submitNews</span><span class="params">(<span class="meta">@RequestBody</span> WmNewsDto dto)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  wmNewsService.submitNews(dto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="自媒体-文章审核"><a class="headerlink" href="#自媒体-文章审核"></a>自媒体 文章审核</h2><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704172024595.png" alt="文章的审核" loading="lazy"></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704172642703.png" alt="自媒体文章审核流程" loading="lazy"></p><hr><h3 id="内容安全第三方接口"><a class="headerlink" href="#内容安全第三方接口"></a>内容安全第三方接口</h3><hr><p>内容安全是识别服务，支持对图片、视频、文本、语音等对象进行多样化场景检测，有效降低内容违规风险</p><p>按照性能和收费来看，本项目使用的就是阿里云的内容安全接口，使用到了图片和文本的审核</p><p>详见：<a href="https://help.aliyun.com/document_detail/2525356.html?spm=a2c4g.53424.0.0.69b07a7enQ7f2U">开发参考_内容安全(Content Moderation)-阿里云帮助中心 (aliyun.com)</a></p><hr><h3 id="项目集成阿里云内容安全接口"><a class="headerlink" href="#项目集成阿里云内容安全接口"></a>项目集成阿里云内容安全接口</h3><hr><h4 id="流程"><a class="headerlink" href="#流程"></a>流程</h4><ol><li><p>导入对应的依赖信息，参考接口 sdk 说明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在common模块下的pom文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-green<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>拷贝资料文件夹中的类到 common模块 下面，并添加到自动配置</p><ul><li>包括了 GreenImageScan 和 GreenTextScan 及对应的工具类</li></ul><p><a href="https://help.aliyun.com/document_detail/53424.html?spm=a2c4g.312335.0.0.136769c9jNhlST">如何使用JavaSDK接口检测图片是否包含风险内容_内容安全(Content Moderation)-阿里云帮助中心 (aliyun.com)</a></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704182453357.png" alt="java文件位置" loading="lazy"></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704182837727.png" alt="添加到自动配置中" loading="lazy"></p></li><li><p>在 bootstarp.yml 中添加阿里云的ak</p><ul><li><p>accessKeyId 和 secret（需自己申请）</p></li><li><p>在heima-leadnews-wemedia中的nacos配置中心添加以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aliyun:</span></span><br><span class="line"> <span class="attr">accessKeyId:</span> <span class="string">LTAI5tCWHCcfvqQzu8k2oKmX</span></span><br><span class="line"> <span class="attr">secret:</span> <span class="string">auoKUFsghimbfVQHpy7gtRyBkoR4vc</span></span><br><span class="line"><span class="comment">#aliyun.scenes=porn,terrorism,ad,qrcode,live,logo</span></span><br><span class="line"> <span class="attr">scenes:</span> <span class="string">terrorism</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>在自媒体微服务中测试类中注入审核文本和图片的bean进行测试</p></li></ol><hr><h3 id="app端-文章保存接口实现"><a class="headerlink" href="#app端-文章保存接口实现"></a>app端 文章保存接口实现</h3><hr><h4 id="分布式id"><a class="headerlink" href="#分布式id"></a>分布式id</h4><p>产生背景：随着业务的增长，文章表可能要占用很大的物理存储空间，为了解决该问题，后期使用数据库分片技术。将一个数据库进行拆分，通过数据库中间件连接。如果数据库中该表选用ID自增策略，则 <strong>可能产生重复的ID</strong> ，此时应该使用 <strong>分布式ID生成策略</strong> 来生成ID。</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704183820793.png" alt="分布式id图示" loading="lazy"></p><p>分布式id 的解决方案：</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704183921197.png" alt="分布式id - 技术选型" loading="lazy"></p><hr><h4 id="雪花算法"><a class="headerlink" href="#雪花算法"></a>雪花算法</h4><p>snowflake 是 Twitter开源 的 分布式ID生成算法，结果是一个 long型 的 ID</p><p>其 <strong>核心思想</strong> 是：使用 41bit 作为 毫秒数，10bit 作为 机器的ID（ 5个bit 是 数据中心 （可以理解为 机房的id）， 5个bit 的 机器ID （可以理解为 机器的id））， 12bit 作为毫秒内的 流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704184343417.png" alt="雪花算法" loading="lazy"></p><p>mybatis-plus 已经集成了雪花算法，完成以下两步即可在项目中集成雪花算法：</p><ol><li><p>在实体类中的id上加入如下配置，指定类型为 <strong>id_worker</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(value = &quot;id&quot;,type = IdType.ID_WORKER)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure></li><li><p>在 application.yml 文件中配置 数据中心id 和 机器id</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/*.xml</span></span><br><span class="line">  <span class="comment"># 设置别名包扫描路径，通过该属性可以给包中的类注册别名</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.heima.model.article.pojos</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">datacenter-id:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">workerId:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>也可以在对应的nacos中设置配置</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704184803019.png" alt="nacos中配置数据中心id 和 机器id" loading="lazy"></p></li></ol><hr><h4 id="思路分析"><a class="headerlink" href="#思路分析"></a>思路分析</h4><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704185119081.png" alt="保存app端文章思路分析" loading="lazy"></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704191448869.png" alt="3张表的结构" loading="lazy"></p><hr><h4 id="保存app端文章-feign-接口"><a class="headerlink" href="#保存app端文章-feign-接口"></a>保存app端文章 - feign 接口</h4><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704185448844.png" alt="接口说明" loading="lazy"></p><hr><h4 id="实现步骤"><a class="headerlink" href="#实现步骤"></a>实现步骤</h4><ol><li><p>在<code>heima-leadnews-feign-api</code>中定义接口导入 feign远程调用依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义 ArticleDto</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleDto</span> <span class="keyword">extends</span> <span class="title class_">ApArticle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义文章端的远程接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;leadnews-article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IArticleClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/api/v1/article/save&quot;)</span></span><br><span class="line">    <span class="comment">// @RequestBody：通常会使用这个注解来接收客户端发送的 JSON、XML 或其他格式的数据，并将其转换为 Java 对象</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">saveArticle</span><span class="params">(<span class="meta">@RequestBody</span> ArticleDto dto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>heima-leadnews-article</code> 实现feign接口，在路径下创建 feign 的软件包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleClient</span> <span class="keyword">implements</span> <span class="title class_">IArticleClient</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/api/v1/article/save&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">saveArticle</span><span class="params">(<span class="meta">@RequestBody</span> ArticleDto dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 ApArticleConfigMapper 类到文章微服务mapper包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApArticleConfigMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;ApArticleConfig&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在 ApArticleService 中新增保存方法进行实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存app端相关文章</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">saveArticle</span><span class="params">(ArticleDto dto)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存app端相关文章</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApArticleConfigMapper apArticleConfigMapper;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApArticleContentMapper apArticleContentMapper;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">saveArticle</span><span class="params">(ArticleDto dto)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 检查参数</span></span><br><span class="line">    <span class="keyword">if</span> (dto == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ApArticle</span> <span class="variable">apArticle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApArticle</span>();</span><br><span class="line">    BeanUtils.copyProperties(dto, apArticle);</span><br><span class="line">    <span class="comment">// 2. 判断是否存在id</span></span><br><span class="line">    <span class="keyword">if</span> (dto.getId() == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 2.1 不存在id，保存  文章  文章配置  文章内容</span></span><br><span class="line">        <span class="comment">// 保存文章</span></span><br><span class="line">        save(apArticle);</span><br><span class="line">        <span class="comment">// 保存配置</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里重写了有参构造方法</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * public ApArticleConfig(Long articleId) &#123;</span></span><br><span class="line"><span class="comment">         *     this.articleId = articleId;</span></span><br><span class="line"><span class="comment">         *     this.isDelete = false;</span></span><br><span class="line"><span class="comment">         *     this.isDown = false;</span></span><br><span class="line"><span class="comment">         *     this.isForward = true;</span></span><br><span class="line"><span class="comment">         *     this.isComment = true;</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ApArticleConfig</span> <span class="variable">apArticleConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApArticleConfig</span>(apArticle.getId());</span><br><span class="line">        apArticleConfigMapper.insert(apArticleConfig);</span><br><span class="line">        <span class="comment">// 保存文章内容</span></span><br><span class="line">        <span class="type">ApArticleContent</span> <span class="variable">apArticleContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApArticleContent</span>();</span><br><span class="line">        apArticleContent.setArticleId(apArticle.getId());</span><br><span class="line">        apArticleContent.setContent(dto.getContent());</span><br><span class="line">        apArticleContentMapper.insert(apArticleContent);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 2.2 存在id  修改  文章  文章内容</span></span><br><span class="line">        <span class="comment">// 修改文章</span></span><br><span class="line">        updateById(apArticle);</span><br><span class="line">        <span class="comment">// 修改文章内容</span></span><br><span class="line">        <span class="type">ApArticleContent</span> <span class="variable">apArticleContent</span> <span class="operator">=</span> apArticleContentMapper.selectOne(Wrappers</span><br><span class="line">                .&lt;ApArticleContent&gt;lambdaQuery().eq(ApArticleContent::getArticleId, dto.getId()));</span><br><span class="line">        apArticleContent.setContent(dto.getContent());</span><br><span class="line">        apArticleContentMapper.updateById(apArticleContent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 结果返回  文章id</span></span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(apArticle.getId());</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>补全 feign 包下的 ArticleClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleClient</span> <span class="keyword">implements</span> <span class="title class_">IArticleClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApArticleService apArticleService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/api/v1/article/save&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">saveArticle</span><span class="params">(<span class="meta">@RequestBody</span> ArticleDto dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> apArticleService.saveArticle(dto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>postman进行测试</p></li></ol><hr><h3 id="自媒体文章自动审核功能实现"><a class="headerlink" href="#自媒体文章自动审核功能实现"></a>自媒体文章自动审核功能实现</h3><hr><h4 id="表结构的说明"><a class="headerlink" href="#表结构的说明"></a>表结构的说明</h4><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704201759313.png" alt="wm_news 自媒体文章表" loading="lazy"></p><ul><li>status字段：0 草稿  1 待审核  2 审核失败  3 人工审核  4 人工审核通过  8 审核通过（待发布） 9 已发布</li></ul><h4 id="feign-远程接口调用方式"><a class="headerlink" href="#feign-远程接口调用方式"></a>feign 远程接口调用方式</h4><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704205616818.png" alt="feign 远程接口调用方式" loading="lazy"></p><h4 id="实现流程"><a class="headerlink" href="#实现流程"></a>实现流程</h4><ol><li><p>在 heima-leadnews-wemedia 中的 service 新增接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WmNewsAutoScanService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自媒体文章审核</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id  自媒体文章id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoScanWmNews</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmNewsAutoScanServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">WmNewsAutoScanService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自媒体文章审核</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 自媒体文章id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WmNewsMapper wmNewsMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoScanWmNews</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 查询自媒体文章</span></span><br><span class="line">        <span class="type">WmNews</span> <span class="variable">wmNews</span> <span class="operator">=</span> wmNewsMapper.selectById(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (wmNews == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;WmNewsAutoScanServiceImpl-文章不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (wmNews.getStatus().equals(WmNews.Status.SUBMIT.getCode())) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从内容中提取纯文本内容和图片</span></span><br><span class="line">            Map&lt;String, Object&gt; textAndImages = handleTextAndImages(wmNews);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 审核文本内容，阿里云接口</span></span><br><span class="line">            <span class="comment">// 传wmNews为了修改文章的状态</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isTextScan</span> <span class="operator">=</span> handleTextScan((String) textAndImages.get(<span class="string">&quot;content&quot;</span>), wmNews);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isTextScan) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 审核图片  阿里云接口</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isImageScan</span> <span class="operator">=</span> handleImageScan((List&lt;String&gt;) textAndImages.get(<span class="string">&quot;images&quot;</span>), wmNews);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isImageScan) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 审核成功，保存app端相关文章数据</span></span><br><span class="line">            <span class="type">ResponseResult</span> <span class="variable">responseResult</span> <span class="operator">=</span> saveAppArticle(wmNews);</span><br><span class="line">            <span class="keyword">if</span> (!responseResult.getCode().equals(<span class="number">200</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;WmNewsAutoScanServiceImpl-文章审核，保存app端相关文章数据失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 回填article_id</span></span><br><span class="line">            wmNews.setArticleId((Long) responseResult.getData());</span><br><span class="line"></span><br><span class="line">            updateWmNews(wmNews, (<span class="type">short</span>) <span class="number">9</span>, <span class="string">&quot;审核成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存app端相关的文章数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wmNews</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IArticleClient iArticleClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WmChannelMapper wmChannelMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WmUserMapper wmUserMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResponseResult <span class="title function_">saveAppArticle</span><span class="params">(WmNews wmNews)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ArticleDto</span> <span class="variable">articleDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArticleDto</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 属性的拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(wmNews, articleDto);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文章的布局</span></span><br><span class="line">        articleDto.setLayout(wmNews.getType());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 频道</span></span><br><span class="line">        <span class="type">WmChannel</span> <span class="variable">wmChannel</span> <span class="operator">=</span> wmChannelMapper.selectById(wmNews.getChannelId());</span><br><span class="line">        <span class="keyword">if</span> (wmChannel != <span class="literal">null</span>) &#123;</span><br><span class="line">            articleDto.setChannelName(wmChannel.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 作者</span></span><br><span class="line">        articleDto.setAuthorId(wmNews.getUserId().longValue());</span><br><span class="line">        <span class="type">WmUser</span> <span class="variable">wmUser</span> <span class="operator">=</span> wmUserMapper.selectById(wmNews.getUserId());</span><br><span class="line">        <span class="keyword">if</span> (wmUser != <span class="literal">null</span>) &#123;</span><br><span class="line">            articleDto.setAuthorName(wmUser.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (wmNews.getArticleId() != <span class="literal">null</span>) &#123;</span><br><span class="line">            articleDto.setId(wmNews.getArticleId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        articleDto.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">responseResult</span> <span class="operator">=</span> iArticleClient.saveArticle(articleDto);</span><br><span class="line">        <span class="keyword">return</span> responseResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 审核图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> images</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wmNews</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileStorageService fileStorageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GreenImageScan greenImageScan;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">handleImageScan</span><span class="params">(List&lt;String&gt; images, WmNews wmNews)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 下载图片从MinIO中</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (images == <span class="literal">null</span> || images.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 图片去重</span></span><br><span class="line">        images = images.stream().distinct().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        List&lt;<span class="type">byte</span>[]&gt; imageList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String image : images) &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = fileStorageService.downLoadFile(image);</span><br><span class="line">            imageList.add(bytes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 审核图片</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> greenImageScan.imageScan(imageList);</span><br><span class="line">            <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 审核失败</span></span><br><span class="line">                <span class="keyword">if</span> (map.get(<span class="string">&quot;suggestion&quot;</span>).equals(<span class="string">&quot;block&quot;</span>)) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    updateWmNews(wmNews, (<span class="type">short</span>) <span class="number">2</span>, <span class="string">&quot;当前文章中存在违规内容&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 不确定信息，需要人工审核</span></span><br><span class="line">                <span class="keyword">if</span> (map.get(<span class="string">&quot;suggestion&quot;</span>).equals(<span class="string">&quot;review&quot;</span>)) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    updateWmNews(wmNews, (<span class="type">short</span>) <span class="number">3</span>, <span class="string">&quot;当前文章中存在不确定内容&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 审核纯文本内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wmNews</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GreenTextScan greenTextScan;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">handleTextScan</span><span class="params">(String content, WmNews wmNews)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((wmNews.getTitle() + content).length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> greenTextScan.greeTextScan(wmNews.getTitle() + content);</span><br><span class="line">            <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 审核失败</span></span><br><span class="line">                <span class="keyword">if</span> (map.get(<span class="string">&quot;suggestion&quot;</span>).equals(<span class="string">&quot;block&quot;</span>)) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    updateWmNews(wmNews, (<span class="type">short</span>) <span class="number">2</span>, <span class="string">&quot;当前文章中存在违规内容&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 不确定信息，需要人工审核</span></span><br><span class="line">                <span class="keyword">if</span> (map.get(<span class="string">&quot;suggestion&quot;</span>).equals(<span class="string">&quot;review&quot;</span>)) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    updateWmNews(wmNews, (<span class="type">short</span>) <span class="number">3</span>, <span class="string">&quot;当前文章中存在不确定内容&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改文章内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wmNews</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reason</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateWmNews</span><span class="params">(WmNews wmNews, <span class="type">short</span> status, String reason)</span> &#123;</span><br><span class="line">        wmNews.setStatus(status);</span><br><span class="line">        wmNews.setReason(reason);</span><br><span class="line">        wmNewsMapper.updateById(wmNews);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 从自媒体文章内容中提取文本和图片</span></span><br><span class="line"><span class="comment">     * 2. 提取文章的封面图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wmNews</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title function_">handleTextAndImages</span><span class="params">(WmNews wmNews)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储纯文本内容</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储图片内容</span></span><br><span class="line">        List&lt;String&gt; images = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 从自媒体文章内容中提取文本和图片</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNoneBlank(wmNews.getContent())) &#123;</span><br><span class="line">            List&lt;Map&gt; maps = JSONArray.parseArray(wmNews.getContent(), Map.class);</span><br><span class="line">            <span class="keyword">for</span> (Map map : maps) &#123;</span><br><span class="line">                <span class="keyword">if</span> (map.get(<span class="string">&quot;type&quot;</span>).equals(<span class="string">&quot;text&quot;</span>)) &#123;</span><br><span class="line">                    sb.append(map.get(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (map.get(<span class="string">&quot;type&quot;</span>).equals(<span class="string">&quot;image&quot;</span>)) &#123;</span><br><span class="line">                    images.add((String) map.get(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 提取文章的封面图片</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNoneBlank(wmNews.getImages())) &#123;</span><br><span class="line">            String[] split = wmNews.getImages().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            images.addAll(Arrays.asList(split));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        resultMap.put(<span class="string">&quot;content&quot;</span>, sb.toString());</span><br><span class="line">        resultMap.put(<span class="string">&quot;images&quot;</span>, images);</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>feign 远程接口调用方式，要先在依赖中导入feign-api的软件包，然后在启动类中填入注解</p></li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>heima-leadnews-feign-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.heima.wemedia.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.heima.apis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WemediaApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(WemediaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// Mybatis-Plus的分页插件</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 heima-leadnews-wemedia 服务中已经依赖了 heima-leadnews-feign-apis 工程，只需要在自媒体的引导类中开启feign的远程调用即可</li><li><code>@EnableFeignClients(basePackages = &quot;com.heima.apis&quot;)</code> 需要指向 apis 这个包</li></ul><hr><h4 id="feign-远程调用服务降级处理"><a class="headerlink" href="#feign-远程调用服务降级处理"></a>feign 远程调用服务降级处理</h4><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704221605540.png" alt="示意图" loading="lazy"></p><ul><li><strong>服务降级</strong> 是 <strong>服务自我保护</strong> 的一种方式，或者 <strong>保护下游服务</strong> 的一种方式，用于确保服务不会受请求突增影响变得不可用，确保服务不会崩溃</li><li>服务降级 虽然 <strong>会导致请求失败</strong>，但是 <strong>不会导致阻塞</strong></li></ul><p><strong>步骤</strong>：</p><ol><li><p>在 <code>com.heima.apis.article.fallback</code> 包下编写降级逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IArticleClientFallback</span> <span class="keyword">implements</span> <span class="title class_">IArticleClient</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">saveArticle</span><span class="params">(ArticleDto dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.SERVER_ERROR, <span class="string">&quot;获取数据失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>远程接口中指向降级代码，在 <code>com.heima.apis.article.IArticleClient</code> 包下实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;leadnews-article&quot;, fallback = IArticleClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IArticleClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/api/v1/article/save&quot;)</span></span><br><span class="line">    <span class="comment">// @RequestBody：通常会使用这个注解来接收客户端发送的 JSON、XML 或其他格式的数据，并将其转换为 Java 对象</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">saveArticle</span><span class="params">(<span class="meta">@RequestBody</span> ArticleDto dto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 自媒体微服务 中添加类，扫描降级代码类的包，在 <code>com.heima.wemedia.config</code> 包下进行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.heima.apis.article.fallback&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端开启降级 heima-leadnews-wemedia，在 wemedia 的 nacos 配置中心里添加如下内容，开启服务降级，也可以指定服务响应的超时的时间</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="comment"># 开启feign对hystrix熔断降级的支持</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 修改调用超时时间</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">2000</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704222633894.png" alt="nacos 配置中心" loading="lazy"></p></li></ol><hr><h4 id="发布文章提交审核集成"><a class="headerlink" href="#发布文章提交审核集成"></a>发布文章提交审核集成</h4><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704223328979.png" alt="文章审核的方式" loading="lazy"></p><p><strong>Springboot集成异步线程调用</strong>：</p><ol><li><p>在 <strong>自媒体文章审核</strong> 的方法上加上 <code>@Async</code> 注解（标明要 <strong>异步调用</strong> ）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Async</span>  <span class="comment">//标明当前方法是一个异步方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoScanWmNews</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"><span class="comment">//代码略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 文章发布成功 后调用审核的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WmNewsAutoScanService wmNewsAutoScanService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布修改文章或保存为草稿</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">submitNews</span><span class="params">(WmNewsDto dto)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代码略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//审核文章</span></span><br><span class="line">    wmNewsAutoScanService.autoScanWmNews(wmNews.getId());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(AppHttpCodeEnum.SUCCESS);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 自媒体启动类 中使用 <code>@EnableAsync</code> 注解开启异步调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.heima.wemedia.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.heima.apis&quot;)</span></span><br><span class="line"><span class="meta">@EnableAsync</span>  <span class="comment">// 开启异步调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WemediaApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(WemediaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// Mybatis-Plus的分页插件</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="自管理敏感词过滤"><a class="headerlink" href="#自管理敏感词过滤"></a>自管理敏感词过滤</h3><hr><p><strong>需要实现的功能</strong>：需要自己维护一套敏感词，在文章审核的时候，需要验证文章是否包含这些敏感词</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704232829895.png" alt="实现方案" loading="lazy"></p><h4 id="DFA-实现原理"><a class="headerlink" href="#DFA-实现原理"></a>DFA 实现原理</h4><p>DFA全称为：Deterministic Finite Automaton，即确定有穷自动机</p><p>存储：一次性的把所有的敏感词存储到了多个map中，就是下图表示这种结构</p><p>敏感词：冰毒、大麻、大坏蛋</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240704233010327.png" alt="DFA举例" loading="lazy"></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705090741041.png" alt="执行流程" loading="lazy"></p><p>在 <code>com.heima.utils.common.SensitiveWordUtil</code> 包下有一个工具类，来实现DFA算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveWordUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; dictionaryMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成关键词字典库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> words</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initMap</span><span class="params">(Collection&lt;String&gt; words)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (words == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;敏感词列表不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// map初始长度words.size()，整个字典库的入口字数(小于words.size()，因为不同的词可能会有相同的首字)</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(words.size());</span><br><span class="line">        <span class="comment">// 遍历过程中当前层次的数据</span></span><br><span class="line">        Map&lt;String, Object&gt; curMap = <span class="literal">null</span>;</span><br><span class="line">        Iterator&lt;String&gt; iterator = words.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            curMap = map;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> word.length();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="comment">// 遍历每个词的字</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> String.valueOf(word.charAt(i));</span><br><span class="line">                <span class="comment">// 当前字在当前层是否存在, 不存在则新建, 当前层数据指向下一个节点, 继续判断是否存在数据</span></span><br><span class="line">                Map&lt;String, Object&gt; wordMap = (Map&lt;String, Object&gt;) curMap.get(key);</span><br><span class="line">                <span class="keyword">if</span> (wordMap == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 每个节点存在两个数据: 下一个节点和isEnd(是否结束标志)</span></span><br><span class="line">                    wordMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">                    wordMap.put(<span class="string">&quot;isEnd&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">                    curMap.put(key, wordMap);</span><br><span class="line">                &#125;</span><br><span class="line">                curMap = wordMap;</span><br><span class="line">                <span class="comment">// 如果当前字是词的最后一个字，则将isEnd标志置1</span></span><br><span class="line">                <span class="keyword">if</span> (i == len -<span class="number">1</span>) &#123;</span><br><span class="line">                    curMap.put(<span class="string">&quot;isEnd&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dictionaryMap = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索文本中某个文字是否匹配关键词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beginIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">checkWord</span><span class="params">(String text, <span class="type">int</span> beginIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dictionaryMap == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;字典不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isEnd</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">wordLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;String, Object&gt; curMap = dictionaryMap;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> text.length();</span><br><span class="line">        <span class="comment">// 从文本的第beginIndex开始匹配</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> beginIndex; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> String.valueOf(text.charAt(i));</span><br><span class="line">            <span class="comment">// 获取当前key的下一个节点</span></span><br><span class="line">            curMap = (Map&lt;String, Object&gt;) curMap.get(key);</span><br><span class="line">            <span class="keyword">if</span> (curMap == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                wordLength ++;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(curMap.get(<span class="string">&quot;isEnd&quot;</span>))) &#123;</span><br><span class="line">                    isEnd = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isEnd) &#123;</span><br><span class="line">            wordLength = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wordLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取匹配的关键词和命中次数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; <span class="title function_">matchWords</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; wordMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> text.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">wordLength</span> <span class="operator">=</span> checkWord(text, i);</span><br><span class="line">            <span class="keyword">if</span> (wordLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> text.substring(i, i + wordLength);</span><br><span class="line">                <span class="comment">// 添加关键词匹配次数</span></span><br><span class="line">                <span class="keyword">if</span> (wordMap.containsKey(word)) &#123;</span><br><span class="line">                    wordMap.put(word, wordMap.get(word) + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    wordMap.put(word, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                i += wordLength - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wordMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;法轮&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;法轮功&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;冰毒&quot;</span>);</span><br><span class="line">        initMap(list);</span><br><span class="line">        String content=<span class="string">&quot;我是一个好人，并不会卖冰毒，也不操练法轮功,我真的不卖冰毒&quot;</span>;</span><br><span class="line">        Map&lt;String, Integer&gt; map = matchWords(content);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="DFA-算法集成到文章审核中"><a class="headerlink" href="#DFA-算法集成到文章审核中"></a>DFA 算法集成到文章审核中</h4><hr><ol><li><p>创建敏感词表 wm_sensitive</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705093953335.png" alt="wm_senesitive" loading="lazy"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;wm_sensitive&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WmSensitive</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 敏感词</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;sensitives&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sensitives;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;created_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在对应的 mapper 中创建 wm_sensitive 实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WmSensitiveMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;WmSensitive&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在文章审核的代码中添加自管理敏感词审核</p><ul><li><p>在 WmNewsAutoScanServiceImpl 中的 autoScanWmNews 方法上添加如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从内容中提取纯文本内容和图片</span></span><br><span class="line"><span class="comment">//.....省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自管理的敏感词过滤</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isSensitive</span> <span class="operator">=</span> handleSensitiveScan((String) textAndImages.get(<span class="string">&quot;content&quot;</span>), wmNews);</span><br><span class="line"><span class="keyword">if</span>(!isSensitive) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.审核文本内容  阿里云接口</span></span><br><span class="line"><span class="comment">//.....省略</span></span><br></pre></td></tr></table></figure></li><li><p>新增自管理敏感词审核代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自管理敏感词审核</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> wmNews</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WmSensitiveMapper wmSensitiveMapper;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">handleSensitiveScan</span><span class="params">(String content, WmNews wmNews)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 1. 获取所有的敏感词</span></span><br><span class="line">    List&lt;WmSensitive&gt; wmSensitives = wmSensitiveMapper.selectList(Wrappers</span><br><span class="line">            .&lt;WmSensitive&gt;lambdaQuery().select(WmSensitive::getSensitives));</span><br><span class="line">    </span><br><span class="line">    List&lt;String&gt; sensitiveList = wmSensitives</span><br><span class="line">            .stream().map(WmSensitive::getSensitives).collect(Collectors.toList()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 初始化敏感词库</span></span><br><span class="line">    SensitiveWordUtil.initMap(sensitiveList);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 查看文章中是否包含敏感词</span></span><br><span class="line">    Map&lt;String, Integer&gt; map = SensitiveWordUtil.matchWords(content);</span><br><span class="line">    <span class="keyword">if</span> (map.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        updateWmNews(wmNews, (<span class="type">short</span>) <span class="number">2</span>, <span class="string">&quot;当前文章中存在违规内容&quot;</span> + map);</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="图片中文字敏感词过滤"><a class="headerlink" href="#图片中文字敏感词过滤"></a>图片中文字敏感词过滤</h3><hr><p>OCR （Optical Character Recognition，光学字符识别）是指电子设备（例如扫描仪或数码相机）检查纸上打印的字符，通过检测暗、亮的模式确定其形状，然后 <strong>用字符识别方法将形状翻译成计算机文字的过程</strong></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705100414130.png" alt="OCR技术分类" loading="lazy"></p><h4 id="Tesseract-OCR"><a class="headerlink" href="#Tesseract-OCR"></a>Tesseract-OCR</h4><p>Tesseract-OCR 的特点：</p><ol><li>Tesseract 支持UTF-8编码格式，并且可以“开箱即用”地识别100多种语言</li><li>Tesseract 支持多种输出格式：纯文本，hOCR（HTML），PDF等</li><li>官方建议，为了获得更好的OCR结果，最好提供给高质量的图像</li><li>Tesseract 进行识别其他语言的训练<ul><li>具体的训练方式，请参考官方提供的文档：<a href="https://tesseract-ocr.github.io/tessdoc/">https://tesseract-ocr.github.io/tessdoc/</a></li></ul></li></ol><h4 id="Tess4j-使用"><a class="headerlink" href="#Tess4j-使用"></a>Tess4j 使用</h4><ol><li><p>创建项目导入 tess4j 对应的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.tess4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tess4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>导入中文字体库， tessdata文件夹 拷贝到 todaynews 的工作空间下</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705102739494.png" alt loading="lazy"></p></li><li><p>编写测试类进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 识别图片中的文字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建实例</span></span><br><span class="line">        <span class="type">ITesseract</span> <span class="variable">tesseract</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tesseract</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 设置字体库路径</span></span><br><span class="line">        tesseract.setDatapath(<span class="string">&quot;D:\\BaiduNetdiskDownload\\todaynews\\tessdata&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 设置语言  --&gt;  简体中文</span></span><br><span class="line">        <span class="comment">// chi_sim 这是固定写法</span></span><br><span class="line">        tesseract.setLanguage(<span class="string">&quot;chi_sim&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\BaiduNetdiskDownload\\todaynews\\test.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 识别图片</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = tesseract.doOCR(file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TesseractException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;识别的结果为：&quot;</span> + result.replaceAll(<span class="string">&quot;\\r|\\n&quot;</span>,<span class="string">&quot;-&quot;</span>));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 识别的结果为：江户川柯南私人侦探-婚外情调查 商务调查 要账情债 ”企业打假-寻人找人 财产调查“私人调查--电话: 12345678901-</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="管理敏感词和图片文字识别集成到文章审核"><a class="headerlink" href="#管理敏感词和图片文字识别集成到文章审核"></a>管理敏感词和图片文字识别集成到文章审核</h4><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- tess4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.tess4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tess4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 heima-leadnews-common 中创建工具类，简单封装一下 tess4j</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Getter</span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;tess4j&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tess4jClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dataPath;</span><br><span class="line">    <span class="keyword">private</span> String language;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doOCR</span><span class="params">(BufferedImage image)</span> <span class="keyword">throws</span> TesseractException &#123;</span><br><span class="line">        <span class="comment">//创建Tesseract对象</span></span><br><span class="line">        <span class="type">ITesseract</span> <span class="variable">tesseract</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tesseract</span>();</span><br><span class="line">        <span class="comment">//设置字体库路径</span></span><br><span class="line">        tesseract.setDatapath(dataPath);</span><br><span class="line">        <span class="comment">//中文识别</span></span><br><span class="line">        tesseract.setLanguage(language);</span><br><span class="line">        <span class="comment">//执行ocr识别</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> tesseract.doOCR(image);</span><br><span class="line">        <span class="comment">//替换回车和tal键  使结果为一行</span></span><br><span class="line">        result = result.replaceAll(<span class="string">&quot;\\r|\\n&quot;</span>, <span class="string">&quot;-&quot;</span>).replaceAll(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 spring.factories 配置中添加该类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.heima.common.exception.ExceptionCatch,\</span><br><span class="line">  com.heima.common.swagger.SwaggerConfiguration,\</span><br><span class="line">  com.heima.common.swagger.Swagger2Configuration,\</span><br><span class="line">  com.heima.common.aliyun.GreenImageScan,\</span><br><span class="line">  com.heima.common.aliyun.GreenTextScan,\</span><br><span class="line">  com.heima.common.tess4j.Tess4jClient</span><br></pre></td></tr></table></figure></li><li><p>在 heima-leadnews-wemedia 中的配置中添加两个属性</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tess4j:</span></span><br><span class="line">  <span class="attr">data-path:</span> <span class="string">D:\BaiduNetdiskDownload\todaynews\tessdata</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">chi_sim</span></span><br></pre></td></tr></table></figure></li><li><p>在 WmNewsAutoScanServiceImpl 中的 handleImageScan 方法上添加如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自管理的敏感图片识别</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> images</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> wmNews</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> FileStorageService fileStorageService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Tess4jClient tess4jClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">handleSensitivePictScan</span><span class="params">(List&lt;String&gt; images, WmNews wmNews)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 下载图片从MinIO中</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (images == <span class="literal">null</span> || images.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 图片去重</span></span><br><span class="line">    images = images.stream().distinct().collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String image : images) &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = fileStorageService.downLoadFile(image);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// byte[] 转换为 bufferImage</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">            <span class="type">BufferedImage</span> <span class="variable">bufferedImage</span> <span class="operator">=</span> ImageIO.read(in);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 图片识别</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> tess4jClient.doOCR(bufferedImage);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 过滤文字</span></span><br><span class="line">            flag = handleSensitiveScan(result, wmNews);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="文章详情-静态文件生成"><a class="headerlink" href="#文章详情-静态文件生成"></a>文章详情-静态文件生成</h3><hr><h4 id="思路分析-2"><a class="headerlink" href="#思路分析-2"></a>思路分析</h4><p>文章端创建 app 相关文章时，生成文章详情静态页上传到 MinIO 中</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240705105755084.png" alt="流程分析" loading="lazy"></p><h4 id="实现步骤-2"><a class="headerlink" href="#实现步骤-2"></a>实现步骤</h4><ol><li><p>新建 ArticleFreemarkerService 创建静态文件并上传到 minIO 中，在<code>com.heima.article.service.ArticleFreemarkerService</code> 软件包目录下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ArticleFreemarkerService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成静态文件上传到minIO中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> apArticle</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildArticleToMinIO</span><span class="params">(ApArticle apArticle,String content)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleFreemarkerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ArticleFreemarkerService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成静态文件上传到minio中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> apArticle</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileStorageService fileStorageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApArticleService apArticleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Async</span> <span class="comment">// 异步方式生成静态文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildArticleToMinIO</span><span class="params">(ApArticle apArticle, String content)</span> &#123;</span><br><span class="line">        <span class="comment">// 已知文章id</span></span><br><span class="line">        <span class="comment">// 1. 获取文章内容</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(content)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 文章内容通过freemarker生成html文件</span></span><br><span class="line">            <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">StringWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                template = configuration.getTemplate(<span class="string">&quot;article.ftl&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 数据模型</span></span><br><span class="line">                Map&lt;String, Object&gt; contentDataModel = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                contentDataModel.put(<span class="string">&quot;content&quot;</span>, JSONArray.parseArray(content));</span><br><span class="line"></span><br><span class="line">                out = <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 合成</span></span><br><span class="line">                template.process(contentDataModel, out);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 把html文件上传到minio中</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(out.toString().getBytes());</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> fileStorageService.uploadHtmlFile(<span class="string">&quot;&quot;</span>, apArticle.getId() + <span class="string">&quot;.html&quot;</span>, in);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 修改ap_article表，保存static_url字段</span></span><br><span class="line">            apArticleService.update(Wrappers.&lt;ApArticle&gt;lambdaUpdate().eq(ApArticle::getId, apArticle.getId())</span><br><span class="line">                    .set(ApArticle::getStaticUrl, path));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 ApArticleService 的 saveArticle 实现方法中添加调用生成文件的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存app端相关文章</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApArticleConfigMapper apArticleConfigMapper;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApArticleContentMapper apArticleContentMapper;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ArticleFreemarkerService articleFreemarkerService;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">saveArticle</span><span class="params">(ArticleDto dto)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">// 1. 检查参数</span></span><br><span class="line">    <span class="keyword">if</span> (dto == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ApArticle</span> <span class="variable">apArticle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApArticle</span>();</span><br><span class="line">    BeanUtils.copyProperties(dto, apArticle);</span><br><span class="line">    <span class="comment">// 2. 判断是否存在id</span></span><br><span class="line">    <span class="keyword">if</span> (dto.getId() == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 2.1 不存在id，保存  文章  文章配置  文章内容</span></span><br><span class="line">        <span class="comment">// 保存文章</span></span><br><span class="line">        save(apArticle);</span><br><span class="line">        <span class="comment">// 保存配置</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里重写了有参构造方法</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * public ApArticleConfig(Long articleId) &#123;</span></span><br><span class="line"><span class="comment">         *     this.articleId = articleId;</span></span><br><span class="line"><span class="comment">         *     this.isDelete = false;</span></span><br><span class="line"><span class="comment">         *     this.isDown = false;</span></span><br><span class="line"><span class="comment">         *     this.isForward = true;</span></span><br><span class="line"><span class="comment">         *     this.isComment = true;</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ApArticleConfig</span> <span class="variable">apArticleConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApArticleConfig</span>(apArticle.getId());</span><br><span class="line">        apArticleConfigMapper.insert(apArticleConfig);</span><br><span class="line">        <span class="comment">// 保存文章内容</span></span><br><span class="line">        <span class="type">ApArticleContent</span> <span class="variable">apArticleContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApArticleContent</span>();</span><br><span class="line">        apArticleContent.setArticleId(apArticle.getId());</span><br><span class="line">        apArticleContent.setContent(dto.getContent());</span><br><span class="line">        apArticleContentMapper.insert(apArticleContent);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 2.2 存在id  修改  文章  文章内容</span></span><br><span class="line">        <span class="comment">// 修改文章</span></span><br><span class="line">        updateById(apArticle);</span><br><span class="line">        <span class="comment">// 修改文章内容</span></span><br><span class="line">        <span class="type">ApArticleContent</span> <span class="variable">apArticleContent</span> <span class="operator">=</span> apArticleContentMapper.selectOne(Wrappers</span><br><span class="line">                .&lt;ApArticleContent&gt;lambdaQuery().eq(ApArticleContent::getArticleId, dto.getId()));</span><br><span class="line">        apArticleContent.setContent(dto.getContent());</span><br><span class="line">        apArticleContentMapper.updateById(apArticleContent);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// !!!</span></span><br><span class="line">    <span class="comment">// 异步调用，生成静态文件上传到minio中</span></span><br><span class="line">    articleFreemarkerService.buildArticleToMinIO(apArticle, dto.getContent());</span><br><span class="line">    <span class="comment">// 3. 结果返回  文章id</span></span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(apArticle.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文章微服务开启异步调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.heima.article.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableAsync</span>  <span class="comment">// 开启异步调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ArticleApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// Mybatis-Plus的分页插件</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02 Python高级 笔记</title>
      <link href="/2024/06/21/02-Python/"/>
      <url>/2024/06/21/02-Python/</url>
      
        <content type="html"><![CDATA[<h1>正则表达式</h1><hr><h2 id="re-模块操作"><a class="headerlink" href="#re-模块操作"></a>re 模块操作</h2><hr><ul><li><p><strong>re 模块的使用过程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 导入 re 模块</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 match 方法进行匹配操作</span></span><br><span class="line">result = re.<span class="keyword">match</span>(正则表达式,要匹配的字符串)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果上一步匹配到数据的话，可以使用 group 方法来提取数据</span></span><br><span class="line">result.group()</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result.group())  <span class="comment"># hello</span></span><br><span class="line"></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;hello1&quot;</span>, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment"># AttributeError: &#x27;NoneType&#x27; object has no attribute &#x27;group&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>re.match() 能够<strong>匹配出以 xxx 开头的字符串</strong></p></li></ul><hr><h2 id="匹配单字符"><a class="headerlink" href="#匹配单字符"></a>匹配单字符</h2><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240621170355549.png" alt="正则表达式的单字符匹配" loading="lazy"></p><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;M&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())  <span class="comment"># M</span></span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;t.o&quot;</span>, <span class="string">&quot;too&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())  <span class="comment"># too</span></span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;t.o&quot;</span>, <span class="string">&quot;two&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())  <span class="comment"># two</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 hello 的首字符小写，那么正则表达式需要小写的 h</span></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;h&quot;</span>, <span class="string">&quot;hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())  <span class="comment"># h</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 hello 的首字符大写，那么正则表达式需要大写的 H</span></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;H&quot;</span>, <span class="string">&quot;Hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())  <span class="comment"># H</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小写 h 都可以的情况</span></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[hH]&quot;</span>, <span class="string">&quot;hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())  <span class="comment"># h</span></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[hH]&quot;</span>, <span class="string">&quot;Hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())  <span class="comment"># H</span></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[hH]ello Python&quot;</span>, <span class="string">&quot;Hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())  <span class="comment"># Hello Python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 0 到 9 第一种写法</span></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[0123456789]Hello Python&quot;</span>, <span class="string">&quot;7Hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())  <span class="comment"># 7Hello Python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 0 到 9 第二种写法</span></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[0-9]Hello Python&quot;</span>,<span class="string">&quot;7Hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())  <span class="comment"># 7Hello Python</span></span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[0-35-9]Hello Python&quot;</span>,<span class="string">&quot;7Hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())  <span class="comment"># 7Hello Python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这个正则不能够匹配到数字 4，因此 ret 为 None</span></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[0-35-9]Hello Python&quot;</span>,<span class="string">&quot;4Hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())  <span class="comment"># AttributeError: &#x27;NoneType&#x27; object has no attribute &#x27;group&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \d 匹配</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;嫦娥 1 号&quot;</span>, <span class="string">&quot;嫦娥 1 号发射成功&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;嫦娥 2 号&quot;</span>, <span class="string">&quot;嫦娥 2 号发射成功&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;嫦娥 3 号&quot;</span>, <span class="string">&quot;嫦娥 3 号发射成功&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用\d 进行匹配</span></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;嫦娥\d号&quot;</span>, <span class="string">&quot;嫦娥1号发射成功&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;嫦娥\d号&quot;</span>, <span class="string">&quot;嫦娥2号发射成功&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;嫦娥\d号&quot;</span>, <span class="string">&quot;嫦娥3号发射成功&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">嫦娥 1 号</span></span><br><span class="line"><span class="string">嫦娥 2 号</span></span><br><span class="line"><span class="string">嫦娥 3 号</span></span><br><span class="line"><span class="string">嫦娥1号</span></span><br><span class="line"><span class="string">嫦娥2号</span></span><br><span class="line"><span class="string">嫦娥3号</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="匹配多个字符"><a class="headerlink" href="#匹配多个字符"></a>匹配多个字符</h2><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240621172325258.png" alt="匹配多个字符" loading="lazy"></p><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配 *</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[A-Z][a-z]*&quot;</span>, <span class="string">&quot;M&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[A-Z][a-z]*&quot;</span>, <span class="string">&quot;MnnM&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[A-Z][a-z]*&quot;</span>, <span class="string">&quot;Aabcdef&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">M</span></span><br><span class="line"><span class="string">Mnn</span></span><br><span class="line"><span class="string">Aabcdef</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配 + 号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[A-Z]+[a-z]*&quot;</span>, <span class="string">&quot;M&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[A-Z]+[a-z]*&quot;</span>, <span class="string">&quot;MnnM&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[A-Z]+[a-z]*&quot;</span>, <span class="string">&quot;Aabcdef&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">M</span></span><br><span class="line"><span class="string">Mnn</span></span><br><span class="line"><span class="string">Aabcdef</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配 ?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[1-9]?[0-9]&quot;</span>, <span class="string">&quot;7&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[1-9]?\d&quot;</span>, <span class="string">&quot;33&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[1-9]?\d&quot;</span>, <span class="string">&quot;09&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">7</span></span><br><span class="line"><span class="string">33</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配 &#123;m&#125; </span></span><br><span class="line"><span class="comment"># 匹配 &#123;m, n&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[a-zA-Z0-9_]&#123;6&#125;&quot;</span>, <span class="string">&quot;12a3g45678&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[a-zA-Z0-9_]&#123;8,20&#125;&quot;</span>, <span class="string">&quot;1ad12f23s34455ff66&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">12a3g4</span></span><br><span class="line"><span class="string">1ad12f23s34455ff66</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="匹配开头结尾"><a class="headerlink" href="#匹配开头结尾"></a>匹配开头结尾</h2><hr><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240621174741928.png" alt="匹配开头结尾" loading="lazy"></p><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配 163.com 邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[\w]&#123;4,20&#125;@163\.com&quot;</span>, <span class="string">&quot;xiaobai@163.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ret.group())  <span class="comment"># xiaobai@163.com</span></span><br><span class="line"></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[1-9]?\d$&quot;</span>,<span class="string">&quot;09&quot;</span>)</span><br><span class="line"><span class="comment"># $ 要求是以0匹配的内容结尾，但是它不是以0为结尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只要0到99匹配</span></span><br><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&quot;[1-9]?\d$&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ret.group())  </span><br><span class="line"><span class="comment"># AttributeError: &#x27;NoneType&#x27; object has no attribute &#x27;group&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00 生信基础 笔记</title>
      <link href="/2024/06/18/00-%E5%8D%8E%E5%93%A5%E7%94%9F%E4%BF%A1%E5%9F%BA%E7%A1%80%E7%8F%AD/"/>
      <url>/2024/06/18/00-%E5%8D%8E%E5%93%A5%E7%94%9F%E4%BF%A1%E5%9F%BA%E7%A1%80%E7%8F%AD/</url>
      
        <content type="html"><![CDATA[<h1>R 语言基础</h1><hr><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">a <span class="operator">=</span> <span class="number">1</span><span class="operator">:</span><span class="number">10</span></span><br><span class="line"><span class="comment"># [1]  1  2  3  4  5  6  7  8  9 10</span></span><br><span class="line"><span class="comment"># 1到10所有的整数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两种赋值方式</span></span><br><span class="line">a <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">a <span class="operator">&lt;-</span> 1  <span class="comment"># 用 alt + - 可以打出来 &lt;- </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c 是一个函数，不建议使用</span></span><br><span class="line">eg<span class="operator">:</span> a <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统报错改为英文</span></span><br><span class="line">Sys.setenv<span class="punctuation">(</span>LANGUAGE <span class="operator">=</span> <span class="string">&quot;en&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止转化为因子</span></span><br><span class="line">options<span class="punctuation">(</span>stringsAsFactors <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空环境</span></span><br><span class="line">rm<span class="punctuation">(</span><span class="built_in">list</span><span class="operator">=</span>ls<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CRAN存储库，R官方的包</span></span><br><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;package&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生物方面常用的包很多都在Bioconductor</span></span><br><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;BiocManager&quot;</span><span class="punctuation">)</span></span><br><span class="line">BiocManager<span class="operator">::</span>install<span class="punctuation">(</span><span class="string">&quot;AUCell&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最新的r包存在Github上，比如单细胞数据分析所用的很多包</span></span><br><span class="line">devtools<span class="operator">::</span>install_github<span class="punctuation">(</span><span class="string">&quot;hadley/babynames&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取路径</span></span><br><span class="line">getwd<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置路径</span></span><br><span class="line">setwd<span class="punctuation">(</span><span class="string">&quot;D:\\test&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载数据 getGPL = F 这个代表不下载平台注释文件，因为有时候网络不稳定。后面我们会在网页中下载，然后读取。</span></span><br><span class="line"><span class="comment"># destdir：下载的文件路径</span></span><br><span class="line">gset <span class="operator">=</span> getGEO<span class="punctuation">(</span><span class="string">&#x27;GSE12417&#x27;</span><span class="punctuation">,</span> destdir<span class="operator">=</span><span class="string">&quot;.&quot;</span><span class="punctuation">,</span> getGPL <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将gset这个数据保存为 .rdata 数据</span></span><br><span class="line">save<span class="punctuation">(</span>gset<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;6.19.rdata&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .rdata 数据</span></span><br><span class="line">load<span class="punctuation">(</span><span class="string">&quot;6.19.rdata&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存全局环境变量</span></span><br><span class="line">save.image<span class="punctuation">(</span><span class="string">&quot;D:\\all.data.RData&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象是区分大小写的</span></span><br><span class="line">a <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">A <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>GDS vs GSE vs GSM vs GPL：</strong></p><ul><li>GEO Dataset(GDS)：GDS是人工整理好的关于某个类别的GSM的集合</li><li>GEO Series(GSE)：GSE是一个实验项目中的所有样本的芯片实验数据集</li><li>GEO Sample(GSM)：GSM是单个样本的实验数据</li><li>GEO Platform(GPL)：GPL是芯片的平台，如Affmetrix，Aglent等</li></ul><hr><h2 id="数据结构"><a class="headerlink" href="#数据结构"></a>数据结构</h2><hr><h3 id="S3-对象"><a class="headerlink" href="#S3-对象"></a>S3 对象</h3><ul><li><p>数据结构</p><ul><li><p>Vector（向量）</p><ul><li>一维数据结构（一堆点）</li><li>有序性</li><li>单个向量的数据类型相同</li></ul></li><li><p>Matrix（矩阵）</p><ul><li><p>二维数据结构（面）</p></li><li><p>要求所有的数据类型是相同的</p></li></ul></li><li><p>Data frame（数据框）</p><ul><li><p>二维数据结构（面）</p></li><li><p>可以有多种数据类型</p></li><li><p>数据框是由每一列向量组成的，基本组成单位是 <strong>列</strong></p></li></ul></li><li><p>List（列表）</p><ul><li>将其他的数据结构框起来</li></ul></li><li><p>Array（数组）</p></li></ul></li><li><p>数据类型</p><ul><li>数值型（1, 2, 3, 4 …）</li><li>字符型（a, b, c, d …）</li><li>逻辑型：TRUE / FALSE</li><li>因子型：类别变量</li></ul></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240619185023700.png" alt="图示" loading="lazy"></p><p>eg：</p><ul><li><p>向量</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向量的创建</span></span><br><span class="line"><span class="built_in">c</span><span class="punctuation">(</span><span class="punctuation">)</span>  <span class="comment"># 这个c可以表示一个函数，专门用来创建向量</span></span><br><span class="line"></span><br><span class="line">a <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span></span><br><span class="line">b <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;a&quot;</span><span class="punctuation">,</span> <span class="string">&quot;b&quot;</span><span class="punctuation">,</span> <span class="string">&quot;c&quot;</span><span class="punctuation">,</span> <span class="string">&quot;d&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对向量进行命名</span></span><br><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>b<span class="punctuation">)</span> <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;z3&quot;</span><span class="punctuation">,</span> <span class="string">&quot;z4&quot;</span><span class="punctuation">,</span> <span class="string">&quot;z5&quot;</span><span class="punctuation">,</span> <span class="string">&quot;z6&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  z3  z4  z5  z6 </span></span><br><span class="line"><span class="comment"># &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向量的提取</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照排列顺序提取</span></span><br><span class="line">b<span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span></span><br><span class="line"><span class="comment"># 按照名称提取</span></span><br><span class="line">b<span class="punctuation">[</span><span class="string">&quot;z5&quot;</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  z5 </span></span><br><span class="line"><span class="comment"># &quot;c&quot; </span></span><br><span class="line"></span><br><span class="line">b<span class="punctuation">[</span><span class="number">100</span><span class="punctuation">]</span>  <span class="comment"># NA</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向量中提取两个元素</span></span><br><span class="line">b<span class="punctuation">[</span><span class="number">2</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">]</span></span><br><span class="line">b<span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  z4  z5 </span></span><br><span class="line"><span class="comment"># &quot;b&quot; &quot;c&quot; </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建的向量中的数据类型不同</span></span><br><span class="line">f<span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="string">&quot;a&quot;</span><span class="punctuation">,</span><span class="string">&quot;b&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>f<span class="punctuation">)</span></span><br><span class="line"><span class="comment"># [1] &quot;character&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除向量中的元素</span></span><br><span class="line">f <span class="operator">=</span> f<span class="punctuation">[</span><span class="operator">-</span><span class="number">4</span><span class="punctuation">]</span>  <span class="comment"># 删除向量中第四个元素，并重新赋值给f</span></span><br><span class="line">f <span class="operator">=</span> f<span class="punctuation">[</span><span class="operator">-</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li><li><p>列表</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个列表</span></span><br><span class="line">z1<span class="operator">=</span><span class="built_in">list</span><span class="punctuation">(</span>x<span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;zzz&quot;</span><span class="punctuation">,</span><span class="string">&quot;yyy&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span>y<span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;zy&quot;</span><span class="punctuation">,</span><span class="string">&quot;yq&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">View<span class="punctuation">(</span>z1<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240619194604617.png" alt="View(z1) 的结果" loading="lazy"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表中的提取</span></span><br><span class="line">z1<span class="punctuation">[[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span>  <span class="comment"># 提取列表中的第二个元素</span></span><br><span class="line">z1<span class="punctuation">[[</span><span class="string">&quot;x&quot;</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="comment"># [1] &quot;zy&quot; &quot;yq&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>数据框</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">anno<span class="operator">=</span>fread<span class="punctuation">(</span><span class="string">&quot;GPL96-57554.txt&quot;</span><span class="punctuation">,</span> header <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span> data.table <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># class(anno) 为 &quot;data.frame&quot;</span></span><br><span class="line"><span class="comment"># header = T 的作用是把第一行作为列名</span></span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>anno<span class="punctuation">)</span>  <span class="comment"># 这是一个数据框</span></span><br><span class="line"></span><br><span class="line">anno2<span class="operator">=</span>fread<span class="punctuation">(</span><span class="string">&quot;GPL96-57554.txt&quot;</span><span class="punctuation">,</span> header <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span> data.table <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># class(anno2) 为 &quot;data.table&quot;，data.table 这种数据结构没学过</span></span><br><span class="line"><span class="comment"># fread是用来读 .txt 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到列名</span></span><br><span class="line">x1<span class="operator">=</span>colnames<span class="punctuation">(</span>anno<span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 得到行名</span></span><br><span class="line">x2<span class="operator">=</span>rownames<span class="punctuation">(</span>anno<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">anno<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span> <span class="comment"># 提取第一行第二列的结果，因为数据框是二维的</span></span><br><span class="line">anno<span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="punctuation">]</span>  <span class="comment"># 提取了第三行的所有数据</span></span><br><span class="line">anno<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span>  <span class="comment"># 提取第一列的所有数据，是一个数据框</span></span><br><span class="line">anno<span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span>  <span class="comment"># 提取第一列的数据，不包括列头，是一个向量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># n4是提取 ID 和 Target Description 这两列数据</span></span><br><span class="line">n4 <span class="operator">=</span> anno<span class="punctuation">[</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;ID&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Target Description&quot;</span><span class="punctuation">)</span><span class="punctuation">]</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变anno中ID所在列的列名</span></span><br><span class="line">anno<span class="operator">$</span>ID <span class="operator">=</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在anno中新增一列xyz，$只能提取一列</span></span><br><span class="line">anno<span class="operator">$</span>xyz <span class="operator">=</span> <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改anno数据中第二列的列名</span></span><br><span class="line">colnames<span class="punctuation">(</span>anno<span class="punctuation">)</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>两个数据框的合并</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个数据框</span></span><br><span class="line">data.frame<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建第一个数据框</span></span><br><span class="line"><span class="comment"># x1 = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)，这个是第一列 x1 的信息</span></span><br><span class="line"><span class="comment"># x2 = c(1, 3, 5, 7)，这个是第二列 x2 的信息</span></span><br><span class="line">d1 <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span></span><br><span class="line">  x1 <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;a&quot;</span><span class="punctuation">,</span> <span class="string">&quot;b&quot;</span><span class="punctuation">,</span> <span class="string">&quot;c&quot;</span><span class="punctuation">,</span> <span class="string">&quot;d&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  x2 <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建第二个数据框</span></span><br><span class="line"><span class="comment"># stringsAsFactors=FALSE，这个是进制转化因子</span></span><br><span class="line">d2 <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span></span><br><span class="line">  y1 <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">10</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">12</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  y2 <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;b&quot;</span><span class="punctuation">,</span> <span class="string">&quot;c&quot;</span><span class="punctuation">,</span> <span class="string">&quot;d&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  stringsAsFactors<span class="operator">=</span><span class="literal">FALSE</span></span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># d1数据框与d2数据框进行合并</span></span><br><span class="line"><span class="comment"># by.x 和 by.y 两个参数可以指定合并的列名</span></span><br><span class="line">d3<span class="operator">=</span>merge<span class="punctuation">(</span>d1<span class="punctuation">,</span>d2<span class="punctuation">,</span>by.x <span class="operator">=</span> <span class="string">&quot;x1&quot;</span><span class="punctuation">,</span>by.y <span class="operator">=</span> <span class="string">&quot;y2&quot;</span><span class="punctuation">)</span></span><br><span class="line">d3<span class="operator">=</span>merge<span class="punctuation">(</span>x <span class="operator">=</span> d1<span class="punctuation">,</span> y <span class="operator">=</span> d2<span class="punctuation">,</span> by.x <span class="operator">=</span> <span class="string">&quot;x1&quot;</span><span class="punctuation">,</span> by.y <span class="operator">=</span> <span class="string">&quot;y2&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 这里是选取 d1 中共同的列 x1 以及 d2 中共同的列 y2</span></span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240629194741508.png" alt="d3图示" loading="lazy"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a1<span class="operator">=</span>data.frame<span class="punctuation">(</span></span><br><span class="line">  x1<span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  x2<span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;b&quot;</span><span class="punctuation">,</span> <span class="string">&quot;c&quot;</span><span class="punctuation">,</span> <span class="string">&quot;d&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  stringsAsFactors<span class="operator">=</span><span class="literal">FALSE</span></span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a2<span class="operator">=</span>data.frame<span class="punctuation">(</span></span><br><span class="line">  x1<span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">10</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">12</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  x2<span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;k1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;k2&quot;</span><span class="punctuation">,</span> <span class="string">&quot;k3&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">  stringsAsFactors<span class="operator">=</span><span class="literal">FALSE</span></span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># cbind()：是左右合并，把列数加长了</span></span><br><span class="line">a3<span class="operator">=</span>cbind<span class="punctuation">(</span>a1<span class="punctuation">,</span>a2<span class="punctuation">)</span> <span class="comment"># 之前a1为2列，a2为2列，现在a3为4列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rbind()：是上下合并，把行数加长了</span></span><br><span class="line">a4<span class="operator">=</span>rbind<span class="punctuation">(</span>a1<span class="punctuation">,</span>a2<span class="punctuation">)</span> <span class="comment"># 之前a1为3行，a2为3行，现在a4为6行</span></span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240629205820603.png" alt="cbind() 和 rbind()" loading="lazy"></p></li></ul><hr><h3 id="S4-对象"><a class="headerlink" href="#S4-对象"></a>S4 对象</h3><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240620205453017.png" alt="S4对象 举例" loading="lazy"></p><p>eg：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gset <span class="operator">=</span> getGEO<span class="punctuation">(</span><span class="string">&#x27;GSE12417&#x27;</span><span class="punctuation">,</span> destdir<span class="operator">=</span><span class="string">&quot;.&quot;</span><span class="punctuation">,</span>getGPL <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取list列表中的第二个元素（部分）</span></span><br><span class="line">e2 <span class="operator">=</span> gset<span class="punctuation">[[</span><span class="string">&quot;GSE12417-GPL96_series_matrix.txt.gz&quot;</span> <span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line">e2 <span class="operator">=</span> gset<span class="punctuation">[[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看e2的数据结构</span></span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>e2<span class="punctuation">)</span></span><br><span class="line"><span class="comment"># [1] &quot;ExpressionSet&quot;</span></span><br><span class="line"><span class="comment"># attr(,&quot;package&quot;)</span></span><br><span class="line"><span class="comment"># [1] &quot;Biobase&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240620213030442.png" alt="提取 geo_accession" loading="lazy"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># S4对象的提取</span></span><br><span class="line"><span class="comment"># 第一种提取 @</span></span><br><span class="line">geo <span class="operator">=</span> e2<span class="operator">@</span>phenoData<span class="operator">@</span>data<span class="punctuation">[[</span><span class="string">&quot;geo_accession&quot;</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种提取 @和$交替</span></span><br><span class="line">geo <span class="operator">=</span> e2<span class="operator">@</span>phenoData<span class="operator">@</span>data<span class="operator">$</span>geo_accession</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三种提取 函数提取</span></span><br><span class="line">pdata<span class="operator">=</span>pData<span class="punctuation">(</span>e2<span class="punctuation">)</span>  <span class="comment"># pData函数只有ExpressionSet的S4对象的临床数据可以使用</span></span><br><span class="line">pdata <span class="operator">=</span> e2<span class="operator">@</span>phenoData<span class="operator">@</span>data</span><br><span class="line"></span><br><span class="line"><span class="built_in">exp</span> <span class="operator">=</span> exprs<span class="punctuation">(</span>e2<span class="punctuation">)</span>  <span class="comment"># exprs函数是提取表达矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S4对象中，表达矩阵和临床数据里的信息这两个比较重要</span></span><br></pre></td></tr></table></figure><hr><h2 id="探针-Gene-Symbol"><a class="headerlink" href="#探针-Gene-Symbol"></a>探针 -&gt; Gene Symbol</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 去除 Gene Symbol 中的 ///</span></span><br><span class="line"></span><br><span class="line">anno<span class="operator">=</span>fread<span class="punctuation">(</span><span class="string">&quot;GPL96-57554.txt&quot;</span><span class="punctuation">,</span> header <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span> data.table <span class="operator">=</span> <span class="built_in">F</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 先将ID列和Gene Symbol提取出来</span></span><br><span class="line">gene <span class="operator">=</span> anno<span class="punctuation">[</span><span class="punctuation">,</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">11</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line">gene.1 <span class="operator">=</span> anno<span class="punctuation">[</span><span class="punctuation">,</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;ID&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Gene Symbol&quot;</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对基因的某一列进行提取 $</span></span><br><span class="line">x <span class="operator">=</span> gene<span class="operator">$</span><span class="string">&quot;Gene Symbol&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将Gene Symbol中前10个输出一下</span></span><br><span class="line">x<span class="punctuation">[</span><span class="number">1</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串切割</span></span><br><span class="line">a1 <span class="operator">=</span> strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot; /// &quot;</span><span class="punctuation">,</span> fixed <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># fixed = T 指精准匹配，就是必须匹配 /// 这种形式，切割必须按照这种形式</span></span><br><span class="line"><span class="comment"># a1 返回的是一个 list 的数据结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># apply()函数主要用于 循环</span></span><br><span class="line"><span class="comment"># 把分割后的字符串的第一个元素提取出来，合并成为一个新的向量</span></span><br><span class="line"><span class="comment"># sapply()是把a1中的每一个元素都运行后面的function函数，function函数是提取向量中的第一个元素</span></span><br><span class="line">gene.all <span class="operator">=</span> sapply<span class="punctuation">(</span>a1<span class="punctuation">,</span> <span class="keyword">function</span><span class="punctuation">(</span>x<span class="punctuation">)</span><span class="punctuation">&#123;</span>x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># function(x) &#123; 进行处理的部分 &#125;</span></span><br><span class="line"><span class="comment">##其实就是等同于下面</span></span><br><span class="line">a1<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">a1<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">a1<span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line">a1<span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 生信分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生信基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 Python进阶（包括pygame的使用） 笔记</title>
      <link href="/2024/06/11/01-Python/"/>
      <url>/2024/06/11/01-Python/</url>
      
        <content type="html"><![CDATA[<h1>项目实战 - 飞机大战</h1><hr><h2 id="游戏的坐标系"><a class="headerlink" href="#游戏的坐标系"></a>游戏的坐标系</h2><ul><li><p><strong>原点</strong> 在 <strong>左上角</strong> (0, 0)</p><ul><li><strong>x</strong> <strong>轴</strong> 水平方向向 <strong>右</strong>，逐渐增加</li><li><strong>y</strong> <strong>轴</strong> 垂直方向向 <strong>下</strong>，逐渐增加</li></ul><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240611172653522.png" alt="游戏的坐标系" style="zoom: 67%;"></li><li><p><code>pygame.Rect</code> 是一个比较特殊的类，内部只是封装了一些数字计算，用于描述 <strong>矩形区域</strong> <code>Rect(x, y, width, height) -&gt; Rect</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># pygame一定要做初始化的操作</span></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line">hero_rect = pygame.Rect(<span class="number">100</span>, <span class="number">500</span>, <span class="number">120</span>, <span class="number">125</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英雄的原点 %d %d&quot;</span> % (hero_rect.x, hero_rect.y))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英雄的尺寸 %d %d&quot;</span> % (hero_rect.width, hero_rect.height))</span><br><span class="line"><span class="comment"># size 属性会返回矩形区域的 (宽, 高) 元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d %d&quot;</span> % hero_rect.size)</span><br><span class="line"></span><br><span class="line">pygame.quit()</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="创建游戏主窗口"><a class="headerlink" href="#创建游戏主窗口"></a>创建游戏主窗口</h2><ul><li><p>pygame 专门提供了一个 <strong>模块</strong> <code>pygame.display</code> 用于创建、管理 <strong>游戏窗口</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>pygame.display.set_mode()</code></td><td>初始化游戏显示窗口</td></tr><tr><td><code>pygame.display.update()</code></td><td>刷新屏幕内容显示，稍后使用</td></tr></tbody></table></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建游戏的窗口 480 * 700</span></span><br><span class="line">screen = pygame.display.set_mode((<span class="number">480</span>, <span class="number">700</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">pygame.quit()</span><br></pre></td></tr></table></figure><hr><h2 id="实现图像绘制"><a class="headerlink" href="#实现图像绘制"></a>实现图像绘制</h2><ul><li><p><strong>图像文件</strong> 初始是保存在磁盘上的，如果需要使用，<strong>第一步</strong> 就需要 <strong>被加载到内存</strong></p></li><li><p>要在屏幕上 <strong>看到某一个图像的内容</strong>，需要按照三个步骤：</p><ul><li><p>使用 <code>pygame.image.load()</code> <strong>加载图像的数据</strong></p></li><li><p>使用 <strong>游戏屏幕</strong> 对象，调用 <code>blit</code> 方法 将图像绘制到指定位置</p></li><li><p>调用 <code>pygame.display.update()</code> 方法更新整个屏幕的显示</p></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240611174008908.png" alt="流程图" loading="lazy"></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示屏幕背景图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建游戏的窗口 480 * 700</span></span><br><span class="line">screen = pygame.display.set_mode((<span class="number">480</span>, <span class="number">700</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制背景图像</span></span><br><span class="line"><span class="comment"># 1&gt; 加载图像数据</span></span><br><span class="line">bg = pygame.image.load(<span class="string">&quot;./images/background.png&quot;</span>)</span><br><span class="line"><span class="comment"># 2&gt; blit 绘制图像</span></span><br><span class="line">screen.blit(bg, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># 3&gt; update 更新屏幕显示</span></span><br><span class="line">pygame.display.update()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 这里一般是监听鼠标和键盘的操作</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">pygame.quit()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制英雄图像</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建游戏的窗口 480 * 700</span></span><br><span class="line">screen = pygame.display.set_mode((<span class="number">480</span>, <span class="number">700</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1&gt; 加载图像</span></span><br><span class="line">hero = pygame.image.load(<span class="string">&quot;./images/me1.png&quot;</span>)</span><br><span class="line"><span class="comment"># 2&gt; 绘制在屏幕</span></span><br><span class="line">screen.blit(hero, (<span class="number">200</span>, <span class="number">500</span>))</span><br><span class="line"><span class="comment"># 3&gt; 更新显示</span></span><br><span class="line">pygame.display.update()</span><br><span class="line"></span><br><span class="line">pygame.quit()</span><br></pre></td></tr></table></figure><ul><li>上面两个代码可以合并</li></ul><hr><h2 id="游戏循环-和-游戏时钟"><a class="headerlink" href="#游戏循环-和-游戏时钟"></a>游戏循环 和 游戏时钟</h2><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240611175040528.png" alt="游戏的组成" loading="lazy"></p><p><strong>游戏循环的作用：</strong></p><ul><li>保证游戏 <strong>不会直接退出</strong></li><li><strong>变化图像位置</strong> —— 动画效果<ul><li>每隔 1 / 60 秒 移动一下所有图像的位置</li><li>调用 <code>pygame.display.update()</code> 更新屏幕显示</li></ul></li><li><strong>检测用户交互</strong> —— 按键、鼠标等…</li></ul><p><strong>游戏时钟</strong></p><ul><li><p>pygame 专门提供了一个类 <code>pygame.time.Clock</code> 可以非常方便的设置屏幕绘制速度 —— <strong>刷新帧率</strong></p></li><li><p>要使用 <strong>时钟对象</strong> 需要两步：</p><ul><li>在 <strong>游戏初始化</strong> 创建一个 <strong>时钟对象</strong></li><li>在 <strong>游戏循环</strong> 中让时钟对象调用 tick(帧率) 方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建游戏时钟对象</span></span><br><span class="line">clock = pygame.time.Clock()</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="comment"># 游戏循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 设置屏幕刷新帧率，每秒 60 次</span></span><br><span class="line">    clock.tick(<span class="number">60</span>)</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i += <span class="number">1</span>  <span class="comment"># 这里就1s钟打印60个数字</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="英雄的简单动画实现"><a class="headerlink" href="#英雄的简单动画实现"></a>英雄的简单动画实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 游戏的初始化</span></span><br><span class="line">pygame.init()</span><br><span class="line"><span class="comment"># 创建游戏的窗口 480 * 700</span></span><br><span class="line">screen = pygame.display.set_mode((<span class="number">480</span>, <span class="number">700</span>))</span><br><span class="line"><span class="comment"># 绘制背景图像</span></span><br><span class="line">bg = pygame.image.load(<span class="string">&quot;./images/background.png&quot;</span>)</span><br><span class="line">screen.blit(bg, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># pygame.display.update()</span></span><br><span class="line"><span class="comment"># 绘制英雄的飞机</span></span><br><span class="line">hero = pygame.image.load(<span class="string">&quot;./images/me1.png&quot;</span>)</span><br><span class="line">screen.blit(hero, (<span class="number">150</span>, <span class="number">300</span>))</span><br><span class="line"><span class="comment"># 可以在所有绘制工作完成之后，统一调用 update 方法</span></span><br><span class="line">pygame.display.update()</span><br><span class="line"><span class="comment"># 创建时钟对象</span></span><br><span class="line">clock = pygame.time.Clock()</span><br><span class="line"><span class="comment"># 1. 定义 rect 记录飞机的初始位置</span></span><br><span class="line">hero_rect = pygame.Rect(<span class="number">150</span>, <span class="number">300</span>, <span class="number">102</span>, <span class="number">126</span>)</span><br><span class="line"><span class="comment"># 游戏循环 -&gt; 意味着游戏的正式开始！</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 可以指定循环体内部的代码执行的频率</span></span><br><span class="line">    clock.tick(<span class="number">60</span>)</span><br><span class="line">    <span class="comment"># 2. 修改飞机的位置</span></span><br><span class="line">    hero_rect.y -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> hero_rect.y &lt; - hero_rect.height:</span><br><span class="line">        hero_rect.y = <span class="number">700</span></span><br><span class="line">    <span class="comment"># 3. 调用 blit 方法绘制图像</span></span><br><span class="line">    screen.blit(bg, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    screen.blit(hero, hero_rect)</span><br><span class="line">    <span class="comment"># 4. 调用 update 方法更新显示</span></span><br><span class="line">    pygame.display.update()</span><br><span class="line">pygame.quit()</span><br><span class="line"><span class="comment"># 如果飞机要循环飞行</span></span><br><span class="line"><span class="comment"># 4. 定义英雄的初始位置</span></span><br><span class="line">hero_rect = pygame.Rect(<span class="number">150</span>, <span class="number">500</span>, <span class="number">102</span>, <span class="number">126</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 可以指定循环体内部的代码执行的频率</span></span><br><span class="line">    clock.tick(<span class="number">60</span>)</span><br><span class="line">    <span class="comment"># 更新英雄位置</span></span><br><span class="line">    hero_rect.y -= <span class="number">1</span></span><br><span class="line">    <span class="comment"># 如果移出屏幕，则将英雄的顶部移动到屏幕底部</span></span><br><span class="line">    <span class="keyword">if</span> hero_rect.y &lt;= <span class="number">0</span>:</span><br><span class="line">        hero_rect.y = <span class="number">700</span></span><br><span class="line">    <span class="comment"># 绘制背景图片</span></span><br><span class="line">    screen.blit(bg, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="comment"># 绘制英雄图像</span></span><br><span class="line">    screen.blit(hero, hero_rect)</span><br><span class="line">    <span class="comment"># 更新显示</span></span><br><span class="line">    pygame.display.update()</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="在游戏循环中-监听-事件"><a class="headerlink" href="#在游戏循环中-监听-事件"></a>在游戏循环中 监听 事件</h2><ul><li>pygame 中通过 <code>pygame.event.get()</code> 可以获得 <strong>用户当前所做动作</strong> 的 <strong>事件列表</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 游戏的初始化</span></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建游戏的窗口 480 * 700</span></span><br><span class="line">screen = pygame.display.set_mode((<span class="number">480</span>, <span class="number">700</span>))</span><br><span class="line"><span class="comment"># 绘制背景图像</span></span><br><span class="line">bg = pygame.image.load(<span class="string">&quot;./images/background.png&quot;</span>)</span><br><span class="line">screen.blit(bg, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># pygame.display.update()</span></span><br><span class="line"><span class="comment"># 绘制英雄的飞机</span></span><br><span class="line">hero = pygame.image.load(<span class="string">&quot;./images/me1.png&quot;</span>)</span><br><span class="line">screen.blit(hero, (<span class="number">150</span>, <span class="number">300</span>))</span><br><span class="line"><span class="comment"># 可以在所有绘制工作完成之后，统一调用 update 方法</span></span><br><span class="line">pygame.display.update()</span><br><span class="line"><span class="comment"># 创建时钟对象</span></span><br><span class="line">clock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 定义 rect 记录飞机的初始位置</span></span><br><span class="line">hero_rect = pygame.Rect(<span class="number">150</span>, <span class="number">300</span>, <span class="number">102</span>, <span class="number">126</span>)</span><br><span class="line"><span class="comment"># 游戏循环 -&gt; 意味着游戏的正式开始！</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 可以指定循环体内部的代码执行的频率</span></span><br><span class="line">    clock.tick(<span class="number">60</span>)</span><br><span class="line">    <span class="comment"># 捕获事件</span></span><br><span class="line">    event_list = pygame.event.get()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(event_list) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(event_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 针对退出，我们可以在 while 循环中增加如下代码：</span></span><br><span class="line">    <span class="comment"># 就是可以按 x 来退出游戏</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> event_list:</span><br><span class="line">        <span class="comment"># 判断事件类型是否是退出事件</span></span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;游戏退出...&quot;</span>)</span><br><span class="line">        <span class="comment"># quit 卸载所有的模块</span></span><br><span class="line">        pygame.quit()</span><br><span class="line">        <span class="comment"># exit() 直接终止当前正在执行的程序</span></span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 修改飞机的位置</span></span><br><span class="line">    hero_rect.y -= <span class="number">1</span></span><br><span class="line">    <span class="comment"># 判断飞机的位置</span></span><br><span class="line">    <span class="keyword">if</span> hero_rect.y &lt;= <span class="number">0</span>:</span><br><span class="line">        hero_rect.y = <span class="number">700</span></span><br><span class="line">    <span class="comment"># 3. 调用 blit 方法绘制图像</span></span><br><span class="line">    screen.blit(bg, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    screen.blit(hero, hero_rect)</span><br><span class="line">    <span class="comment"># 4. 调用 update 方法更新显示</span></span><br><span class="line">    pygame.display.update()</span><br><span class="line"></span><br><span class="line">pygame.quit()</span><br></pre></td></tr></table></figure><hr><h2 id="精灵-和-精灵组"><a class="headerlink" href="#精灵-和-精灵组"></a>精灵 和 精灵组</h2><ul><li><strong>图像加载</strong>、<strong>位置变化</strong>、<strong>绘制图像</strong>，这些都需要分别处理</li><li>为了简化开发步骤，pygame 提供了两个类：<ul><li><code>pygame.sprite.Sprite</code> —— 存储 <strong>图像数据</strong> <strong>image</strong> 和 <strong>位置</strong> <strong>rect</strong> 的<strong>对象</strong></li><li><code>pygame.sprite.Group</code></li></ul></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240611180741957.png" alt="精灵与精灵组" loading="lazy"></p><hr><h2 id="项目解析"><a class="headerlink" href="#项目解析"></a>项目解析</h2><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240611182603571.png" alt="背景图的原理" loading="lazy"></p><p><strong>精灵组及精灵 部分代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 屏幕大小的常量对象</span></span><br><span class="line">SCREEN_RECT = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">480</span>, <span class="number">700</span>)</span><br><span class="line"><span class="comment"># 刷新的帧率</span></span><br><span class="line">FRAME_PER_SEC = <span class="number">30</span></span><br><span class="line"><span class="comment"># 创建敌机的定时器常量，为事件定义不同名字的常量，从而能够区分，从24算起</span></span><br><span class="line">CREATE_ENEMY_EVENT = pygame.USEREVENT</span><br><span class="line"><span class="comment"># 英雄发射子弹事件，为事件定义不同名字的常量，从而能够区分</span></span><br><span class="line">HERO_FIRE_EVENT = pygame.USEREVENT + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameSprite</span>(pygame.sprite.Sprite):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;飞机大战游戏精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, image_name, speed=<span class="number">1</span></span>):</span><br><span class="line">        <span class="comment"># 调用父类的初始化方法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义对象的属性</span></span><br><span class="line">        self.image = pygame.image.load(image_name)  <span class="comment"># 上传图像</span></span><br><span class="line">        self.rect = self.image.get_rect()  <span class="comment"># 获取图像的尺寸</span></span><br><span class="line">        self.speed = speed  <span class="comment"># 初始速度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 在屏幕的垂直方向上移动</span></span><br><span class="line">        self.rect.y += self.speed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Background</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;游戏背景精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, is_alt=<span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 调用父类方法实现精灵的创建(image/rect/speed)</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/background.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 判断是否是交替图像，如果是，需要设置初始位置</span></span><br><span class="line">        <span class="keyword">if</span> is_alt:</span><br><span class="line">            self.rect.y = -self.rect.height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 调用父类的方法实现</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 判断是否移出屏幕，如果移出屏幕，将图像设置到屏幕的上方</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class="line">            self.rect.y = -self.rect.height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enemy</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;敌机精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1. 调用父类方法，创建敌机精灵，同时指定敌机图片</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/enemy1.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 指定敌机的初始随机速度 1 ~ 3</span></span><br><span class="line">        self.speed = random.randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 指定敌机的初始随机位置</span></span><br><span class="line">        self.rect.bottom = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        max_x = SCREEN_RECT.width - self.rect.width  <span class="comment"># 屏幕的宽度减去自身宽度才是敌机的长度</span></span><br><span class="line">        self.rect.x = random.randint(<span class="number">0</span>, max_x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1. 调用父类方法，保持垂直方向的飞行</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 判断是否飞出屏幕，如果是，需要从精灵组删除敌机</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class="line">            <span class="comment"># print(&quot;飞出屏幕，需要从精灵组删除...&quot;)</span></span><br><span class="line">            <span class="comment"># kill方法可以将精灵从所有精灵组中移出，精灵就会被自动销毁</span></span><br><span class="line">            self.kill()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># print(&quot;敌机挂了 %s&quot; % self.rect)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hero</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;英雄精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 调用父类方法，设置image&amp;speed</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/me1.png&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 设置英雄的初始位置</span></span><br><span class="line">        self.rect.centerx = SCREEN_RECT.centerx</span><br><span class="line">        self.rect.bottom = SCREEN_RECT.bottom - <span class="number">120</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 创建子弹的精灵组</span></span><br><span class="line">        self.bullets = pygame.sprite.Group()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 英雄在水平方向移动</span></span><br><span class="line">        self.rect.x += self.speed</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 控制英雄不能离开屏幕</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.x &lt; <span class="number">0</span>:</span><br><span class="line">            self.rect.x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> self.rect.right &gt; SCREEN_RECT.right:</span><br><span class="line">            self.rect.right = SCREEN_RECT.right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fire</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;发射子弹...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 1. 创建子弹精灵</span></span><br><span class="line">            bullet = Bullet()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2. 设置精灵的位置</span></span><br><span class="line">            bullet.rect.bottom = self.rect.y - i * <span class="number">20</span></span><br><span class="line">            bullet.rect.centerx = self.rect.centerx</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 3. 将精灵添加到精灵组</span></span><br><span class="line">            self.bullets.add(bullet)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;子弹精灵&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 调用父类方法，设置子弹图片，设置初始速度</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/bullet1.png&quot;</span>, -<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 调用父类方法，让子弹沿垂直方向飞行</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断子弹是否飞出屏幕</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.bottom &lt; <span class="number">0</span>:</span><br><span class="line">            self.kill()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;子弹被销毁...&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>游戏实际代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> plane_sprites <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlaneGame</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;飞机大战主游戏&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏初始化&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 创建游戏的窗口</span></span><br><span class="line">        self.screen = pygame.display.set_mode(SCREEN_RECT.size)</span><br><span class="line">        <span class="comment"># 2. 创建游戏的时钟</span></span><br><span class="line">        self.clock = pygame.time.Clock()</span><br><span class="line">        <span class="comment"># 3. 调用私有方法，精灵和精灵组的创建,也是初始化</span></span><br><span class="line">        self.__create_sprites()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 设置定时器事件 - 创建敌机　设定敌机的刷新时间为1s，</span></span><br><span class="line">        <span class="comment"># 英雄子弹事件的刷新频率为0.5秒</span></span><br><span class="line">        pygame.time.set_timer(CREATE_ENEMY_EVENT, <span class="number">1000</span>)</span><br><span class="line">        pygame.time.set_timer(HERO_FIRE_EVENT, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__create_sprites</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建背景精灵和精灵组</span></span><br><span class="line">        bg1 = Background()</span><br><span class="line">        bg2 = Background(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        self.back_group = pygame.sprite.Group(bg1, bg2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建敌机的精灵组</span></span><br><span class="line">        self.enemy_group = pygame.sprite.Group()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建英雄的精灵和精灵组</span></span><br><span class="line">        self.hero = Hero()</span><br><span class="line">        self.hero_group = pygame.sprite.Group(self.hero)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_game</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏开始...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 1. 设置刷新帧率</span></span><br><span class="line">            self.clock.tick(FRAME_PER_SEC)</span><br><span class="line">            <span class="comment"># 2. 事件监听</span></span><br><span class="line">            self.__event_handler()</span><br><span class="line">            <span class="comment"># 3. 碰撞检测</span></span><br><span class="line">            self.__check_collide()</span><br><span class="line">            <span class="comment"># 4. 更新/绘制精灵组</span></span><br><span class="line">            self.__update_sprites()</span><br><span class="line">            <span class="comment"># 5. 更新显示</span></span><br><span class="line">            pygame.display.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__event_handler</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 判断是否退出游戏</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                PlaneGame.__game_over()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == CREATE_ENEMY_EVENT:</span><br><span class="line">                <span class="comment"># print(&quot;敌机出场...&quot;)</span></span><br><span class="line">                <span class="comment"># 创建敌机精灵</span></span><br><span class="line">                enemy = Enemy()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将敌机精灵添加到敌机精灵组</span></span><br><span class="line">                self.enemy_group.add(enemy)</span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == HERO_FIRE_EVENT:</span><br><span class="line">                self.hero.fire()</span><br><span class="line">            <span class="comment"># elif event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:</span></span><br><span class="line">            <span class="comment">#     print(&quot;向右移动...&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用键盘提供的方法获取键盘按键 - 按键元组</span></span><br><span class="line">        keys_pressed = pygame.key.get_pressed()</span><br><span class="line">        <span class="comment"># 判断元组中对应的按键索引值 1</span></span><br><span class="line">        <span class="keyword">if</span> keys_pressed[pygame.K_RIGHT]:</span><br><span class="line">            self.hero.speed = <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> keys_pressed[pygame.K_LEFT]:</span><br><span class="line">            self.hero.speed = -<span class="number">8</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.hero.speed = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__check_collide</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 子弹摧毁敌机</span></span><br><span class="line">        <span class="comment"># 两个精灵组 中 所有的精灵 的碰撞检测</span></span><br><span class="line">        <span class="comment"># pygame自带方法 sprite.groupcollide</span></span><br><span class="line">        pygame.sprite.groupcollide(self.hero.bullets, self.enemy_group, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 敌机撞毁英雄</span></span><br><span class="line">        <span class="comment"># 判断 某个精灵 和 指定精灵组 中的精灵的碰撞</span></span><br><span class="line">        enemies = pygame.sprite.spritecollide(self.hero, self.enemy_group, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断列表时候有内容</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(enemies) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 让英雄牺牲</span></span><br><span class="line">            self.hero.kill()</span><br><span class="line">            m = <span class="string">&quot;./sound/use_bomb.wav&quot;</span></span><br><span class="line">            pygame.mixer.music.load(m)</span><br><span class="line">            pygame.mixer.music.play()</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="comment"># 结束游戏</span></span><br><span class="line">            PlaneGame.__game_over()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新组到画布上</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__update_sprites</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        self.back_group.update()</span><br><span class="line">        self.back_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.enemy_group.update()</span><br><span class="line">        self.enemy_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.hero_group.update()</span><br><span class="line">        self.hero_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.hero.bullets.update()</span><br><span class="line">        self.hero.bullets.draw(self.screen)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__game_over</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">        pygame.quit()</span><br><span class="line">        exit()  <span class="comment">#进程结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建游戏对象</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    game = PlaneGame()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动游戏</span></span><br><span class="line">    game.start_game()</span><br></pre></td></tr></table></figure><hr><h1>UDP 与 TCP 通信</h1><p><strong>路由查看</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">route 可以查看任何路由</span></span><br><span class="line">route -n</span><br></pre></td></tr></table></figure><p><strong>内核IP路由表</strong></p><table><thead><tr><th>目标</th><th>网关</th><th>子网掩码</th></tr></thead><tbody><tr><td>0.0.0.0</td><td>192.168.19.2</td><td>0.0.0.0</td></tr><tr><td>169.254.0.0</td><td>0.0.0.0</td><td>255.255.0.0</td></tr><tr><td>192.168.19.0</td><td>0.0.0.0</td><td>255.255.255.0</td></tr></tbody></table><ul><li>0.0.0.0 代表任意目的地</li><li>网关就是转发数据的设备</li></ul><p><strong>端口号的范围</strong>：端口号只有整数，范围是 <strong>0 到 65535</strong></p><p><strong>知名端口</strong>：</p><ul><li>22 端口分配给 ssh</li><li>80 端口分配给HTTP</li></ul><p><strong>查看端口状态：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep tcp  # 查看本地tcp端口情况</span><br><span class="line"></span><br><span class="line">sudo losf -i tcp:22  # 查看tcp的22号端口被哪个进程使用了</span><br></pre></td></tr></table></figure><hr><h2 id="socket"><a class="headerlink" href="#socket"></a>socket</h2><ul><li>创建 socket<ul><li>函数 <code>socket.socket</code> 创建一个 socket，该函数带有两个参数：<ul><li>Address Family：可以选择 <code>AF_INET</code>（用于 Internet 进程间通信）或者AF_UNIX（用于同一台机器进程间通信），实际工作中常用 AF_INET</li><li>Type：套接字类型，可以是<code>SOCK_STREAM</code>（流式套接字，主要用于TCP协议）或者 <code>SOCK_DGRAM</code>（数据报套接字，主要用于 UDP 协议）<ul><li>TCP 与 UDP 都是全双工通信</li></ul></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个tcp socket（tcp 套接字）</span></span><br><span class="line">s1 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个udp socket（udp 套接字）</span></span><br><span class="line">s2 = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br></pre></td></tr></table></figure><h2 id="UDP网络程序-发送与接收数据"><a class="headerlink" href="#UDP网络程序-发送与接收数据"></a>UDP网络程序 - 发送与接收数据</h2><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240612155029824.png" alt="UDP 通信流程图" loading="lazy"></p><ul><li><p>UDP 服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建 udp 套接字</span></span><br><span class="line">udp_socket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 准备接收方的地址</span></span><br><span class="line"><span class="comment">#   1&gt; 目的ip的地址：192.168.88.129</span></span><br><span class="line"><span class="comment">#   2&gt; 目的端口：8080，这个要写1024以上端口</span></span><br><span class="line">dest_addr = (<span class="string">&quot;100.65.20.204&quot;</span>, <span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 失败直接抛弃异常</span></span><br><span class="line">udp_socket.bind(dest_addr)</span><br><span class="line"></span><br><span class="line">temp = udp_socket.recvfrom(<span class="number">100</span>)  <span class="comment"># 100 代表接的长度</span></span><br><span class="line"><span class="built_in">print</span>(temp[<span class="number">0</span>])  <span class="comment"># 对应的字节流</span></span><br><span class="line"><span class="comment"># print(temp[0].decode(&quot;utf8&quot;))</span></span><br><span class="line"><span class="built_in">print</span>(temp[<span class="number">1</span>])  <span class="comment"># 对方的ip地址和端口号</span></span><br><span class="line"></span><br><span class="line">udp_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">接收到的数据：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">b&#x27;hello&#x27;</span></span><br><span class="line"><span class="string">(&#x27;100.65.20.204&#x27;, 56881)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>UDP 客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建 udp 套接字</span></span><br><span class="line">udp_socket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">dest_addr = (<span class="string">&quot;100.65.20.204&quot;</span>, <span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&quot;hello&quot; 变成字节流</span></span><br><span class="line">udp_socket.sendto(<span class="string">b&quot;hello&quot;</span>, dest_addr)</span><br><span class="line"><span class="comment"># udp_socket.sendto(&quot;你好&quot;.encode(&quot;utf8&quot;), dest_addr)</span></span><br><span class="line"></span><br><span class="line">udp_socket.close()</span><br></pre></td></tr></table></figure></li><li><p>当UDP接收（recvfrom）的字节数少于发送的字节数</p><ul><li>windows就会报错</li><li>Linux是不会报错，没有拿到的数据完全丢弃</li></ul></li><li><p><code>sendto</code> 和 <code>recvfrom</code> ，次数完全对等</p></li></ul><p><strong>云服务器注意事项：</strong></p><ul><li>服务端 bind 的时候要绑定内网地址，就是<code>ifconfig</code></li><li>客户端发送的时候的 ip 地址是公网地址</li><li>要开启端口</li></ul><hr><h2 id="TCP"><a class="headerlink" href="#TCP"></a>TCP</h2><ol><li>面向连接</li><li>可靠传输（超时重传）</li><li>基于字节流</li></ol><h3 id="TCP-与UDP的不同点"><a class="headerlink" href="#TCP-与UDP的不同点"></a>TCP 与UDP的不同点</h3><ul><li>面向连接（确认有创建三方交握，连接已创建才作为传输）</li><li>有序数据传输</li><li>重发丢失的数据包</li><li>舍弃重复的数据包</li><li>无差错的数据传输</li><li>阻塞 / 流量控制</li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240612192512899.png" alt="TCP 通信流程" loading="lazy"></p><ul><li><p>TCP 服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcp的服务端</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    <span class="comment"># SOCK_STREAM代表的是tcp的socket</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&quot;192.168.1.107&quot;</span>, <span class="number">2000</span>)</span><br><span class="line">    s.bind(addr)  <span class="comment"># 绑定，端口没有激活</span></span><br><span class="line">    s.listen(<span class="number">128</span>)  <span class="comment"># listen时，端口才激活</span></span><br><span class="line">    new_client, client_addr = s.accept()</span><br><span class="line">    <span class="comment"># print(client_addr)  # (&#x27;192.168.1.107&#x27;, 61371)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接下来就可以进行send和recv操作</span></span><br><span class="line">    new_client.send(<span class="string">b&quot;I am server machine&quot;</span>)</span><br><span class="line">    data = new_client.recv(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    new_client.close()</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tcp_server()</span><br></pre></td></tr></table></figure></li><li><p>TCP 客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&quot;192.168.1.107&quot;</span>, <span class="number">2000</span>)</span><br><span class="line">    client.connect(addr)</span><br><span class="line">    <span class="comment"># 先接收</span></span><br><span class="line">    data = client.recv(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    client.send(<span class="string">b&quot;Hello World&quot;</span>)</span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tcp_client()</span><br></pre></td></tr></table></figure></li></ul><h3 id="文件的下载"><a class="headerlink" href="#文件的下载"></a>文件的下载</h3><ul><li><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_content</span>(<span class="params">file_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取文件内容&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.read()</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有下载的文件 %s&quot;</span> % file_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请按照如下方式进行：python3 xxx.py 7890&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 运行方式为：python3 xxx.py 7890</span></span><br><span class="line">        port = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建socket</span></span><br><span class="line">    tcp_server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 本地信息</span></span><br><span class="line">    address = (<span class="string">&quot;192.168.1.107&quot;</span>, port)</span><br><span class="line">    <span class="comment"># 绑定本地信息</span></span><br><span class="line">    tcp_server_socket.bind(address)</span><br><span class="line">    <span class="comment"># 将主动套接字变为被动套接字</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 等待客户端的连接，即为这个客户端发送文件</span></span><br><span class="line">        client_socket, clientAddr = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 接收对方发过来的数据</span></span><br><span class="line">        recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收1024个字节</span></span><br><span class="line">        file_name = recv_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;对方请求下载的文件名为:%s&quot;</span> % file_name)</span><br><span class="line">        file_content = get_file_content(file_name)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 发送文件的数据给客户端</span></span><br><span class="line">        <span class="comment"># 因为获取打开文件时是以rb方式打开，所以file_content中的数据时以二进制的格式，因此不需要encoding</span></span><br><span class="line">        <span class="keyword">if</span> file_content:</span><br><span class="line">            client_socket.send(file_content)</span><br><span class="line">        <span class="comment"># 关闭这个套接字</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭监听套接字</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"> <span class="comment"># 在cmd中执行 python xxx.py 2000</span></span><br></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建socket</span></span><br><span class="line">    tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 目的信息</span></span><br><span class="line">    <span class="comment"># server_ip = input(&quot;请输入服务器ip：&quot;)</span></span><br><span class="line">    server_ip = <span class="string">&quot;192.168.1.107&quot;</span></span><br><span class="line">    <span class="comment"># server_port = int(input(&quot;请输入服务器port：&quot;))</span></span><br><span class="line">    server_port = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 链接服务器</span></span><br><span class="line">    tcp_client_socket.connect((server_ip, server_port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入需要下载的文件名</span></span><br><span class="line">    file_name = <span class="built_in">input</span>(<span class="string">&quot;请输入要下载的文件名：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送文件下载请求</span></span><br><span class="line">    tcp_client_socket.send(file_name.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收对方发来的数据，最大接收1024个字节（1K）</span></span><br><span class="line">    recv_data = tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> recv_data:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;[接收]&quot;</span> + file_name, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(recv_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭套接字</span></span><br><span class="line">    tcp_client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="TCP-的三次握手"><a class="headerlink" href="#TCP-的三次握手"></a>TCP 的三次握手</h3><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240612215113912.png" alt="TCP 的三次握手" loading="lazy"></p><ul><li>主机A 是client，主机B 是server</li><li>图示中的右边的 ACK=x+1 是 ack=x+1</li><li>为什么TCP两次握手不可以？<ul><li>两次握手会发生死锁，因为如果两次握手，client 关机了，server一直认为与client连接中，就会造成死锁</li></ul></li></ul><h3 id="TCP-的四次握手"><a class="headerlink" href="#TCP-的四次握手"></a>TCP 的四次握手</h3><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240613104352022.png" alt="TCP 的四次握手" loading="lazy"></p><ul><li>有 4 个缓冲区，需要 4 个缓冲区</li><li>Time-wait：是用来判断第四次挥手对方有没有收到，就是在2MSL时间内，如果没有收到任何消息，默认对方收到了第四条消息</li></ul><h3 id="TCP-的长连接和短连接"><a class="headerlink" href="#TCP-的长连接和短连接"></a>TCP 的长连接和短连接</h3><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240613171041261.png" alt="TCP 通信" loading="lazy"></p><h4 id="TCP-短连接（无状态）"><a class="headerlink" href="#TCP-短连接（无状态）"></a>TCP 短连接（无状态）</h4><ul><li><p>模拟一种 TCP 短连接的情况:</p><ol><li>client 向 server 发起连接请求</li><li>server 接到请求，双方建立连接</li><li>client 向 server 发送消息</li><li>server 回应 client</li><li>一次读写完成，此时双方任何一个都可以发起 close 操作</li></ol></li><li><p>短连接一般只会在 client/server 间传递一次读写操作</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240613171608253.png" alt="短连接" loading="lazy"></p></li></ul><h4 id="TCP-长连接（游戏、即使通信）"><a class="headerlink" href="#TCP-长连接（游戏、即使通信）"></a>TCP 长连接（游戏、即使通信）</h4><ul><li>模拟一种 TCP 长连接的情况:<ol><li>client 向 server 发起连接</li><li>server 接到请求，双方建立连接</li><li>client 向 server 发送消息</li><li>server 回应 client</li><li>一次读写完成，连接不关闭</li><li>后续读写操作…</li><li>长时间操作之后 client 发起关闭请求</li></ol></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240613171635004.png" alt="长连接" loading="lazy"></p><hr><h2 id="TCP-IP-概述"><a class="headerlink" href="#TCP-IP-概述"></a>TCP/IP 概述</h2><ul><li>OSI 参考模型：（应 - 表 - 会 - 传 - 网 - 数 - 物）</li><li>tcp/ip 模型 4层：<ul><li><strong>应用层</strong> { <strong>http 超文本传输协议</strong> ftp 文件传输协议 telnet 远程登录 ssh 安全外壳协议 smtp 简单邮件发送 pop3 收邮件 }</li><li><strong>传输层</strong> { <strong>tcp 传输控制协议</strong>，<strong>udp用户数据包协议</strong> }</li><li><strong>网络层</strong> { <strong>ip 网际互联协议</strong>，<strong>icmp 网络控制消息协议</strong>，igmp 网络组管理协议 }</li><li><strong>网络接口层</strong> { <strong>arp地址转换协议</strong>，<strong>rarp 反向地址转换协议</strong>，mpls多协议标签交换 }</li></ul></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240613112223706.png" alt="TCP/IP 协议传输示意图" loading="lazy"></p><ul><li><p>分时复用：数据包进行排队，eg：一根网线能够同时上网</p></li><li><p><strong>ARP（地址转换协议）</strong>：用于获得同一物理网络中的硬件主机地址。是设备通过自己知道的 IP 地址来获得自己不知道的物理地址的协议。（只能在局域网内进行运行的）</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240613142035477.png" alt="ARP" loading="lazy"></p></li><li><p><strong>RARP</strong>（Reverse Address Resolution Protocol）：反向地址转换协议，允许局域网的物理机器从网关服务器的 ARP 表或者缓存上请求其 IP 地址。（只能在局域网内进行运行的）</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240613143928068.png" alt="ARP数据报格式" loading="lazy"></p><ul><li>op字段为 1 表示ARP请求，op字段为 2 表示ARP应答</li></ul></li><li><p><strong>IP</strong>：（网际互联协议）负责在主机和网络之间寻址和路由数据包。</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240613144316859.png" alt="IP 数据包格式" loading="lazy"></p><ul><li>版本号：长度 4 bit。一般为 0100（IPv4）、0110（IPv6）</li><li>IP 包头长度：长度为 4 bit。用于描述 IP 包头的长度</li><li>16位报文总长度：长度 16 比特。 以字节为单位计算的 IP 包的长度（包括头部和数据），所以IP 包<strong>最大长度 65535 字节</strong>。</li></ul></li><li><p><strong>ICMP</strong>：（网络控制消息协议）用于发送报告有关数据包的传送错误的协议。</p><ul><li>Ping 命令的过程实际上就是ICMP协议工作的过程</li></ul></li><li><p><strong>TCP</strong>：（传输控制协议）为应用程序提供可靠（<strong>可靠数据传输表现在</strong>：<strong>序列号、确认重传、定时器、滑动窗口</strong>等）的通信连接。适合于一次传输大批数据的情况。并适用于要求得到响应的应用程序</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240613153905388.png" alt="TCP 数据报文头部" loading="lazy"></p><ul><li><strong>源端口、目的端口</strong>：16 位长。标识出远端和本地的端口号</li><li><strong>顺序号</strong>：32 位长。标识发送的数据报的顺序</li><li><strong>确认号</strong>：32 位长。希望收到的下一个数据报的序列号</li><li><strong>TCP 头长</strong>：4 位长。表明 TCP 头中包含多少个 32 位字。就是有多少个字节</li><li><strong>URG</strong>：紧急指针（urgent pointer）有效，紧急指针指出在本报文段中的紧急数据的最后一个字节的序号</li><li><strong>ACK</strong>：ACK 位置 1 表明确认号是合法的。如果 ACK 为 0，那么数据报不包含确认信息，确认字段被省略</li><li><strong>PSH</strong>：表示是带有 PUSH 标志的数据。接收方因此请求数据报一到便可送往应用 程序而不必等到缓冲区装满时才发送。当 PSH=1 时，则报文段会被尽快地交付给 目的方，不会对这样的报文段使用缓存策略</li><li><strong>RST</strong>：用于复位由于主机崩溃或其他原因而出现的错误的连接。还可以用于拒绝 非法的数据报或拒绝连接请求。当 RST 为 1 时，表明 TCP 连接中出现了严重的差 错，必须释放连接，然后再重新建立连接。</li><li><strong>SYN</strong>：用于建立连接。当 SYN=1 时，表示发起一个连接请求。</li><li><strong>FIN</strong>：用于释放连接。当 FIN=1 时，表明此报文段的发送端的数据已发送完成， 并要求释放连接</li><li><strong>窗口大小</strong>：16 位长。窗口大小字段表示在确认了字节之后还可以发送多少个字节。此字段用来进行流量控制。单位为字节数，这个值是本机期望一次接收的字节数</li></ul></li><li><p><strong>MTU</strong> 与 <strong>MSS</strong></p><ul><li>MTU 是网络传输最大报文包，MSS 是网络传输数据最大值</li><li>MSS 加包头数据就等于 MTU</li><li>总之，MTU 就是总的最后发出去的报文大小。MSS 就是你需要发出去的数据大小</li></ul></li><li><p><strong>UDP</strong>：（用户数据包协议）提供了无连接通信，且不对传送包进行可靠的保证。适合于一次传输少量数据。</p><ul><li>不需要像 TCP 那样通过 三次握手来建立一个连接。同时，一个 UDP 应用可同时作为应用的客户或服务器方</li><li>比 TCP 协议更为高效，也能更好地解决实时性的问题</li><li>从理论上说，包含报头在内的数据报的<strong>最大长度为 65535 字节</strong></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240613161426439.png" alt="UDP 报文格式" loading="lazy"></p></li><li><p>TCP 和 UDP，一台机器向另外一台机器发送了 3 个包，对方可能收到几个包？</p><ul><li>TCP &gt;=3：3 个到任意多个</li><li>UDP：0 到 3 个</li></ul></li><li><p>C/S 模式 和 B/S 模式</p></li></ul><hr><h2 id="DDos（SYN-Flooding）攻击"><a class="headerlink" href="#DDos（SYN-Flooding）攻击"></a>DDos（SYN Flooding）攻击</h2><ul><li><p>全称是 <strong>分布式拒绝服务攻击</strong></p></li><li><p>原理：我们构造网络包，源地址随机构建，意味着当 Server 接到 SYN 包时，应答 ack 和 syn 时不会得到回应。在这种情况下， Server 端，内核就会维持一个很大的队列来管理这些半连接。 当半连接足够多的时候，就会导致新来的正常连接请求得不到响应， 也就是所谓的 DDos 攻击</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240613181341733.png" alt="DDos攻击流程" loading="lazy"></p></li><li><p>SYN Flood 攻击防护手段：</p><ul><li>tcp_max_syn_backlog： 半连接队列长度</li><li>tcp_synack_retries: syn+ack 的重传次数</li><li>tcp_syncookies : syn cookies</li></ul></li><li><p>一般的防御措施：就是就是减小 SYN+ACK 重传次数，增加半连接队列长度，启用 syn cookie。 不过在高强度攻击面前，调优 tcp_syn_retries 和 tcp_max_syn_backlog 并不能解决根本问题，更有效的防御手段是激活 tcp_syncookies，在连接真正创建起来之前，它并不会立刻给请求分配数据区存储连接状态，而是通过构建一个带签名的序号来屏蔽伪造请求。</p></li></ul><hr><h2 id="网络编程-epoll-的使用"><a class="headerlink" href="#网络编程-epoll-的使用"></a>网络编程 - epoll 的使用</h2><ul><li>epoll 是对 select、poll 模型的改进，提高了网络编程的性能，广泛应用于大规模并发请求的 C/S 架构中</li><li>触发方式：边缘触发/水平触发，只适用于 Unix/Linux 操作系</li><li>epoll 的官方名字：多路复用</li></ul><h3 id="下面的代码一人只能轮流说一句"><a class="headerlink" href="#下面的代码一人只能轮流说一句"></a>下面的代码一人只能轮流说一句</h3><ul><li><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp的服务端</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    <span class="comment"># SOCK_STREAM代表的是tcp的socket</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&quot;100.65.1.86&quot;</span>, <span class="number">2000</span>)</span><br><span class="line">    s.bind(addr)  <span class="comment"># 绑定，端口没有激活</span></span><br><span class="line">    s.listen(<span class="number">128</span>)  <span class="comment"># listen时，端口才激活</span></span><br><span class="line">    new_client, client_addr = s.accept()</span><br><span class="line">    <span class="comment"># print(client_addr)  # (&#x27;192.168.1.107&#x27;, 61371)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 服务器端先接收</span></span><br><span class="line">        data = new_client.recv(<span class="number">128</span>)</span><br><span class="line">        <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        data = <span class="built_in">input</span>()</span><br><span class="line">        new_client.send(data.encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    new_client.close()</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tcp_server()</span><br></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&quot;100.65.1.86&quot;</span>, <span class="number">2000</span>)</span><br><span class="line">    client.connect(addr)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 先说话</span></span><br><span class="line">        data = <span class="built_in">input</span>()</span><br><span class="line">        client.send(data.encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">        data = client.recv(<span class="number">128</span>)  <span class="comment"># 收对方说的话</span></span><br><span class="line">        <span class="built_in">print</span>(data.decode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tcp_client()</span><br></pre></td></tr></table></figure></li></ul><p>上面这段代码每次只能传/收一句话的原因：</p><ol><li><code>input()</code>：标准输入缓存区</li><li><code>recv()</code>：接收缓冲区</li></ol><h3 id="epoll-的接口及使用"><a class="headerlink" href="#epoll-的接口及使用"></a>epoll 的接口及使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> select  <span class="comment">#  导入 select 模块</span></span><br><span class="line"></span><br><span class="line">epoll = select.epoll()  <span class="comment">#  初始化，创建一个 epoll 对象</span></span><br><span class="line"></span><br><span class="line">epoll.register(文件描述符, 事件类型)   <span class="comment"># 注册要监控的文件句柄和事件</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">事件类型:</span></span><br><span class="line"><span class="string">select.EPOLLIN 可读事件</span></span><br><span class="line"><span class="string">select.EPOLLOUT 可写事件</span></span><br><span class="line"><span class="string">select.EPOLLERR 错误事件</span></span><br><span class="line"><span class="string">select.EPOLLHUP 客户端断开事件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">epoll.unregister(文件描述符)  <span class="comment"># 销毁文件描述符</span></span><br><span class="line"></span><br><span class="line">epoll.poll(timeout, maxevents) </span><br><span class="line"><span class="comment"># 当文件句柄发生变化，则会以列表的形式主动报告给用户进程, timeout为超时时间，默认为-1，即一直等待直到文件句柄发生变化，如果指定为 1，那么 epoll 每 1 秒汇报一次当前文件句柄的变化情况，如果无变化则返回空</span></span><br><span class="line"><span class="comment"># maxevents：指监控的个数</span></span><br><span class="line"><span class="comment"># eg：fd, event = epoll.poll(-1)  会返回两个参数</span></span><br><span class="line"></span><br><span class="line">epoll.fileno()  <span class="comment"># 返回 epoll 的控制文件描述符(Return the epoll control file descriptor)</span></span><br><span class="line"></span><br><span class="line">epoll.modfiy(fineno,event) <span class="comment"># fineno 为文件描述符 event 为事件类型 作用是修改文件描述符所对应的事件</span></span><br><span class="line"></span><br><span class="line">epoll.fromfd(fileno) <span class="comment"># 从 1 个指定的文件描述符创建 1 个 epoll 对象</span></span><br><span class="line"></span><br><span class="line">epoll.close() <span class="comment"># 关闭 epoll 对象的控制文件描述符</span></span><br></pre></td></tr></table></figure><h3 id="epoll-实现即时聊天"><a class="headerlink" href="#epoll-实现即时聊天"></a>epoll 实现即时聊天</h3><ul><li><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp的服务端</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    <span class="comment"># SOCK_STREAM代表的是tcp的socket</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&quot;&quot;</span>, <span class="number">2000</span>)</span><br><span class="line">    s.bind(addr)  <span class="comment"># 绑定，端口没有激活</span></span><br><span class="line">    s.listen(<span class="number">128</span>)  <span class="comment"># listen时，端口才激活</span></span><br><span class="line">    new_client, client_addr = s.accept()</span><br><span class="line">    <span class="comment"># print(client_addr)  # (&#x27;192.168.1.107&#x27;, 61371)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化了一个epoll对象</span></span><br><span class="line">    epoll = select.epoll()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文件描述符</span></span><br><span class="line">    <span class="comment"># print(new_client.fileno())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 让epoll 监控 new_client</span></span><br><span class="line">    epoll.register(new_client.fileno(), select.EPOLLIN)</span><br><span class="line">    epoll.register(sys.stdin.fileno(), select.EPOLLIN)  <span class="comment"># sys.stdin.fileno() 指标准输入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填到写到events里面</span></span><br><span class="line">        <span class="comment"># 这个events里面存储的是元组，为（fd, 事件）</span></span><br><span class="line">        events = epoll.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> fd, event <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> fd == new_client.fileno():</span><br><span class="line">                data = new_client.recv(<span class="number">128</span>)</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;对端断开&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">elif</span> fd == sys.stdin.fileno():</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    data = <span class="built_in">input</span>()  <span class="comment"># 服务器端说话，发给对方</span></span><br><span class="line">                <span class="keyword">except</span> EOFError:  <span class="comment"># ctrl + d 后服务器断开 </span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;I wanna go&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                new_client.send(data.encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    new_client.close()</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tcp_server()</span><br></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp的客户端</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line">    <span class="keyword">if</span> sys.argv == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (sys.argv[<span class="number">1</span>], <span class="number">2000</span>)</span><br><span class="line">    client.connect(addr)</span><br><span class="line">    <span class="comment"># 初始化了一个epoll对象</span></span><br><span class="line">    epoll = select.epoll()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文件描述符</span></span><br><span class="line">    <span class="comment"># print(new_client.fileno())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 让epoll 监控 new_client</span></span><br><span class="line">    epoll.register(client.fileno(), select.EPOLLIN)</span><br><span class="line">    epoll.register(sys.stdin.fileno(), select.EPOLLIN)  <span class="comment"># sys.stdin.fileno() 指标准输入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填到写到events里面</span></span><br><span class="line">        <span class="comment"># 这个events里面存储的是元组，为（fd, 事件）</span></span><br><span class="line">        events = epoll.poll(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> fd, event <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> fd == client.fileno():</span><br><span class="line">                data = client.recv(<span class="number">128</span>)</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;对端断开&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">elif</span> fd == sys.stdin.fileno():</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    data = <span class="built_in">input</span>()  <span class="comment"># 客户端端说话，发给对方</span></span><br><span class="line">                <span class="keyword">except</span> EOFError:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;I wanna go&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                client.send(data.encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tcp_client()</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="epoll-实现客户端断开后可以再次连接"><a class="headerlink" href="#epoll-实现客户端断开后可以再次连接"></a>epoll 实现客户端断开后可以再次连接</h3><ul><li><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 聊天室的服务器端</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    <span class="comment"># SOCK_STREAM代表的是tcp的socket</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&quot;&quot;</span>, <span class="number">2000</span>)</span><br><span class="line">    s.bind(addr)  <span class="comment"># 绑定，端口没有激活</span></span><br><span class="line">    s.listen(<span class="number">128</span>)  <span class="comment"># listen时，端口才激活</span></span><br><span class="line">    <span class="comment"># new_client, client_addr = s.accept()</span></span><br><span class="line">    <span class="comment"># print(client_addr)  # (&#x27;192.168.1.107&#x27;, 61371)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化了一个epoll对象</span></span><br><span class="line">    epoll = select.epoll()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文件描述符</span></span><br><span class="line">    <span class="comment"># print(new_client.fileno())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 让epoll 监控 new_client</span></span><br><span class="line">    epoll.register(s.fileno(), select.EPOLLIN)</span><br><span class="line">    epoll.register(sys.stdin.fileno(), select.EPOLLIN)  <span class="comment"># sys.stdin.fileno() 指标准输入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填到写到events里面</span></span><br><span class="line">        <span class="comment"># 这个events里面存储的是元组，为（fd, 事件）</span></span><br><span class="line">        events = epoll.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> fd, event <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> fd == s.fileno():</span><br><span class="line">                <span class="comment"># 有客户端连接，就连上</span></span><br><span class="line">                new_client, client_addr = s.accept()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Connected by&quot;</span>, client_addr)</span><br><span class="line">                epoll.register(new_client.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> fd == new_client.fileno():</span><br><span class="line">                data = new_client.recv(<span class="number">128</span>)</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;对端断开&quot;</span>)</span><br><span class="line">                    <span class="comment"># 对端断开要解除监控</span></span><br><span class="line">                    <span class="comment"># epoll.unregister(new_client.fileno())</span></span><br><span class="line">                    new_client.close()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> fd == sys.stdin.fileno():</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    data = <span class="built_in">input</span>()  <span class="comment"># 服务器端说话，发给对方</span></span><br><span class="line">                <span class="keyword">except</span> EOFError:  <span class="comment"># ctrl + d 后服务器断开</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;I wanna go&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                new_client.send(data.encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    new_client.close()</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tcp_server()</span><br></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp的客户端</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_client</span>():</span><br><span class="line">    <span class="keyword">if</span> sys.argv == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (sys.argv[<span class="number">1</span>], <span class="number">2000</span>)</span><br><span class="line">    client.connect(addr)</span><br><span class="line">    <span class="comment"># 初始化了一个epoll对象</span></span><br><span class="line">    epoll = select.epoll()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文件描述符</span></span><br><span class="line">    <span class="comment"># print(new_client.fileno())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 让epoll 监控 new_client</span></span><br><span class="line">    epoll.register(client.fileno(), select.EPOLLIN)</span><br><span class="line">    epoll.register(sys.stdin.fileno(), select.EPOLLIN)  <span class="comment"># sys.stdin.fileno() 指标准输入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填到写到events里面</span></span><br><span class="line">        <span class="comment"># 这个events里面存储的是元组，为（fd, 事件）</span></span><br><span class="line">        events = epoll.poll(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> fd, event <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> fd == client.fileno():</span><br><span class="line">                data = client.recv(<span class="number">128</span>)</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;对端断开&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">elif</span> fd == sys.stdin.fileno():</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    data = <span class="built_in">input</span>()  <span class="comment"># 客户端端说话，发给对方</span></span><br><span class="line">                <span class="keyword">except</span> EOFError:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;I wanna go&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                client.send(data.encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tcp_client()</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="聊天室的实现"><a class="headerlink" href="#聊天室的实现"></a>聊天室的实现</h3><ul><li><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 聊天室的服务器端</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_server</span>():</span><br><span class="line">    <span class="comment"># SOCK_STREAM代表的是tcp的socket</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    addr = (<span class="string">&quot;&quot;</span>, <span class="number">2000</span>)</span><br><span class="line">    s.bind(addr)  <span class="comment"># 绑定，端口没有激活</span></span><br><span class="line">    s.listen(<span class="number">128</span>)  <span class="comment"># listen时，端口才激活</span></span><br><span class="line">    <span class="comment"># new_client, client_addr = s.accept()</span></span><br><span class="line">    <span class="comment"># print(client_addr)  # (&#x27;192.168.1.107&#x27;, 61371)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化了一个epoll对象</span></span><br><span class="line">    epoll = select.epoll()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文件描述符</span></span><br><span class="line">    <span class="comment"># print(new_client.fileno())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 让epoll 监控 new_client</span></span><br><span class="line">    epoll.register(s.fileno(), select.EPOLLIN)</span><br><span class="line">    epoll.register(sys.stdin.fileno(), select.EPOLLIN)  <span class="comment"># sys.stdin.fileno() 指标准输入</span></span><br><span class="line">    client_list = []  <span class="comment"># 存储所有的client对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 谁的缓冲区有数据，就填到写到events里面</span></span><br><span class="line">        <span class="comment"># 这个events里面存储的是元组，为（fd, 事件）</span></span><br><span class="line">        events = epoll.poll(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> fd, event <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">if</span> fd == s.fileno():</span><br><span class="line">                <span class="comment"># 有客户端连接，就连上，得到客户端对应的new_client，放入列表，并注册它</span></span><br><span class="line">                new_client, client_addr = s.accept()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Connected by&quot;</span>, client_addr)</span><br><span class="line">                client_list.append(new_client)</span><br><span class="line">                epoll.register(new_client.fileno(), select.EPOLLIN)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                remove_client = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">for</span> client <span class="keyword">in</span> client_list:  <span class="comment"># 遍历所有的客户端对象</span></span><br><span class="line">                    <span class="keyword">if</span> client.fileno() == fd:</span><br><span class="line">                        data = client.recv(<span class="number">128</span>)  <span class="comment"># 接收对应客户端发过来的数据</span></span><br><span class="line">                        <span class="keyword">if</span> data:  <span class="comment"># 拿到数据，群发给其他的客户端</span></span><br><span class="line">                            <span class="keyword">for</span> other_client <span class="keyword">in</span> client_list:</span><br><span class="line">                                <span class="keyword">if</span> other_client <span class="keyword">is</span> client:</span><br><span class="line">                                    <span class="keyword">continue</span></span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    other_client.send(data)</span><br><span class="line">                        <span class="keyword">else</span>:  <span class="comment"># 断开了就记录一下</span></span><br><span class="line">                            remove_client = client</span><br><span class="line">                <span class="keyword">if</span> remove_client <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot; %s Client disconnected&quot;</span> % remove_client.fileno())</span><br><span class="line">                    client_list.remove(remove_client)</span><br><span class="line">                    epoll.unregister(remove_client.fileno())</span><br><span class="line">                    remove_client.close()</span><br><span class="line"></span><br><span class="line">    new_client.close()</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tcp_server()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>客户端</p><ul><li>同上面的客户端</li></ul></li></ul><hr><h3 id="非阻塞编程"><a class="headerlink" href="#非阻塞编程"></a>非阻塞编程</h3><ul><li>同步阻塞<ul><li><strong>正常的 recv，recvfrom 读取数据会阻塞</strong></li></ul></li><li>同步<strong>非阻塞编程</strong><ul><li>轮训</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">tcp_server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="comment"># 重用对应地址和端口</span></span><br><span class="line">tcp_server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地 IP 地址和端口</span></span><br><span class="line">address = (<span class="string">&#x27;192.168.1.111&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">tcp_server_socket.bind(address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口激活</span></span><br><span class="line">tcp_server_socket.listen(<span class="number">100</span>)</span><br><span class="line">tcp_server_socket.setblocking(<span class="literal">False</span>)</span><br><span class="line">client_socket = <span class="literal">None</span></span><br><span class="line">temp_client = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        temp_client, clientAddr = tcp_server_socket.accept()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print(e)</span></span><br><span class="line">        client_socket = temp_client</span><br><span class="line">        <span class="keyword">if</span> client_socket:</span><br><span class="line">            client_socket.setblocking(<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                text = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="comment"># 如果对方断开</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;byebye&#x27;</span>)</span><br><span class="line">                    client_socket.close()</span><br><span class="line">                    temp_client = <span class="literal">None</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="built_in">print</span>(text.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr><p><strong>如果程序被 <code>ctrl+c</code> 终止，这个时候端口会处于 TIME_WAIT 状态</strong></p><p><strong>如果端口会处于 TIME_WAIT 状态，不能被再次绑定，解决办法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重用对应地址和端口</span></span><br><span class="line">s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="写（send）-是会阻塞的"><a class="headerlink" href="#写（send）-是会阻塞的"></a>写（send） 是会阻塞的</h3><ul><li><p>写是会阻塞的，当写满就不能再写，缓冲区不够就阻塞</p></li><li><p>对方断开后，怎么办？判断返回值，或者加入 try 异常判断，避免程序崩溃</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">send_size = tcp_client_socket.send(temp_str.encode(<span class="string">&#x27;utf-8&#x27;</span>), MSG_DONTWAIT)</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Python-发送整型数，浮点数"><a class="headerlink" href="#Python-发送整型数，浮点数"></a>Python 发送整型数，浮点数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">train_content = <span class="string">&#x27;我很帅你很牛&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">train_head = <span class="built_in">len</span>(train_content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换后的 str 虽然是字符串类型，但相当于其他语言中的字节流（字节数组），可以在网络上传输</span></span><br><span class="line">temp_str = struct.pack(<span class="string">&quot;I&quot;</span>, train_head)</span><br><span class="line"><span class="comment"># I 表示整型数</span></span><br><span class="line"><span class="built_in">print</span>(temp_str)</span><br><span class="line"><span class="comment"># b&#x27;\x12\x00\x00\x00&#x27;：这种是小端的内存</span></span><br><span class="line"></span><br><span class="line">train_head_bytes = struct.unpack(<span class="string">&quot;I&quot;</span>, temp_str)</span><br><span class="line"><span class="built_in">print</span>(train_head_bytes[<span class="number">0</span>])  <span class="comment"># 18</span></span><br></pre></td></tr></table></figure><hr><h3 id="持续发送多个文件"><a class="headerlink" href="#持续发送多个文件"></a>持续发送多个文件</h3><ul><li><p>粘包：两次发送的报文挨在一起，分不开</p><ul><li>eg：文件名1 + 文件内容1 + 文件名2 + 文件内容2 …</li></ul></li><li><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tcp_init</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    addr = (<span class="string">&quot;&quot;</span>, <span class="number">2000</span>)</span><br><span class="line">    s.bind(addr)</span><br><span class="line">    s.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_file</span>():</span><br><span class="line">    file_name = <span class="string">&quot;test&quot;</span></span><br><span class="line">    s = tcp_init()</span><br><span class="line">    new_client, client_addr = s.accept()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先发文件名（火车头 + 火车体）</span></span><br><span class="line">    file_name_bytes = file_name.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    train_head_bytes = struct.pack(<span class="string">&quot;I&quot;</span>, <span class="built_in">len</span>(file_name_bytes))</span><br><span class="line">    new_client.send(train_head_bytes + file_name_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 再发文件内容（火车头 + 火车体）</span></span><br><span class="line">    f = <span class="built_in">open</span>(file_name, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    file_content = f.read()</span><br><span class="line">    train_head_bytes = struct.pack(<span class="string">&quot;I&quot;</span>, <span class="built_in">len</span>(file_content))</span><br><span class="line">    new_client.send(train_head_bytes + file_content)</span><br><span class="line"></span><br><span class="line">    new_client.close()</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    send_file()</span><br></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地 IP 地址和端口</span></span><br><span class="line">address = (<span class="string">&#x27;100.65.59.237&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line">tcp_client_socket.connect(address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次先读4个字节的火车头</span></span><br><span class="line">train_head_bytes = tcp_client_socket.recv(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">train_content_len = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收到文件名</span></span><br><span class="line">file_name = tcp_client_socket.recv(train_content_len[<span class="number">0</span>])</span><br><span class="line">f = <span class="built_in">open</span>(file_name.decode(<span class="string">&quot;utf-8&quot;</span>), <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收文件内容的长度</span></span><br><span class="line">train_head_bytes = tcp_client_socket.recv(<span class="number">4</span>)</span><br><span class="line">train_content_len = struct.unpack(<span class="string">&#x27;I&#x27;</span>, train_head_bytes)</span><br><span class="line">file_content = tcp_client_socket.recv(train_content_len[<span class="number">0</span>])  <span class="comment"># 接收文件内容</span></span><br><span class="line">f.write(file_content)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line">tcp_client_socket.close()</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="百度网盘-基础功能实现"><a class="headerlink" href="#百度网盘-基础功能实现"></a>百度网盘 - 基础功能实现</h2><ul><li><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ip, port</span>):</span><br><span class="line">        <span class="comment"># 用来listen的socket对象</span></span><br><span class="line">        self.s_listen = <span class="literal">None</span></span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tcp_init</span>(<span class="params">self</span>):</span><br><span class="line">        self.s_listen = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.s_listen.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        self.s_listen.bind((self.ip, self.port))</span><br><span class="line">        self.s_listen.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">self</span>):</span><br><span class="line">        new_client, client_addr = self.s_listen.accept()</span><br><span class="line">        user = User(new_client)</span><br><span class="line">        user.deal_command()  <span class="comment"># 处理客户端发来的各种命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    每一个User对象对应一个客户端</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, new_client</span>):</span><br><span class="line">        self.new_client = new_client</span><br><span class="line">        self.user_name = <span class="literal">None</span></span><br><span class="line">        self.path = os.getcwd()  <span class="comment"># 存储连上的用户的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deal_command</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            command = self.recv_train().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> command[:<span class="number">2</span>] == <span class="string">&quot;ls&quot;</span>:</span><br><span class="line">                self.do_ls()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&quot;cd&quot;</span>:</span><br><span class="line">                self.do_cd(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">3</span>] == <span class="string">&quot;pwd&quot;</span>:</span><br><span class="line">                self.do_pwd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&quot;rm&quot;</span>:</span><br><span class="line">                self.do_rm(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&quot;gets&quot;</span>:</span><br><span class="line">                self.do_gets(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&quot;puts&quot;</span>:</span><br><span class="line">                self.do_puts(command)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Invalid command&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_ls</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        当前路径下的信息传输给客户端</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        data = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(self.path):</span><br><span class="line">            data += file + <span class="string">&quot; &quot;</span> * <span class="number">5</span> + <span class="built_in">str</span>(os.stat(file).st_size) + <span class="string">&quot;\n&quot;</span></span><br><span class="line">        self.send_train(data.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_cd</span>(<span class="params">self, command</span>):</span><br><span class="line">        path = command.split()[<span class="number">1</span>]</span><br><span class="line">        os.chdir(path)</span><br><span class="line">        self.path = os.getcwd()</span><br><span class="line">        self.send_train(self.path.encode(<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># 每次客户端执行cd后，再显示一下路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_pwd</span>(<span class="params">self</span>):</span><br><span class="line">        self.send_train(self.path.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_rm</span>(<span class="params">self, command</span>):</span><br><span class="line">        path = command.split()[<span class="number">1</span>]</span><br><span class="line">        os.remove(path)</span><br><span class="line">        self.send_train(self.path.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_gets</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_puts</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_train</span>(<span class="params">self, send_bytes</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        send_train：就是把某个字节流内容以火车形式发过去</span></span><br><span class="line"><span class="string">        :param send_bytes:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        train_head_bytes = struct.pack(<span class="string">&quot;I&quot;</span>, <span class="built_in">len</span>(send_bytes))</span><br><span class="line">        self.new_client.send(train_head_bytes + send_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        recv_train：就是把火车recv的内容返回出去</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        train_head_bytes = self.new_client.recv(<span class="number">4</span>)</span><br><span class="line">        train_head = struct.unpack(<span class="string">&quot;I&quot;</span>, train_head_bytes)</span><br><span class="line">        <span class="keyword">return</span> self.new_client.recv(train_head[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = Server(<span class="string">&quot;&quot;</span>, <span class="number">2000</span>)</span><br><span class="line">    server.tcp_init()</span><br><span class="line">    server.task()</span><br></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ip, port</span>):</span><br><span class="line">        self.client = <span class="literal">None</span></span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tcp_connect</span>(<span class="params">self</span>):</span><br><span class="line">        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.client.connect((self.ip, self.port))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_train</span>(<span class="params">self, send_bytes</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        send_train：就是把某个字节流内容以火车形式发过去</span></span><br><span class="line"><span class="string">        :param send_bytes:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        train_head_bytes = struct.pack(<span class="string">&quot;I&quot;</span>, <span class="built_in">len</span>(send_bytes))</span><br><span class="line">        self.client.send(train_head_bytes + send_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        recv_train：就是把火车recv的内容返回出去</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        train_head_bytes = self.client.recv(<span class="number">4</span>)</span><br><span class="line">        train_head = struct.unpack(<span class="string">&quot;I&quot;</span>, train_head_bytes)</span><br><span class="line">        <span class="keyword">return</span> self.client.recv(train_head[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_command</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        发送各种命令给服务器</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            command = <span class="built_in">input</span>()</span><br><span class="line">            self.send_train(command.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">            <span class="keyword">if</span> command[:<span class="number">2</span>] == <span class="string">&quot;ls&quot;</span>:</span><br><span class="line">                self.do_ls()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&quot;cd&quot;</span>:</span><br><span class="line">                self.do_cd(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">3</span>] == <span class="string">&quot;pwd&quot;</span>:</span><br><span class="line">                self.do_pwd()</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">2</span>] == <span class="string">&quot;rm&quot;</span>:</span><br><span class="line">                self.do_rm(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&quot;gets&quot;</span>:</span><br><span class="line">                self.do_gets(command)</span><br><span class="line">            <span class="keyword">elif</span> command[:<span class="number">4</span>] == <span class="string">&quot;puts&quot;</span>:</span><br><span class="line">                self.do_puts(command)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Invalid command&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_ls</span>(<span class="params">self</span>):</span><br><span class="line">        data = self.recv_train().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_cd</span>(<span class="params">self, command</span>):</span><br><span class="line">        data = self.recv_train().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_pwd</span>(<span class="params">self</span>):</span><br><span class="line">        data = self.recv_train().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_rm</span>(<span class="params">self, command</span>):</span><br><span class="line">        data = self.recv_train().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_gets</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_puts</span>(<span class="params">self, command</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client = Client(<span class="string">&#x27;100.65.59.237&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line">    client.tcp_connect()</span><br><span class="line">    client.send_command()</span><br></pre></td></tr></table></figure></li></ul><hr><h1>多进程</h1><hr><ul><li><p>查看 Linux 的 cpu 的核数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo </span><br></pre></td></tr></table></figure></li><li><p>看到 R 状态是两次采样之间的一个时间片变化分析计算</p><ul><li>R 状态 运行</li><li>S 状态 睡眠</li></ul></li><li><p>可以显示父子进程关系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps –elf </span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240619131549064.png" alt="举例" loading="lazy"></p></li><li><p>看 %cpu(cpu 使用量) %mem（内存使用量） stat 状态｛<strong>S 睡眠 T 暂停 R 运行 Z僵尸</strong>}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux</span><br></pre></td></tr></table></figure></li><li><p>显示前 20 条进程，动态的改变，按 q 退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240619132221654.png" alt="举例" loading="lazy"></p><ul><li><strong>%us 用户空间占用 cpu 百分比</strong></li><li><strong>%sy 内核空间占用 cpu 百分比</strong></li><li><strong>%id 空闲 cpu 百分比，反映一个系统 cpu 的闲忙程度。越大越空闲</strong></li></ul></li><li><p>杀死进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kill -9 进程名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看系统的所有信号</span></span><br><span class="line">kill -l</span><br></pre></td></tr></table></figure></li><li><p>将挂起的进程放到后台运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bg 作业ID</span><br></pre></td></tr></table></figure></li><li><p>将后台进程拉到前台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fg 作业ID</span><br></pre></td></tr></table></figure></li><li><p><strong>看后台任务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobs</span><br></pre></td></tr></table></figure></li><li><p>让进程后台运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python xxx.py &amp;</span><br></pre></td></tr></table></figure></li><li><p>查看物理内存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free</span><br></pre></td></tr></table></figure></li><li><p>杀死进程名为 a 的进程，如果有空格，用 \ 转义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pkill -f a</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">pkill -f python\ xxx.py</span><br></pre></td></tr></table></figure></li><li><p>查看磁盘及磁盘分区情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk –l</span><br></pre></td></tr></table></figure></li><li><p>设置当前用户定时任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crontab –e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim /etc/crontab  # 设置定时任务</span><br><span class="line">crontab -l  # 查看当前自己设置的定时任务</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="进程的创建"><a class="headerlink" href="#进程的创建"></a>进程的创建</h2><hr><ul><li><code>multiprocessing</code> 模块就是跨平台版本的多进程模块，提供了一个 <code>Process</code> 类来代表一个进程对象，这个对象可以理解为是一个独立的进程，可以执行另外的事情</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    子进程要执行的代码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----2----&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建一个进程</span></span><br><span class="line">    p = Process(target=run_proc)  <span class="comment"># run_proc 传递时不能加括号</span></span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----1----&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>创建子进程时，只需要传入一个执行函数和函数的参数，创建一个 Process 实例，用 <code>start()</code> 方法启动</li><li><strong>孤儿进程</strong> <strong>—</strong> <strong>父进程退出（kill</strong> <strong>杀死父进程），子进程变为孤儿</strong><ul><li>1 号进程一般是接管孤儿进程的，负责代替之前的父进程来回收PCB</li></ul></li><li><strong>僵尸进程</strong> <strong>—</strong> <strong>子进程退出，父进程在忙碌，没有回收它，要避免僵尸</strong><ul><li><strong>Python</strong> <strong>进程变为僵尸进程后，名字会改变</strong></li><li>僵尸进程是 kill 不掉的</li></ul></li></ul><hr><h2 id="获取进程的pid"><a class="headerlink" href="#获取进程的pid"></a>获取进程的pid</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_process</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am son process, pid is &#123;&#125;, ppid is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(os.getpid(), os.getppid()))</span><br><span class="line">    <span class="comment"># I am son process, pid is 16412, ppid is 15008</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    child = Process(target=run_process)  <span class="comment"># target代表子进程启动时运行哪个函数</span></span><br><span class="line">    child.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am father process, pid is &#123;&#125;, ppid is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(os.getpid(), os.getppid()))</span><br><span class="line">    <span class="comment"># I am father process, pid is 15008, ppid is 4860</span></span><br></pre></td></tr></table></figure><ul><li><p>获取父进程的pid</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.getppid()</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Process-语法结构"><a class="headerlink" href="#Process-语法结构"></a>Process 语法结构</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Process(group , target , name , args , kwargs)</span><br></pre></td></tr></table></figure><ul><li>target：如果传递了函数的引用，可以让这个子进程就执行这里的代码</li><li>args：给 target 指定的函数传递的参数，以元组的方式传递</li><li>kwargs：给 target 指定的函数传递命名参数，keyword 参数</li></ul><p>Process 创建的实例对象的常用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">start()  <span class="comment"># 启动子进程实例（创建子进程）</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">is_alive()  <span class="comment"># 判断进程子进程是否还在活着</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">join([timeout])  <span class="comment"># 是否等待子进程执行结束，或等待多少秒--回收子进程尸体</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">terminate()  <span class="comment"># 不管任务是否完成，立即终止子进程</span></span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>(<span class="params">name, age, **kwargs</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;son process &#123;&#125; &#123;&#125;, &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, age, kwargs))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;son process pid is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=run_proc, args=(<span class="string">&quot;zhaosan&quot;</span>, <span class="number">6</span>), kwargs=&#123;<span class="string">&quot;math&quot;</span>: <span class="number">130</span>&#125;)</span><br><span class="line">    p.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    p.terminate()  <span class="comment"># 给子进程发信号杀掉它</span></span><br><span class="line">    p.join()  <span class="comment"># 会等待子进程先执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;father process pid is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">son process zhaosan 6, &#123;&#x27;math&#x27;: 130&#125;</span></span><br><span class="line"><span class="string">son process pid is 17088</span></span><br><span class="line"><span class="string">son process zhaosan 6, &#123;&#x27;math&#x27;: 130&#125;</span></span><br><span class="line"><span class="string">son process pid is 17088</span></span><br><span class="line"><span class="string">father process pid is 29940</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="进程间对于全局变量的共享"><a class="headerlink" href="#进程间对于全局变量的共享"></a>进程间对于全局变量的共享</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 子进程的创建是父进程的复制品，资源是独立使用的</span></span><br><span class="line"><span class="comment"># 每个进程都是独立的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am work1, &#123;&#125;&quot;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    nums.append(<span class="number">33</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;work1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(nums))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am work2, &#123;&#125;&quot;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    <span class="built_in">print</span>(nums)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=work1)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    p = Process(target=work2)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">I am work1, 13152</span></span><br><span class="line"><span class="string">work1 [11, 22, 33]</span></span><br><span class="line"><span class="string">I am work2, 25648</span></span><br><span class="line"><span class="string">[11, 22]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="进程间通信-Queue"><a class="headerlink" href="#进程间通信-Queue"></a>进程间通信 - Queue</h2><hr><ul><li>使用 multiprocessing 模块的 Queue 实现多进程之间的数据传递，Queue 本身是一个消息列队程序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">q = Queue(<span class="number">3</span>)  <span class="comment"># 初始化一个 Queue 对象，最多可接收三条 put 消息</span></span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full())  <span class="comment"># False</span></span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(q.full())  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列满了之后，如果再放就会阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(q.get())  # 1</span></span><br><span class="line"><span class="comment"># print(q.get())  # 2</span></span><br><span class="line"><span class="comment"># print(q.get())  # 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(q.put(<span class="number">4</span>, <span class="literal">True</span>, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;队列长度：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(q.qsize()))  <span class="comment"># 队列长度：3</span></span><br></pre></td></tr></table></figure><ul><li>初始化 Queue() 对象时（例如：q=Queue()），若括号中没有指定最大可接收的消息数量，或数量为负值，那么就代表可接受的消息数量没有上限（直到内存的尽头）<ul><li><code>Queue.qsize()</code>：返回当前队列包含的消息数量</li><li><code>Queue.empty()</code>：如果队列为空，返回 True，反之 False</li><li><code>Queue.full()</code>：如果队列满了，返回 True,反之 False</li><li><code>Queue.get([block[, timeout]])</code>：获取队列中的一条消息，然后将其从列队中移除，block 默认值为 True；</li></ul></li></ul><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue, Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">q: Queue</span>):</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Puts &#123;&#125; to queue&quot;</span>.<span class="built_in">format</span>(value))</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reader</span>(<span class="params">q: Queue</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            value = q.get(<span class="literal">True</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Reads &#123;&#125; to queue&quot;</span>.<span class="built_in">format</span>(value))</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Queue(<span class="number">10</span>)</span><br><span class="line">    pw = Process(target=write, args=(q,))  <span class="comment"># 一个元素必须加逗号，才是元组</span></span><br><span class="line">    pr = Process(target=reader, args=(q,))</span><br><span class="line">    pw.start()</span><br><span class="line">    pr.start()</span><br><span class="line">    pw.join()</span><br><span class="line">    pr.join()</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Puts A to queue</span></span><br><span class="line"><span class="string">Reads A to queue</span></span><br><span class="line"><span class="string">Puts B to queue</span></span><br><span class="line"><span class="string">Puts C to queue</span></span><br><span class="line"><span class="string">Reads B to queue</span></span><br><span class="line"><span class="string">Reads C to queue</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="进程池-Pool"><a class="headerlink" href="#进程池-Pool"></a>进程池 - Pool</h2><hr><ul><li>可以用到 multiprocessing 模块提供的 Pool 方法</li><li><code>join()</code>：主进程阻塞，等待子进程的退出， <strong>必须在</strong> <strong>close</strong> <strong>或</strong> <strong>terminate</strong> <strong>之后</strong>使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">msg</span>):</span><br><span class="line">    t_start = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s 开始执行,进程号为%d&quot;</span> % (msg, os.getpid()))  <span class="comment"># 目的只有3个进程（服务员）</span></span><br><span class="line">    <span class="comment"># random.random()随机生成 0~1 之间的浮点数</span></span><br><span class="line">    time.sleep(random.random() * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    t_stop = time.time()</span><br><span class="line">    <span class="built_in">print</span>(msg, <span class="string">&quot;执行完毕，耗时%0.2f&quot;</span> % (t_stop - t_start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = Pool(processes=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="comment"># Pool().apply_async(要调用的目标,(传递给目标的参数元祖,))</span></span><br><span class="line">        <span class="comment"># 异步执行，每次循环将会用空闲出来的子进程去调用目标</span></span><br><span class="line">        pool.apply_async(worker, (i,))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----start----&quot;</span>)</span><br><span class="line">    pool.close()  <span class="comment"># 关闭进程池，关闭后 po 不再接收新的请求</span></span><br><span class="line">    pool.join()  <span class="comment"># 等待 pool 中所有子进程执行完成，必须放在 close 语句之后</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----end-----&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">----start----</span></span><br><span class="line"><span class="string">0 开始执行,进程号为20148</span></span><br><span class="line"><span class="string">1 开始执行,进程号为16328</span></span><br><span class="line"><span class="string">2 开始执行,进程号为26488</span></span><br><span class="line"><span class="string">2 执行完毕，耗时0.16</span></span><br><span class="line"><span class="string">3 开始执行,进程号为26488</span></span><br><span class="line"><span class="string">1 执行完毕，耗时0.45</span></span><br><span class="line"><span class="string">4 开始执行,进程号为16328</span></span><br><span class="line"><span class="string">4 执行完毕，耗时0.42</span></span><br><span class="line"><span class="string">5 开始执行,进程号为16328</span></span><br><span class="line"><span class="string">3 执行完毕，耗时0.76</span></span><br><span class="line"><span class="string">6 开始执行,进程号为26488</span></span><br><span class="line"><span class="string">0 执行完毕，耗时1.03</span></span><br><span class="line"><span class="string">7 开始执行,进程号为20148</span></span><br><span class="line"><span class="string">6 执行完毕，耗时1.11</span></span><br><span class="line"><span class="string">8 开始执行,进程号为26488</span></span><br><span class="line"><span class="string">5 执行完毕，耗时1.61</span></span><br><span class="line"><span class="string">9 开始执行,进程号为16328</span></span><br><span class="line"><span class="string">9 执行完毕，耗时0.36</span></span><br><span class="line"><span class="string">7 执行完毕，耗时1.86</span></span><br><span class="line"><span class="string">8 执行完毕，耗时1.01</span></span><br><span class="line"><span class="string">-----end-----</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="进程池中的-Queue"><a class="headerlink" href="#进程池中的-Queue"></a>进程池中的 Queue</h3><ul><li>如果要使用 Pool 创建进程，就需要使用 <code>multiprocessing.Manager()</code> 中的 <code>Queue()</code>，而不是 <code>multiprocessing.Queue()</code>，否则会得到一条如下的错误信息：<ul><li><code>RuntimeError: Queue objects should only be shared between processes through inheritance.</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 import 中的 Queue 为 Manager</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager, Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reader</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reader 启动(%s),父进程为(%s)&quot;</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(q.qsize()):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reader 从 Queue 获取到消息：%s&quot;</span> % q.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writer</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;writer 启动(%s),父进程为(%s)&quot;</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;zhangsan&quot;</span>:</span><br><span class="line">        q.put(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(%s) start&quot;</span> % os.getpid())</span><br><span class="line">    q = Manager().Queue()  <span class="comment"># 使用 Manager 中的 Queue</span></span><br><span class="line">    po = Pool()</span><br><span class="line">    po.apply_async(writer, (q,))</span><br><span class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># 先让上面的任务向 Queue 存入数据，然后再让下面的任务开始从中取数据</span></span><br><span class="line">    po.apply_async(reader, (q,))</span><br><span class="line">    po.close()</span><br><span class="line">    po.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(%s) End&quot;</span> % os.getpid())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(23412) start</span></span><br><span class="line"><span class="string">writer 启动(14096),父进程为(23412)</span></span><br><span class="line"><span class="string">reader 启动(25924),父进程为(23412)</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：z</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：h</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：a</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：n</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：g</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：s</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：a</span></span><br><span class="line"><span class="string">reader 从 Queue 获取到消息：n</span></span><br><span class="line"><span class="string">(23412) End</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><h1>Pycharm 远程开发</h1><hr><ul><li><p>步骤一：</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240619164205035.png" alt="1" loading="lazy"></p></li><li><p>步骤二：</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240619164341054.png" alt="2" loading="lazy"></p></li><li><p>步骤三：</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240619164455964.png" alt="3" loading="lazy"></p><ul><li>这里的同步文件夹需要<strong>修改</strong>，修改Linux下的目录</li></ul></li></ul><hr><h1>多线程</h1><hr><h2 id="线程"><a class="headerlink" href="#线程"></a>线程</h2><p><strong>python</strong> <strong>的</strong> <strong>thread</strong> <strong>模块是比较底层的模块，python 的 threading</strong> <strong>模块是对</strong> <strong>thread</strong> <strong>做了一些包装的，可以更加方便的被使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">saySorry</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am sorry, I didn&#x27;t get&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t = threading.Thread(target=saySorry)  <span class="comment"># 创建线程</span></span><br><span class="line">        t.start()  <span class="comment"># 启动线程，即让线程开始执行</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">I am sorry, I didn&#x27;t get</span></span><br><span class="line"><span class="string">I am sorry, I didn&#x27;t get</span></span><br><span class="line"><span class="string">I am sorry, I didn&#x27;t get</span></span><br><span class="line"><span class="string">I am sorry, I didn&#x27;t get</span></span><br><span class="line"><span class="string">I am sorry, I didn&#x27;t get</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>查看线程的方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -elLf|grep 线程名</span><br></pre></td></tr></table></figure></li><li><p>进程会等待所有的线程结束后，它才结束</p></li><li><p>查看线程的数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length = <span class="built_in">len</span>(threading.<span class="built_in">enumerate</span>())</span><br></pre></td></tr></table></figure></li><li><p>一个Python进程中的多个线程是不可以迁移到多个核的，只能在一个核上</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240620144723504.png" alt="Python 弊端" loading="lazy"></p></li></ul><hr><h2 id="面向对象创建线程"><a class="headerlink" href="#面向对象创建线程"></a>面向对象创建线程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(threading.Thread):</span><br><span class="line">    <span class="comment"># 执行线程</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            msg = <span class="string">&quot;I am &quot;</span> + self.name + <span class="string">&quot; @ &quot;</span> + <span class="built_in">str</span>(i)  <span class="comment"># name属性中保存的是当前线程的名字</span></span><br><span class="line">            <span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建5个线程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t = MyThread()</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">I am Thread-4 @ 0</span></span><br><span class="line"><span class="string">I am Thread-5 @ 0</span></span><br><span class="line"><span class="string">I am Thread-1 @ 0</span></span><br><span class="line"><span class="string">I am Thread-2 @ 0</span></span><br><span class="line"><span class="string">I am Thread-3 @ 0</span></span><br><span class="line"><span class="string">I am Thread-3 @ 1</span></span><br><span class="line"><span class="string">I am Thread-1 @ 1</span></span><br><span class="line"><span class="string">I am Thread-2 @ 1</span></span><br><span class="line"><span class="string">I am Thread-5 @ 1</span></span><br><span class="line"><span class="string">I am Thread-4 @ 1</span></span><br><span class="line"><span class="string">I am Thread-4 @ 2</span></span><br><span class="line"><span class="string">I am Thread-5 @ 2</span></span><br><span class="line"><span class="string">I am Thread-3 @ 2</span></span><br><span class="line"><span class="string">I am Thread-1 @ 2</span></span><br><span class="line"><span class="string">I am Thread-2 @ 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">打印的不同是因为存在全局解释器锁的缘故</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>每个线程默认有一个名字，尽管上面的例子中没有指定线程对象的 name，但是 python 会自动为线程指定一个名字</li><li>当线程的 run() 方法结束时该线程完成</li><li>无法控制线程调度程序，但可以通过别的方式来影响线程调度的方式</li></ul><hr><h2 id="多线程共享全局变量"><a class="headerlink" href="#多线程共享全局变量"></a>多线程共享全局变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work1</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----in work1, g_num is %d---&quot;</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work2</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----in work2, g_num is %d---&quot;</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---线程创建之前 g_num is %d---&quot;</span> % g_num)  <span class="comment"># 0</span></span><br><span class="line">t1 = threading.Thread(target=work1, args=(<span class="number">100</span>,))</span><br><span class="line">t1.start()</span><br><span class="line">t2 = threading.Thread(target=work2, args=(<span class="number">100</span>,))</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()  <span class="comment"># 等待t1结束</span></span><br><span class="line">t2.join()  <span class="comment"># 等待t2结束</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2 个线程对同一个全局变量操作之后的最终结果是:%s&quot;</span> % g_num)  <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>在一个进程内的所有线程共享全局变量，很方便在<strong>多个线程间共享数据</strong></li><li>缺点就是，线程是对全局变量随意遂改可能造成多线程之间对全局变量的混乱**（即线程非安全）**</li><li>如果多个线程同时对同一个全局变量操作，会出现资源竞争问题，从而数据结果会不正确<ul><li>+1 操作不是原子操作</li></ul></li></ul><hr><h2 id="互斥锁"><a class="headerlink" href="#互斥锁"></a>互斥锁</h2><ul><li><p>threading 模块中定义了 Lock 类，可以方便的处理锁定：</p><ul><li><p>创建锁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mutex = threading.Lock()</span><br></pre></td></tr></table></figure></li><li><p>锁定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mutex.acquire()</span><br></pre></td></tr></table></figure></li><li><p>释放</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mutex.release()</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work1</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        mutex.acquire()  <span class="comment"># 加锁</span></span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()  <span class="comment"># 解锁</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----in work1, g_num is %d---&quot;</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work2</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        mutex.acquire()  <span class="comment"># 加锁</span></span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()  <span class="comment"># 解锁</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----in work2, g_num is %d---&quot;</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---线程创建之前 g_num is %d---&quot;</span> % g_num)</span><br><span class="line">    <span class="comment"># mutex是全局变量，初始化</span></span><br><span class="line">    <span class="comment"># 创建一个互斥锁</span></span><br><span class="line"><span class="comment"># 默认是未上锁的状态</span></span><br><span class="line">    mutex = threading.Lock()</span><br><span class="line">    t1 = threading.Thread(target=work1, args=(<span class="number">10000</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2 = threading.Thread(target=work2, args=(<span class="number">10000</span>,))</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()  <span class="comment"># 等待t1结束</span></span><br><span class="line">    t2.join()  <span class="comment"># 等待t2结束</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2 个线程对同一个全局变量操作之后的最终结果是:%s&quot;</span> % g_num)  <span class="comment"># 200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">---线程创建之前 g_num is 0---</span></span><br><span class="line"><span class="string">----in work1, g_num is 10000---</span></span><br><span class="line"><span class="string">----in work2, g_num is 20000---</span></span><br><span class="line"><span class="string">2 个线程对同一个全局变量操作之后的最终结果是:20000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li><p>锁的好处：</p><ul><li>确保了某段关键代码只能由一个线程从头到尾完整地执行</li></ul></li><li><p>锁的坏处：</p><ul><li>阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了</li><li>由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁</li></ul></li></ul><hr><h2 id="死锁"><a class="headerlink" href="#死锁"></a>死锁</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread1</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 对 mutexA 上锁</span></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        <span class="comment"># mutexA 上锁后，延时 1 秒，等待另外那个线程 把 mutexB 上锁</span></span><br><span class="line">        <span class="comment"># 这里延时 1秒是确保另外的线程能加上锁</span></span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">&#x27;----do1---up----&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 此时会堵塞，因为这个 mutexB 已经被另外的线程抢先上锁了</span></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">&#x27;----do1---down----&#x27;</span>)</span><br><span class="line">        mutexB.release()</span><br><span class="line">        <span class="comment"># 对 mutexA 解锁</span></span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread2</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 对 mutexB 上锁</span></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        <span class="comment"># mutexB 上锁后，延时 1 秒，等待另外那个线程 把 mutexA 上锁</span></span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">&#x27;----do2---up----&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 此时会堵塞，因为这个 mutexA 已经被另外的线程抢先上锁了</span></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">&#x27;----do2---down----&#x27;</span>)</span><br><span class="line">        mutexA.release()</span><br><span class="line">        <span class="comment"># 对 mutexB 解锁</span></span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mutexA = threading.Lock()</span><br><span class="line">mutexB = threading.Lock()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1 = MyThread1()</span><br><span class="line">    t2 = MyThread2()</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Thread-1----do1---up----</span></span><br><span class="line"><span class="string">Thread-2----do2---up----</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>避免死锁：</strong><ul><li>程序设计时要尽量避免（<strong>银行家算法</strong>）</li><li>添加超时时间等</li></ul></li></ul><hr><h1>迭代器</h1><hr><ul><li><p>迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。<strong>迭代器只能往前不会后退</strong></p></li><li><p><strong>可迭代对象</strong></p><ul><li><p><strong>把一种数据类型都可以放到</strong> <strong>for…in…的语句中，然后让for…in…每次从中取出一条数据供我们使用，即供我们迭代</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># int 整型不是 iterable，即 int 整型不是可以迭代的</span></span><br></pre></td></tr></table></figure></li><li><p>判断一个对象是否是可迭代的</p><ul><li>使用 isinstance() 判断一个对象是否是 Iterable 对象（迭代器）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">1</span>-c0513a1e6784&gt;:<span class="number">1</span>: DeprecationWarning: Using <span class="keyword">or</span> importing the ABCs <span class="keyword">from</span> <span class="string">&#x27;collections&#x27;</span> instead of <span class="keyword">from</span> <span class="string">&#x27;collections.abc&#x27;</span> <span class="keyword">is</span> deprecated since Python <span class="number">3.3</span>, <span class="keyword">and</span> <span class="keyword">in</span> <span class="number">3.10</span> it will stop working</span><br><span class="line">  <span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="built_in">isinstance</span>([], Iterable)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="built_in">isinstance</span>(<span class="built_in">int</span>, Iterable)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="built_in">isinstance</span>((), Iterable)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: <span class="built_in">isinstance</span>(&#123;&#125;, Iterable)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="built_in">isinstance</span>(<span class="string">&quot;abc&quot;</span>, Iterable)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p><strong>可迭代对象的本质</strong></p><ul><li><p>可迭代对象通过<code>__iter__</code>方法向我们提供一个迭代器，我们在迭代一个可迭代对象的时候，实际上就是先获取该对象提供的一个迭代器，然后通过这个迭代器来依次获取对象中的每一个数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DeprecationWarning：弃用警告</span></span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.container = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.container.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 只要重写了iter方法，就会变为可迭代的</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    my_list = MyList()</span><br><span class="line">    my_list.add(<span class="number">1</span>)</span><br><span class="line">    my_list.add(<span class="number">2</span>)</span><br><span class="line">    my_list.add(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">isinstance</span>(my_list, Iterable))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># for item in my_list:</span></span><br><span class="line">    <span class="comment">#     print(item)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>iter() 函数 与 next() 函数</p><ul><li><p><strong>list、tuple</strong> <strong>等都是可迭代对象，我们可以通过</strong> <strong>iter()函数获取这些可迭代对象的迭代器。然后我们可以对获取到的迭代器不断使用 next()函数来获取下一条数据</strong>。</p></li><li><p>iter() 函数实际上就是调用了可迭代对象的<code>__iter__</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: list_test = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: list_test = <span class="built_in">iter</span>(list_test)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="built_in">next</span>(list_test)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="built_in">next</span>(list_test)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>注意，当我们已经迭代完最后一个数据之后，再次调用</strong> <strong>next()函数会抛出StopIteration</strong> <strong>的异常，来告诉我们所有数据都已迭代完成，不用再执行</strong> <strong>next()函数了</strong></p></li></ul></li><li><p><strong>迭代器 Iterator</strong></p><ul><li>类中重写了<code>__iter__</code>方法和<code>__next__</code>方法，就是迭代器**</li><li><strong>可迭代的则是类中只重写了<code>__iter__</code>内置方法，没有重写<code>__next__</code>方法</strong><ul><li>要求这个方法返回的是一个迭代器</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.container = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.container.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        myIterator = MyIterator(self)</span><br><span class="line">        <span class="keyword">return</span> myIterator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyIterator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, mylist</span>):</span><br><span class="line">        self.mylist = mylist</span><br><span class="line">        <span class="comment"># current 用来记录当前访问的位置</span></span><br><span class="line">        self.current = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):  <span class="comment"># iter 方法必须返回一个迭代器</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        current = self.current</span><br><span class="line">        self.current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> current &lt; <span class="built_in">len</span>(self.mylist.container):</span><br><span class="line">            <span class="keyword">return</span> self.mylist.container[current]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    my_list = MyList()</span><br><span class="line">    my_list.add(<span class="number">1</span>)</span><br><span class="line">    my_list.add(<span class="number">2</span>)</span><br><span class="line">    my_list.add(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for是先对 i = iter(mylist)进行操作，不断的 next(myiter)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> my_list:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>for … in … 循环的本质：</strong><ul><li>for <strong>item</strong> in <strong>Iterable</strong> 循环的本质就是先通过 iter()函数获取可迭代对象 Iterable 的迭代器，然后对获取到的迭代器不断调用 next() 方法来获取下一个值并将其赋值给item，当遇到 StopIteration 的异常后循环结束</li></ul></li></ul><hr></li></ul><h1>生成器</h1><hr><ul><li><p>为了达到记录当前状态，并配合 next() 函数进行迭代使用，我们可以采用更简便的语法，即<strong>生成器(generator)</strong></p></li><li><p><strong>生成器是一类特殊的迭代器</strong></p></li><li><p>yield 的作用：把当前的上下文（寄存器的状态）保存起来，返回一个值，就是 yield 后面的值，下次执行next操作，会从上次yield保存的线程位置继续执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    current = <span class="number">0</span></span><br><span class="line">    num1, num2 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> current &lt; n:</span><br><span class="line">        num = num1</span><br><span class="line">        num1, num2 = num2, num1 + num2</span><br><span class="line">        current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># F 是一个生成器，支持next</span></span><br><span class="line">F = fib(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(F)  <span class="comment"># &lt;generator object fib at 0x00000248029F0BA0&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(F))  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> F:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 1 2 3 5 8 13 21 34 </span></span><br></pre></td></tr></table></figure></li></ul><p><strong>总结</strong>：</p><ul><li><strong>使用了</strong> <strong>yield</strong> <strong>关键字的函数不再是函数，而是生成器。（使用了</strong> <strong>yield</strong> <strong>的函数就是生成器）</strong></li><li><strong>yield</strong> <strong>关键字有两点作用：</strong><ul><li><strong>保存当前运行状态（断点），然后暂停执行，即将生成器（函数）挂起</strong></li><li><strong>将</strong> <strong>yield</strong> <strong>关键字后面表达式的值作为返回值返回，此时可以理解为起到了</strong> <strong>return</strong> <strong>的作用</strong></li></ul></li><li>可以使用 next() 函数让生成器从断点处继续执行，即唤醒生成器（函数）</li><li>Python3 中的生成器可以使用 return 返回最终运行的返回值</li></ul><hr><h2 id="使用-send-唤醒"><a class="headerlink" href="#使用-send-唤醒"></a>使用 send 唤醒</h2><hr><ul><li>除了可以使用 next() 函数来唤醒生成器继续执行外，还可以使用 send()函数来唤醒执行</li><li>使用 send() 函数的一个好处是可以在唤醒的同时向断点处传入一个附加数据<ul><li>c.next() 等价 c.send(None)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">5</span>:</span><br><span class="line">        temp = <span class="keyword">yield</span> i</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">g = gen()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(g.send(<span class="string">&quot;hello&quot;</span>))  <span class="comment"># g.send()有返回值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><h1>协程</h1><hr><ul><li>协程是 python 个中另外一种实现多任务的方式，只不过比线程更小占用更小执行单元（理解为需要的资源）</li><li>把一个协程 切换到另一个协程。 只要这个过程中保存或恢复 <strong>CPU</strong> <strong>上下文</strong>，那么程序还是可以运行的<ul><li>原理：通过 yield 在用户态保存上下文，不是操作系统所支持的</li></ul></li><li>与 进程、线程 相比，协程切换的效率是最低的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work1</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----work1---&quot;</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work2</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----work2---&quot;</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    w1 = work1()</span><br><span class="line">    w2 = work2()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">next</span>(w1)</span><br><span class="line">        <span class="built_in">next</span>(w2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">----work1---</span></span><br><span class="line"><span class="string">----work2---</span></span><br><span class="line"><span class="string">----work1---</span></span><br><span class="line"><span class="string">----work2---</span></span><br><span class="line"><span class="string">----work1---</span></span><br><span class="line"><span class="string">----work2---</span></span><br><span class="line"><span class="string">----work1---</span></span><br><span class="line"><span class="string">----work2---</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="greenlet"><a class="headerlink" href="#greenlet"></a>greenlet</h2><ul><li><p>为了更好使用协程来完成多任务，python 中的 greenlet 模块对其封装，从而使得切换任务变的更加简单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">windows</span></span><br><span class="line">pip install greenlet</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Linux</span></span><br><span class="line">pip3 install greenlet</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;test1&#x27;</span>)</span><br><span class="line">        gr2.switch()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;test2&#x27;</span>)</span><br><span class="line">        gr1.switch()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gr1 = greenlet(test1)</span><br><span class="line">gr2 = greenlet(test2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 gr1 中运行</span></span><br><span class="line">gr1.switch()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">test1</span></span><br><span class="line"><span class="string">test2</span></span><br><span class="line"><span class="string">test1</span></span><br><span class="line"><span class="string">test2</span></span><br><span class="line"><span class="string">test1</span></span><br><span class="line"><span class="string">test2</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="gevent"><a class="headerlink" href="#gevent"></a>gevent</h2><hr><ul><li><p>greenlet 已经实现了协程，但是这个还的人工切换，<strong>能够自动切换任务</strong>的模块 gevent</p></li><li><p><strong>原理</strong>：当一个 greenlet 遇到 IO(指的是 input output 输入输出，比如网络、文件操作等)操作时，比如访问网络，就自动切换到其他的 greenlet，等到 IO 操作完成，再在适当的时候切换回来继续执行</p></li><li><p>gevent 的使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gevent.spawn 接口使用方法</span></span><br><span class="line">gevent.spawn(函数名，传参)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(gevent.getcurrent(), i)</span><br><span class="line">        <span class="comment"># 用来模拟一个耗时操作，注意不是 time 模块中的 sleep</span></span><br><span class="line">        <span class="comment"># gevent.sleep(1)主要是把控制权让出去</span></span><br><span class="line">        gevent.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x198efe56c20: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x198f1994ae0: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x198f1994cc0: f(5)&gt; 0</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x198efe56c20: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x198f1994ae0: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x198f1994cc0: f(5)&gt; 1</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x198efe56c20: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x198f1994ae0: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x198f1994cc0: f(5)&gt; 2</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x198efe56c20: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x198f1994ae0: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x198f1994cc0: f(5)&gt; 3</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x198efe56c20: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x198f1994ae0: f(5)&gt; 4</span></span><br><span class="line"><span class="string">&lt;Greenlet at 0x198f1994cc0: f(5)&gt; 4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="给程序打补丁"><a class="headerlink" href="#给程序打补丁"></a>给程序打补丁</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有耗时操作时需要</span></span><br><span class="line"><span class="comment"># 将程序中用到的耗时操作的代码，换为 gevent 中自己实现的模块</span></span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Monkey补丁</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一定写在最前面，会把耗时的操作替换掉</span></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coroutine_work</span>(<span class="params">coroutine_name</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(coroutine_name, i)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(coroutine_work, <span class="string">&quot;work1&quot;</span>),</span><br><span class="line">    gevent.spawn(coroutine_work, <span class="string">&quot;work2&quot;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">work1 0</span></span><br><span class="line"><span class="string">work2 0</span></span><br><span class="line"><span class="string">work1 1</span></span><br><span class="line"><span class="string">work2 1</span></span><br><span class="line"><span class="string">work1 2</span></span><br><span class="line"><span class="string">work2 2</span></span><br><span class="line"><span class="string">work2 3</span></span><br><span class="line"><span class="string">work1 3</span></span><br><span class="line"><span class="string">work2 4</span></span><br><span class="line"><span class="string">work2 5</span></span><br><span class="line"><span class="string">work1 4</span></span><br><span class="line"><span class="string">work2 6</span></span><br><span class="line"><span class="string">work1 5</span></span><br><span class="line"><span class="string">work2 7</span></span><br><span class="line"><span class="string">work1 6</span></span><br><span class="line"><span class="string">work1 7</span></span><br><span class="line"><span class="string">work2 8</span></span><br><span class="line"><span class="string">work1 8</span></span><br><span class="line"><span class="string">work1 9</span></span><br><span class="line"><span class="string">work2 9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><p><strong>进程、线程与协程的对比：</strong></p><ol><li>进程是资源分配的单位</li><li>线程是操作系统内核调度的基本单位</li><li>进程切换需要的资源很最大，效率很低</li><li>线程切换需要的资源一般，效率一般（当然了在不考虑 GIL 的情况下）</li><li>协程切换任务资源很小，效率高</li></ol><hr><h2 id="asyncio"><a class="headerlink" href="#asyncio"></a>asyncio</h2><hr><p><a href="https://blog.csdn.net/weixin_42146296/article/details/92166245">asyncio说明</a></p><hr><h2 id="并行下载网页"><a class="headerlink" href="#并行下载网页"></a>并行下载网页</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有耗时操作时需要</span></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_downLoad</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;GET: %s&#x27;</span> % url)</span><br><span class="line">    resp = urllib.request.urlopen(url)</span><br><span class="line">    data = resp.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%d bytes received from %s.&#x27;</span> % (<span class="built_in">len</span>(data), url))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(my_downLoad, <span class="string">&#x27;http://www.baidu.com/&#x27;</span>),</span><br><span class="line">    gevent.spawn(my_downLoad, <span class="string">&#x27;http://www.qq.com/&#x27;</span>),</span><br><span class="line">    gevent.spawn(my_downLoad, <span class="string">&#x27;http://www.taobao.com/&#x27;</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">GET: http://www.baidu.com/</span></span><br><span class="line"><span class="string">GET: http://www.qq.com/</span></span><br><span class="line"><span class="string">GET: http://www.taobao.com/</span></span><br><span class="line"><span class="string">403527 bytes received from http://www.baidu.com/.</span></span><br><span class="line"><span class="string">118077 bytes received from http://www.qq.com/.</span></span><br><span class="line"><span class="string">773511 bytes received from http://www.taobao.com/.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00 Python基础 笔记</title>
      <link href="/2024/05/25/00-Python/"/>
      <url>/2024/05/25/00-Python/</url>
      
        <content type="html"><![CDATA[<h1>Python基础</h1><hr><p><img src="/images/Python-00/image-20240527162449587.png" alt="代码结构如下" loading="lazy"></p><ul><li><p><strong>在</strong> <strong>Python</strong> <strong>中一切皆对象</strong></p></li><li><p>.py 文件怎么在Linux下运行</p><ul><li><p>Shebang 通常在 Unix 系统脚本的中 <strong>第一行开头</strong> 使用，指明 <strong>执行这个脚本文件</strong> 的 <strong>解释程序</strong></p><ul><li><p><strong>使用</strong> <strong>Shebang</strong> <strong>的步骤</strong></p><ol><li><p>使用 which 查询 python3 解释器所在路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">which</span> python3</span></span><br></pre></td></tr></table></figure></li><li><p>修改要运行的 <strong>主</strong> <strong>python</strong> <strong>文件</strong>，在第一行增加以下内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br></pre></td></tr></table></figure></li><li><p>修改 <strong>主</strong> <strong>python</strong> <strong>文件</strong> 的文件权限，增加执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> +x main.py</span></span><br></pre></td></tr></table></figure></li><li><p>在需要时执行程序即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./main.py</span><br></pre></td></tr></table></figure><ul><li><p>常见报错：</p><p><img src="/images/Python-00/image-20240527161733288.png" alt="报错" loading="lazy"></p></li><li><p>解决办法：</p><p><img src="/images/Python-00/image-20240527161823795.png" alt="用LF格式导出" loading="lazy"></p></li></ul></li></ol></li></ul></li></ul></li><li><p>Python在 Ubuntu 中的安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3</span><br><span class="line">sudo apt install ipython3</span><br></pre></td></tr></table></figure><ul><li><p>执行 Python 程序的三种方式</p><ol><li><p>解释器 —— python / python3</p></li><li><p>交互式 —— ipython</p></li><li><p>集成开发环境 —— PyCharm</p></li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello python&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这后面不要加 ; ，不能将两个print语句写在一行上</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Python</strong> <strong>的解释器</strong> 如今有多个语言的实现，包括：</p><ul><li><p><strong>CPython</strong> <strong>——</strong> <strong>官方版本的</strong> <strong>C</strong> <strong>语言实现</strong></p><ul><li>目前主流的，我们现在使用的</li></ul></li><li><p>Jython —— 可以运行在 Java 平台</p></li><li><p>IronPython —— 可以运行在 .NET 和 Mono 平台</p></li><li><p>PyPy —— Python 实现的，支持 JIT 即时编译</p></li></ul></li><li><p><strong>IPython</strong></p><ul><li><p>IPython 中 的 “I” 代表 <strong>交互</strong> <strong>interactive</strong></p></li><li><p>特点：</p><ul><li><p>IPython 是一个 python 的 <strong>交互式</strong> <strong>shell</strong>，比默认的 python shell 好用得多</p></li><li><p>支持自动补全</p></li><li><p>自动缩进</p></li><li><p>支持 bash shell 命令</p></li><li><p>内置了许多很有用的功能和函数</p></li><li><p>IPython 是基于 BSD 开源的</p><p><img src="/images/Python-00/image-20240525184128487.png" alt="Ubuntu截图" loading="lazy"></p></li></ul></li></ul></li><li><p>注释</p><ul><li>单行注释 <code>#</code></li><li>多行注释 <code>&quot;&quot;&quot;</code></li></ul></li><li><p>Python遵守的编程规范：<a href="https://www.python.org/dev/peps/pep-0008/"><strong>PEP8</strong></a></p></li><li><p>Python是区分大小写的</p></li></ul><hr><h2 id="变量"><a class="headerlink" href="#变量"></a>变量</h2><ul><li><p>在 Python 中，每个变量 <strong>在使用前都必须赋值</strong>，变量 <strong>赋值以后</strong> 该变量 <strong>才会被</strong>创建</p></li><li><p>等号（=）用来给变量赋值</p><ul><li><p>= 左边是一个变量名</p></li><li><p>= 右边是存储在变量中的值</p><p><img src="/images/Python-00/image-20240525191308796.png" alt loading="lazy"></p></li></ul></li><li><p>变量的类型</p><ul><li><p>在内存中创建一个变量，会包括：</p><ol><li><p>变量的名称</p></li><li><p>变量保存的数据</p></li><li><p><strong>变量存储数据的类型</strong></p></li><li><p>变量的地址（标示）</p></li></ol></li><li><p>分类</p><ul><li><p>数字型</p><ul><li><p>整型 (int)</p><ul><li><p>不存在整型数溢出的问题</p></li><li><p>二进制 <code>bin</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num=<span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">123</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0b1111011</span></span><br><span class="line"><span class="comment"># 0b代表二进制</span></span><br></pre></td></tr></table></figure></li><li><p>八进制 <code>oct</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num=<span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">123</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0o173</span></span><br><span class="line"><span class="comment"># 0o代表八进制</span></span><br></pre></td></tr></table></figure></li><li><p>十六进制 <code>hex</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num=<span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">123</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x7b</span></span><br><span class="line"><span class="comment"># 0x代表十六进制</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>浮点型（float）</p></li><li><p>布尔型（bool）</p><ul><li><p>真 <strong>True</strong> 非 0 数 —— <strong>非零即真，首字母要大写</strong>，假 <strong>False</strong> 0</p></li><li><p>布尔类型可以做数值运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">3</span>+<span class="literal">True</span></span><br><span class="line"><span class="comment"># 结果 i 为 4</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>复数型 (complex)</p><ul><li>主要用于科学计算</li></ul></li></ul></li><li><p>非数字型</p><ul><li><p>字符串</p><ul><li><p>字符串变量 之间使用 <strong>+</strong> 拼接字符串</p></li><li><p>字符串变量 可以和 整数 使用 ***** 重复拼接相同的字符串</p></li><li><p>数字型变量 和 字符串 之间 不能进行其他计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firstName = <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span>+firstName) <span class="comment"># 不支持整形与字符串相加</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>列表</p></li><li><p>元组</p></li><li><p>字典</p></li><li><p>集合</p></li></ul></li></ul></li></ul></li><li><p>使用 type 函数可以查看一个变量的类型</p><p><img src="/images/Python-00/image-20240525193119271.png" alt loading="lazy"></p></li><li><p>制表符</p><img src="/images/Python-00/image-20240525195308850.png" alt="制表符" style="zoom:80%;"></li><li><p><strong>input</strong> <strong>函数实现键盘输入</strong></p><ul><li><p>在 Python 中可以使用 input 函数从键盘等待用户的输入</p></li><li><p>用户输入的 <strong>任何内容</strong> Python 都认为是一个 <strong>字符串</strong></p></li><li><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串变量 = <span class="built_in">input</span>(<span class="string">&quot;提示信息：&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>类型转换函数</strong></p><ul><li><code>int(x)</code><ul><li>将 x 转换为一个整数</li></ul></li><li><code>float(x)</code><ul><li>将 x 转换到一个浮点数</li></ul></li></ul></li><li><p><strong>变量的格式化输出</strong></p><ul><li><p>语法规则如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出单个成员</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;格式化字符串&quot;</span> % 变量 <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出多个成员</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;格式化字符串&quot;</span> % (变量 <span class="number">1</span>, 变量 <span class="number">2.</span>..))</span><br></pre></td></tr></table></figure><ul><li><p>格式化字符</p><ul><li><code>%s</code>：字符串</li><li><code>%d</code> ：有符号十进制整数<ul><li><code>%06d</code> 表示输出的整数显示位数，不足的地方使用 <strong>0</strong> 补全</li></ul></li><li><code>%f</code> ：浮点数<ul><li><code>%.2f</code> 表示小数点后只显示两位</li></ul></li><li><code>%%</code> ：输出 %</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;小王&quot;</span></span><br><span class="line">student_no=<span class="number">123456</span></span><br><span class="line">price=<span class="number">3.2814</span></span><br><span class="line">weight=<span class="number">10.234</span></span><br><span class="line">money=price*weight</span><br><span class="line">scale=<span class="number">0.91</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的名字叫 %s，请多多关照！&quot;</span> % name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的学号是 %06d&quot;</span> % student_no)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;苹果单价 %.02f 元／斤，购买 %.02f 斤，需要支付 %.02f 元&quot;</span> % (price, weight, money))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据比例是 %.02f%%&quot;</span> % (scale * <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我的名字叫 小王，请多多关照！</span></span><br><span class="line"><span class="string">我的学号是 123456</span></span><br><span class="line"><span class="string">苹果单价 3.28 元／斤，购买 10.23 斤，需要支付 33.56 元</span></span><br><span class="line"><span class="string">数据比例是 91.00%</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>变量的命名规则</strong></p><ul><li>下划线命名法</li><li>驼峰命名法</li><li>注意：函数名、变量名和文件名应该是描述性的，尽量避免缩写</li></ul></li><li><p>在 Python 中 <strong>变量</strong> 和 <strong>数据</strong> 是分开存储的</p><ul><li><p><strong>数据</strong> 保存在内存中的一个位置</p></li><li><p><strong>变量</strong> 中保存着数据在内存中的地址</p></li><li><p><strong>变量</strong> 中 <strong>记录数据的地址</strong>，就叫做 <strong>引用</strong></p></li><li><p>使用 id() 函数可以查看变量中保存数据所在的 <strong>内存地址</strong></p></li><li><p>如果变量已经被定义，当给一个变量赋值的时候，本质上是 <strong>修改了数据的引用</strong></p><ul><li><p>变量 <strong>不再</strong> 对之前的数据引用</p></li><li><p>变量 <strong>改为</strong> 对新赋值的数据引用</p></li></ul></li></ul></li><li><p><strong>局部变量 和 全局变量</strong></p><ul><li><p><strong>局部变量</strong> 是在 <strong>函数内部</strong> 定义的变量，<strong>只能在函数内部使用</strong></p><ul><li><p><strong>局部变量的生命周期</strong></p><ul><li><p>所谓 <strong>生命周期</strong> 就是变量从 <strong>被创建</strong> 到 <strong>被系统回收</strong> 的过程</p></li><li><p><strong>局部变量</strong> 在 <strong>函数执行时</strong> 才会被创建</p></li><li><p><strong>函数执行结束后</strong> 局部变量 <strong>被系统回收</strong></p></li><li><p><strong>局部变量在生命周期</strong> 内，可以用来存储 <strong>函数内部临时使用到的数据</strong></p></li></ul></li></ul></li><li><p><strong>全局变量</strong> 是在 <strong>函数外部定义</strong> 的变量（没有定义在某一个函数内），<strong>所有函数</strong>内部 <strong>都可以使用这个变量</strong></p><ul><li><p>如果在函数中需要修改全局变量，需要使用 <code>global</code> 进行声明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_num</span>():</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num = num + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">change_num()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num = %d&quot;</span> % num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># num = 2</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>__main__</code>下面的是全局变量</p></li></ul></li><li><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>():</span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for 或者 while 内定义的变量在函数内均有效</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">        num1 = <span class="number">200</span></span><br><span class="line">    <span class="built_in">print</span>(num1)</span><br><span class="line">    </span><br><span class="line">demo()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">200</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="运算符"><a class="headerlink" href="#运算符"></a>运算符</h2><h3 id="关系运算符"><a class="headerlink" href="#关系运算符"></a>关系运算符</h3><ul><li><p>Python的除法 <code>/</code> 默认是非整除的</p><p>eg：10 / 20 = 0.5</p></li><li><p>取整除：<code>//</code></p></li><li><p>幂：<code>**</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数，通过 def，下面是算数运算</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span> / <span class="number">2</span>)  <span class="comment"># 不是整除</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span> // <span class="number">2</span>)  <span class="comment"># 是整除</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span> % <span class="number">2</span>)  <span class="comment"># 取余 取模</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span> ** <span class="number">3</span>)  <span class="comment"># 2的3次方</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span> + <span class="number">5</span> - <span class="number">2</span>)  <span class="comment"># 相同优先级从左到右</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关系运算</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">relation</span>():</span><br><span class="line">    year=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入年份&quot;</span>))</span><br><span class="line">    <span class="comment"># 判断是闰年</span></span><br><span class="line">    <span class="built_in">print</span>(year % <span class="number">400</span> == <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当作程序的入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    calc()</span><br><span class="line">    relation()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">2.5</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">8</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">请输入年份 1000</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>Python支持某个数关系连写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">relation</span>():</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数：&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span> &lt; num &lt; <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当作程序的入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    relation()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">请输入一个数：4</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">请输入一个数：2</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="逻辑运算符"><a class="headerlink" href="#逻辑运算符"></a>逻辑运算符</h3><ul><li><p><strong>and 是遇假则假，都真返回后一个</strong></p></li><li><p><strong>or 是遇真则真，否则返回前一个</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">logic</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">and</span> <span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">or</span> <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当作程序的入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    logic()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="赋值运算符"><a class="headerlink" href="#赋值运算符"></a>赋值运算符</h3><ul><li><p>在 Python 中，使用 <code>=</code> 可以给变量赋值</p></li><li><p><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>//=</code>、<code>%=</code>、<code>**=</code></p></li><li><p>两个数进行交换，不需要第三个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exchange</span>():</span><br><span class="line">    a = <span class="number">3</span></span><br><span class="line">    b = <span class="number">5</span></span><br><span class="line">    a, b = b, a</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a = %d&quot;</span> % a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;b = %d&quot;</span> % b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当作程序的入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exchange()</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">a = 5</span></span><br><span class="line"><span class="string">b = 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>Tips</strong>:</p><ol><li>电信带宽：100M bit / 8 = 12.5M</li><li>磁盘厂商：1G = 1000 * 1000 * 1000</li></ol><p><img src="/images/Python-00/image-20240526163124021.png" alt="Python 运算符优先级和结合性一览表" loading="lazy"></p><ul><li><strong>异或</strong>运算<ul><li>两个相同的数异或等于 0<ul><li>eg：5 ^ 5 = 0</li></ul></li><li>任何一个数和零异或是自身<ul><li>eg：5 ^ 0 = 5</li></ul></li></ul></li></ul><hr><h2 id="判断语句"><a class="headerlink" href="#判断语句"></a>判断语句</h2><ul><li><p>if 基本语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 要判断的条件:</span><br><span class="line">    <span class="comment"># 下面是4个空格</span></span><br><span class="line">    <span class="comment"># 代码的缩进为一个 tab 键，或者 4 个空格 —— 建议使用空格</span></span><br><span class="line">    条件成立时，要做的事情</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li><li><p>not 的优先级低于 关系运算符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">use_if</span>():</span><br><span class="line">    score = <span class="number">50</span></span><br><span class="line">    <span class="comment"># 只要有一门成绩及格就通过</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> score &gt; <span class="number">60</span> <span class="keyword">or</span> score &gt; <span class="number">60</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;pass&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当作程序的入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    use_if()</span><br></pre></td></tr></table></figure></li><li><p>elif 基本语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件 <span class="number">1</span>:</span><br><span class="line">条件 <span class="number">1</span> 满足执行的代码</span><br><span class="line">...</span><br><span class="line"><span class="keyword">elif</span> 条件 <span class="number">2</span>:</span><br><span class="line">条件 <span class="number">2</span> 满足时，执行的代码</span><br><span class="line">...</span><br><span class="line"><span class="keyword">elif</span> 条件 <span class="number">3</span>:</span><br><span class="line">条件 <span class="number">3</span> 满足时，执行的代码</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">以上条件都不满足时，执行的代码</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>生成一个随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">randomNumber</span>():</span><br><span class="line">    num = random.randint(<span class="number">12</span>, <span class="number">20</span>);  <span class="comment"># 生成的随机范围：12 &lt;= num &lt;= 20</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;随机数: %d&quot;</span> % num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    randomNumber()</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="循环语句"><a class="headerlink" href="#循环语句"></a>循环语句</h2><ul><li><p><strong>while 语句</strong>基本语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件(判断 计数器 是否达到 目标次数):</span><br><span class="line">条件满足时，做的事情 <span class="number">1</span></span><br><span class="line">条件满足时，做的事情 <span class="number">2</span></span><br><span class="line">条件满足时，做的事情 <span class="number">3</span></span><br><span class="line">...(省略)... 处理条件(计数器 + <span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>判断程序是在死循环还是在 input：通过cpu占用率来看，如果cpu占用率为0，那么是input，如果cpu占用率很高，就是死循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cal_sum</span>():</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">        result += i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0 ~ 100 之间的数字求和结果：%d&quot;</span> % result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cal_sum()</span><br></pre></td></tr></table></figure></li><li><p><strong>break 和 continue</strong></p><ul><li><p>break 和 continue 是专门在循环中使用的关键字</p><ul><li>break <strong>某一条件满足时</strong>，退出循环，循环结束，不再执行后续重复的代码</li><li>continue <strong>某一条件满足时</strong>，不执行后续循环内部的代码，开始下一轮循环</li></ul></li><li><p>break 和 continue 只针对 <strong>当前所在循环</strong> 有效</p></li></ul></li><li><p><code>end = &quot;\t&quot;</code></p><ul><li>表示输出结果后，不换行</li><li>“\t” 可以在控制台输出一个制表符，协助在输出文本时对其</li></ul></li><li><p><strong>for 循环</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">use_for</span>():</span><br><span class="line">    a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="built_in">print</span>(i , end = <span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="comment"># 在每输出的数后面加一个空格</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">use_for_range</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="built_in">print</span>(i , end = <span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    use_for()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    use_for_range()</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1 2 3 </span></span><br><span class="line"><span class="string">------</span></span><br><span class="line"><span class="string">1 2 3 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="函数基础"><a class="headerlink" href="#函数基础"></a>函数基础</h2><ul><li><p>Python中一切皆对象</p></li><li><p>定义函数的格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>():</span><br><span class="line">函数封装的代码</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ul><li><p>def 是英文 define 的缩写</p></li><li><p><strong>函数名称</strong> 应该能够表达 <strong>函数封装代码</strong> 的功能，方便后续的调用</p></li><li><p><strong>函数名称</strong> 的命名应该 <strong>符合 标识符的命名规则</strong></p><ul><li><p>可以由 <strong>字母</strong>、<strong>下划线</strong> 和 <strong>数字</strong> 组成</p></li><li><p><strong>不能以数字开头</strong></p></li><li><p><strong>不能与关键字重名</strong></p></li></ul></li></ul></li><li><p>函数参数的使用</p><ul><li>在函数名的后面的小括号内部填写 <strong>参数</strong></li><li>多个参数之间使用 , 分隔</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_2_num</span>(<span class="params">num1, num2</span>):</span><br><span class="line">    result = num1 + num2;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d + %d = %d&quot;</span> % (num1, num2, result))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sum_2_num(<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure></li><li><p>函数的嵌套调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_2_num</span>(<span class="params">num1, num2</span>):</span><br><span class="line">    result = num1 + num2;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_plus_sum</span>():</span><br><span class="line">    result = sum_2_num(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    result += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result = %d&quot;</span> % sum_plus_sum())</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># result = 4</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用模块中的函数</strong></p><ul><li><p><strong>模块是</strong> <strong>Python</strong> <strong>程序架构的一个核心概念</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xxx</span><br></pre></td></tr></table></figure><ul><li>一切py文件皆模块</li><li>并且不能以数字开头</li></ul></li><li><p><strong>模块</strong> 就好比是 <strong>工具包</strong>，要想使用这个工具包中的工具，就需要 <strong>导入</strong> <strong>import</strong>这个模块</p></li><li><p><strong>每一个以扩展名</strong> <strong>py</strong> <strong>结尾的</strong> <strong>Python</strong> <strong>源代码文件都是一个 模块</strong></p></li><li><p>在模块中定义的 <strong>全局变量</strong> 、 <strong>函数</strong> 都是模块能够提供给外界直接使用的工具</p></li></ul></li><li><p><strong>Pyc</strong> <strong>文件</strong></p><ul><li><p>C 是 compiled <strong>编译过</strong> 的意思</p></li><li><p>Python 在解释源程序时是分成两个步骤的</p><ol><li><p>首先处理源代码，<strong>编译</strong> 生成一个二进制 <strong>字节码</strong></p></li><li><p>再对 <strong>字节码</strong> 进行处理，才会生成 CPU 能够识别的 <strong>机器码</strong></p></li></ol><p>有了模块的字节码文件之后，下一次运行程序时，如果在 <strong>上次保存字节码之****后</strong> 没有修改过源代码，Python 将会加载 .pyc 文件并跳过编译这个步骤</p></li></ul></li><li><p>在 Python 中，函数的 <strong>实参</strong>/<strong>返回值</strong> 都是是靠 <strong>引用</strong> 来传递来的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d 在函数内的内存地址是 %x&quot;</span> % (num, <span class="built_in">id</span>(num)))</span><br><span class="line">    result = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;返回值 %d 在内存中的地址是 %x&quot;</span> % (result, <span class="built_in">id</span>(result)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">big_int_id</span>():</span><br><span class="line">    a = -<span class="number">300</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a 的地址：%x&quot;</span> % <span class="built_in">id</span>(a))</span><br><span class="line">    b = -<span class="number">300</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;b 的地址：%x&quot;</span> % <span class="built_in">id</span>(b))</span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;调用函数前 内存地址是 %x&quot;</span> % <span class="built_in">id</span>(a))</span><br><span class="line">r = test(a) <span class="comment"># a 的值不会发生改变</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用函数前 内存地址是 278a6b06a50</span></span><br><span class="line"><span class="string">--------------------------------------------------</span></span><br><span class="line"><span class="string">10 在函数内的内存地址是 278a6b06a50</span></span><br><span class="line"><span class="string">返回值 100 在内存中的地址是 278a6b355d0</span></span><br><span class="line"><span class="string">--------------------------------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>Python会把一些比较小的数或者那些比较常用的数 （-5 ~ 256）提前存储在内存中，如果你取出的数字在这个范围内，每次标号都指向你要取出的数<ul><li>int 清楚写了<code>[-5, 256]</code>，这些小整数被定义在这个对象池中，所以当引用小整数时会自动引用整数对象池里的对象</li><li>好处：每次去初始化这些小整数变量，速度很快，无需构造数值对象</li></ul></li><li>Python 一个数值默认占用的空间是 28 个字节</li><li>float类型可以认为每个赋值都是创建一个对象。因为float有点多，所以没必要和int一样了</li><li></li></ul></li><li><p><strong>可变和不可变类型</strong></p><ul><li><p><strong>不可变类型</strong>，<strong>内存中的数据不允许被修改：</strong></p><ul><li><p>不可变类型只能通过赋值运算符对其直接赋值，这样地址会发生改变</p></li><li><p>数字类型 int, bool, float, complex, long(2.x)</p></li><li><p>字符串 str</p></li><li><p>元组 tuple</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">use_tuple</span>():</span><br><span class="line">    demo_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(demo_tuple))</span><br><span class="line"></span><br><span class="line">    demo_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(demo_tuple))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    use_tuple()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1844313522048</span></span><br><span class="line"><span class="string">1844314724736</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">use_same_tuple</span>():</span><br><span class="line">    demo_tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(demo_tuple1))</span><br><span class="line"></span><br><span class="line">    demo_tuple2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(demo_tuple2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    use_same_tuple()</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3127796404416</span></span><br><span class="line"><span class="string">3127796404416</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>可变类型</strong>，<strong>内存中的数据可以被修改：</strong></p><ul><li><p>可变类型就是无论是通过 append、pop、remove、list[i]赋值 等都不会改变原本可变类型的地址</p></li><li><p>可变数据类型可以在子函数中通过其接口修改数据空间中的值</p></li><li><p><strong>列表</strong> <strong>list</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">函数中去改变函数外某个变量值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">demo_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]   <span class="comment"># demo_list 是一个列表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(demo_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;demo_list 列表的内存地址：%d&quot;</span> % <span class="built_in">id</span>(demo_list))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(demo_list[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(demo_list[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(demo_list[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">demo_list[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;demo_list 列表改变后的内存地址：%d&quot;</span> % <span class="built_in">id</span>(demo_list))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">demo_list 列表的内存地址：1948616577664</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">demo_list 列表改变后的内存地址：1948616577664</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>字典</strong> <strong>dict</strong></p></li><li><p><strong>集合 set</strong></p></li></ul></li></ul></li><li><p><strong>哈希</strong> <strong>(hash)</strong></p><ul><li><p>Python 中内置有一个名字叫做 hash(o) 的函数</p><ul><li><p>接收一个 <strong>不可变类型</strong> 的数据作为 <strong>参数</strong></p></li><li><p><strong>返回</strong> 结果是一个 <strong>整数</strong></p></li></ul></li><li><p>哈希 是一种 <strong>算法</strong>，其作用就是提取数据的 <strong>特征码（指纹）</strong></p><ul><li><p><strong>相同的内容</strong> 得到 <strong>相同的结果</strong></p></li><li><p><strong>不同的内容</strong> 得到 <strong>不同的结果</strong></p></li></ul></li><li><p>在 Python 中，设置字典的 <strong>键值对</strong> 时，会首先对 key 进行 hash 已决定如何在内存中保存字典的数据，以方便 <strong>后续</strong> 对字典的操作：<strong>增、删、改、查</strong></p><ul><li><p>键值对的 <strong>key</strong> 必须是<strong>不可变类型数据</strong></p></li><li><p>键值对的 <strong>value</strong> 可以是<strong>任意类型的数据</strong></p></li></ul></li></ul></li></ul><hr><h2 id="高级变量类型"><a class="headerlink" href="#高级变量类型"></a>高级变量类型</h2><p><strong>目标</strong></p><ul><li>列表</li><li>元组</li><li>字典</li><li>字符串</li><li>集合</li></ul><p>在 Python 中，所有 <strong>非数字型变量</strong> 都支持以下特点：</p><ol><li><p>都是一个 <strong>序列</strong> sequence，也可以理解为 <strong>容器</strong></p></li><li><p><strong>取值</strong> [ ]</p></li><li><p><strong>遍历</strong> in</p></li><li><p><strong>计算长度</strong>、<strong>最大</strong>/<strong>最小值</strong>、<strong>比较</strong>、<strong>删除</strong></p></li><li><p><strong>链接</strong> + 和 <strong>重复</strong></p></li><li><p><strong>切片</strong></p></li></ol><h3 id="列表"><a class="headerlink" href="#列表"></a>列表</h3><ul><li>List（列表） 是 Python 中使用 <strong>最频繁</strong> 的数据类型，在其他语言中通常叫做<strong>数组</strong></li><li>专门用于存储 <strong>一串 信息</strong></li><li>列表用 <code>[]</code> 定义，<strong>数据</strong> 之间使用 <code>,</code> 分隔</li><li>列表的 <strong>索引</strong> 从 0 开始</li><li><strong>列表的使用场景</strong><ul><li><strong>列表</strong> 中可以 <strong>存储不同类型的数据</strong></li><li>通过 <strong>迭代遍历</strong>，在循环体内部，针对列表中的每一项元素，执行相同的操作</li></ul></li></ul><p><img src="/images/Python-00/image-20240527144248516.png" alt="列表示意图" loading="lazy"></p><table><thead><tr><th>序号</th><th>分类</th><th>关键字 / 函数 / 方法</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td><strong>增加</strong></td><td>列表.insert(索引, 数据)</td><td>在指定位置插入数据</td></tr><tr><td></td><td></td><td>列表.append(数据)</td><td>在末尾追加数据</td></tr><tr><td></td><td></td><td>列表.extend(列表 2)</td><td>将列表 2 的数据追加到列表</td></tr><tr><td>2</td><td><strong>修改</strong></td><td>列表[索引] = 数据</td><td>修改指定索引的数据</td></tr><tr><td>3</td><td><strong>删除</strong></td><td>del 列表[索引]</td><td>删除指定索引的数据</td></tr><tr><td></td><td></td><td>列表.remove(数据)</td><td>删除第一个出现的指定数据</td></tr><tr><td></td><td></td><td>列表.pop</td><td>删除末尾数据</td></tr><tr><td></td><td></td><td>列表.pop(索引)</td><td>删除指定索引的数据</td></tr><tr><td></td><td></td><td>列表.clear</td><td>清空列表</td></tr><tr><td></td><td></td><td>del 列表[索引]</td><td>del会删除指定的元素，与pop功能一致</td></tr><tr><td>4</td><td><strong>统计</strong></td><td>len(列表)</td><td>列表长度</td></tr><tr><td></td><td></td><td>列表.count(数据)</td><td>数据在列表中出现的次数</td></tr><tr><td></td><td></td><td>index</td><td>搜某个值的索引值</td></tr><tr><td>5</td><td><strong>排序</strong></td><td>列表.sort()</td><td>升序排序</td></tr><tr><td></td><td></td><td>列表.sort(reverse=True)</td><td>降序排序</td></tr><tr><td></td><td></td><td>列表.reverse()</td><td>逆序、反转（本身不做排序操作），不可以传参</td></tr><tr><td></td><td></td><td>默认使用的算法是 归并排序</td><td></td></tr></tbody></table><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;wangwu&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">0</span>])  <span class="comment"># zhangsan</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name_list.index(<span class="string">&quot;wangwu&quot;</span>))  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">name_list.append(<span class="string">&quot;zhaoliu&quot;</span>)  <span class="comment"># [&#x27;zhangsan&#x27;, &#x27;lisi&#x27;, &#x27;wangwu&#x27;, &#x27;zhaoliu&#x27;]</span></span><br><span class="line"></span><br><span class="line">name_list.insert(<span class="number">1</span>, <span class="string">&quot;wanger&quot;</span>)  <span class="comment"># [&#x27;zhangsan&#x27;, &#x27;wanger&#x27;, &#x27;lisi&#x27;, &#x27;wangwu&#x27;, &#x27;zhaoliu&#x27;]</span></span><br><span class="line"></span><br><span class="line">name_list.extend([<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>])  <span class="comment"># [&#x27;zhangsan&#x27;, &#x27;wanger&#x27;, &#x27;lisi&#x27;, &#x27;wangwu&#x27;, &#x27;zhaoliu&#x27;, &#x27;zhangsan&#x27;, &#x27;lisi&#x27;]</span></span><br><span class="line"></span><br><span class="line">name_list.remove(<span class="string">&quot;zhangsan&quot;</span>)  <span class="comment"># [&#x27;wanger&#x27;, &#x27;lisi&#x27;, &#x27;wangwu&#x27;, &#x27;zhaoliu&#x27;, &#x27;zhangsan&#x27;, &#x27;lisi&#x27;]</span></span><br><span class="line"></span><br><span class="line">name_list.pop(<span class="number">2</span>)  <span class="comment"># [&#x27;wanger&#x27;, &#x27;lisi&#x27;, &#x27;zhaoliu&#x27;, &#x27;zhangsan&#x27;, &#x27;lisi&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> name_list[<span class="number">0</span>]  <span class="comment"># [&#x27;lisi&#x27;, &#x27;zhaoliu&#x27;, &#x27;zhangsan&#x27;, &#x27;lisi&#x27;]</span></span><br><span class="line"></span><br><span class="line">name_list.sort()  <span class="comment"># [&#x27;lisi&#x27;, &#x27;lisi&#x27;, &#x27;zhangsan&#x27;, &#x27;zhaoliu&#x27;]</span></span><br><span class="line"></span><br><span class="line">name_list.sort(reverse=<span class="literal">True</span>)  <span class="comment"># [&#x27;zhaoliu&#x27;, &#x27;zhangsan&#x27;, &#x27;lisi&#x27;, &#x27;lisi&#x27;]</span></span><br><span class="line"></span><br><span class="line">name_list.reverse()  <span class="comment"># [&#x27;lisi&#x27;, &#x27;lisi&#x27;, &#x27;zhangsan&#x27;, &#x27;zhaoliu&#x27;]</span></span><br><span class="line"></span><br><span class="line">name_list.clear()  <span class="comment"># []</span></span><br></pre></td></tr></table></figure><hr><h4 id="列表生成式"><a class="headerlink" href="#列表生成式"></a>列表生成式</h4><ul><li><p>列表推导式：用来快速地生成列表</p><ul><li>好处：代码比较短</li><li>坏处：可读性差</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[元素表达式 <span class="keyword">if</span>(条件) <span class="keyword">else</span> <span class="keyword">for</span> 变量 in 迭代对象 ]</span><br></pre></td></tr></table></figure></li></ul><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">a = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与下面的等价</span></span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    b.append(x)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个for循环</span></span><br><span class="line">a = [j <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i)]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[0, 0, 1, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 4, </span></span><br><span class="line"><span class="string">0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, </span></span><br><span class="line"><span class="string">3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">a = [[col * row <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8], [0, 3, 6, 9, 12], [0, 4, 8, 12, 16]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维列表转一维列表</span></span><br><span class="line">a = [j <span class="keyword">for</span> x <span class="keyword">in</span> a <span class="keyword">for</span> j <span class="keyword">in</span> x]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 2, 4, 6, 8, 0, 3, 6, 9, 12, 0, 4, 8, 12, 16]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有if时</span></span><br><span class="line">a = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]  <span class="comment"># 只会筛选出偶数</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># if-else的三元表达式</span></span><br><span class="line">a = [x <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><hr><h3 id="元组"><a class="headerlink" href="#元组"></a>元组</h3><ul><li><p>Tuple（元组）与列表类似，不同之处在于元组的 <strong>元素不能修改</strong></p><ul><li><strong>元组</strong> 表示多个元素组成的序列</li><li><strong>元组</strong> 在 Python 开发中，有特定的应用场景</li></ul></li><li><p>用于存储 <strong>一串 信息</strong>，<strong>数据</strong> 之间使用 <code>,</code> 分隔</p></li><li><p>元组用 <code>()</code> 定义</p></li><li><p>元组的 <strong>索引</strong> 从 0 开始</p></li><li><p><strong>元组的应用场景</strong></p><ul><li><strong>函数的 参数 和 返回值</strong>，一个函数可以接收 <strong>任意多个参数</strong>，或者 <strong>一次返回多个数据</strong></li><li><strong>格式字符串</strong>，格式化字符串后面的 () 本质上就是一个元组</li><li><strong>列表不可以被修改</strong>，以保护数据安全</li></ul></li><li><p><strong>元组中 只包含一个元素 时，需要 在元素后面添加<code>,</code>，不加逗号就是整型元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info_tuple = (<span class="number">50</span>, )</span><br></pre></td></tr></table></figure><p><img src="/images/Python-00/image-20240527153817567.png" alt="元组示意图" loading="lazy"></p></li></ul><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">info_tuple = (<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="number">1.75</span>, <span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 取值和取索引</span></span><br><span class="line"><span class="built_in">print</span>(info_tuple[<span class="number">0</span>])  <span class="comment"># zhangsan</span></span><br><span class="line"><span class="comment"># 已经知道数据的内容，希望知道该数据在元组中的索引</span></span><br><span class="line"><span class="built_in">print</span>(info_tuple.index(<span class="string">&quot;zhangsan&quot;</span>))  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 统计计数</span></span><br><span class="line"><span class="built_in">print</span>(info_tuple.count(<span class="string">&quot;zhangsan&quot;</span>))  <span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 统计元组中包含元素的个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(info_tuple))  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><h4 id="格式化字符串"><a class="headerlink" href="#格式化字符串"></a>格式化字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">info_tuple = (<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="number">1.75</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化字符串后面的 `()` 本质上就是元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s 年龄是 %d 身高是 %.2f&quot;</span> % info_tuple)  <span class="comment"># zhangsan 年龄是 18 身高是 1.75</span></span><br><span class="line"></span><br><span class="line">info_str = <span class="string">&quot;%s 年龄是 %d 身高是 %.2f&quot;</span> % info_tuple</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(info_str)  <span class="comment"># zhangsan 年龄是 18 身高是 1.75</span></span><br></pre></td></tr></table></figure><p><strong>元组和列表之间的转换</strong></p><ul><li>使用 list 函数可以把元组转换成列表<ul><li>list(元组)</li></ul></li><li>使用 tuple 函数可以把列表转换成元组<ul><li>tuple(列表)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">info = (<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>)</span><br><span class="line">demo_list = <span class="built_in">list</span>(info)</span><br><span class="line"><span class="built_in">print</span>(demo_list)  <span class="comment"># [&#x27;zhangsan&#x27;, 18]</span></span><br><span class="line">demo_tuple = <span class="built_in">tuple</span>(demo_list)</span><br><span class="line"><span class="built_in">print</span>(demo_tuple)  <span class="comment"># (&#x27;zhangsan&#x27;, 18)</span></span><br></pre></td></tr></table></figure><hr><h3 id="字典"><a class="headerlink" href="#字典"></a>字典</h3><ul><li>dictionary（字典） 是 <strong>除列表以外</strong> Python 之中 <strong>最灵活</strong> 的数据类型</li><li>字典同样可以用来 <strong>存储多个数据</strong><ul><li>通常用于存储 <strong>描述一个</strong> <strong>物体</strong> <strong>的相关信息</strong></li></ul></li><li>和列表的区别<ul><li><strong>列表</strong> 是 <strong>有序</strong> 的对象集合</li><li><strong>字典</strong> 是 <strong>无序</strong> 的对象集合</li></ul></li><li>字典用 <code>&#123;&#125;</code> 定义</li><li>字典使用 <strong>键值对</strong> 存储数据，键值对之间使用 <code>,</code> 分隔<ul><li><strong>键</strong> key 是索引</li><li><strong>值</strong> value 是数据</li><li><strong>键</strong> 和 <strong>值</strong> 之间使用 <code>:</code> 分隔</li><li><strong>键必须是唯一的</strong></li><li><strong>值</strong> 可以取任何数据类型，但 <strong>键</strong> 只能使用 <strong>字符串</strong>、<strong>数字</strong>或 <strong>元组</strong></li></ul></li></ul><p><img src="/images/Python-00/image-20240527163635461.png" alt="字典示意图" loading="lazy"></p><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对字典进行增删查改</span></span><br><span class="line"></span><br><span class="line">xiaoming = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">            <span class="string">&quot;age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="string">&quot;gender&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&quot;height&quot;</span>: <span class="number">1.75</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 新增 修改</span></span><br><span class="line">xiaoming[<span class="string">&#x27;408&#x27;</span>] = <span class="number">120</span></span><br><span class="line"><span class="built_in">print</span>(xiaoming)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;小明&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: True, &#x27;height&#x27;: 1.75, &#x27;408&#x27;: 120&#125;</span></span><br><span class="line"></span><br><span class="line">xiaoming[<span class="string">&#x27;408&#x27;</span>] = <span class="number">125</span></span><br><span class="line"><span class="built_in">print</span>(xiaoming)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;小明&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: True, &#x27;height&#x27;: 1.75, &#x27;408&#x27;: 125&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setdefault 只会新增，不会修改</span></span><br><span class="line">xiaoming.setdefault(<span class="string">&#x27;408&#x27;</span>, <span class="number">130</span>)</span><br><span class="line"></span><br><span class="line">xiaoming.update(&#123;<span class="string">&#x27;math&#x27;</span>: <span class="number">120</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(xiaoming)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;小明&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: True, &#x27;height&#x27;: 1.75, &#x27;408&#x27;: 125, &#x27;math&#x27;: 120&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 删除</span></span><br><span class="line"><span class="keyword">del</span> xiaoming[<span class="string">&#x27;math&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(xiaoming)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;小明&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: True, &#x27;height&#x27;: 1.75, &#x27;408&#x27;: 125&#125;</span></span><br><span class="line"></span><br><span class="line">xiaoming.pop(<span class="string">&#x27;math&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(xiaoming)</span><br><span class="line"><span class="comment"># # &#123;&#x27;name&#x27;: &#x27;小明&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: True, &#x27;height&#x27;: 1.75, &#x27;408&#x27;: 125&#125;</span></span><br><span class="line"></span><br><span class="line">xiaoming.popitem()  <span class="comment"># 随机删除</span></span><br><span class="line"></span><br><span class="line">xiaoming.clear()  <span class="comment"># 清空字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 查询</span></span><br><span class="line"><span class="built_in">print</span>(xiaoming[<span class="string">&#x27;408&#x27;</span>])  <span class="comment"># 这个不会返回值，程序会崩溃</span></span><br><span class="line"><span class="built_in">print</span>(xiaoming.get(<span class="string">&#x27;408&#x27;</span>))  <span class="comment"># 最好用这个，如果键值不存在会返回null，会接着运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xiaoming:</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 默认是key</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xiaoming.values():</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 默认是value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xiaoming.items():</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 会输出key和value的元组组合</span></span><br></pre></td></tr></table></figure><hr><h3 id="字符串"><a class="headerlink" href="#字符串"></a>字符串</h3><ul><li><strong>字符串</strong> 就是 <strong>一串字符</strong>，是编程语言中表示文本的数据类型</li><li>在 Python 中可以使用 <strong>一对双引号</strong> &quot; 或者 <strong>一对单引号</strong> ’ 定义一个字符串<ul><li>虽然可以使用 <code>\&quot;</code> 或者 <code>\'</code> 做字符串的转义，但是在实际开发中<ul><li>如果字符串内部需要使用 <code>&quot;</code>，可以使用 <code>'</code> 定义字符串</li><li>如果字符串内部需要使用 <code>'</code>，可以使用 <code>&quot;</code> 定义字符串</li></ul></li></ul></li><li>可以使用 <strong>索引</strong> 获取一个字符串中 <strong>指定位置的字符</strong>，索引计数从 <strong>0</strong> 开始</li><li>也可以使用 <strong>循环遍历</strong> 字符串中每一个字符</li></ul><p><img src="/images/Python-00/image-20240527170338554.png" alt="字符串示意图" loading="lazy"></p><h4 id="判断类型"><a class="headerlink" href="#判断类型"></a>判断类型</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.isspace()</td><td>如果 string 中只包含空格，则返回True</td></tr><tr><td>string.isalnum()</td><td>如果 string 至少有一个字符并且所有，字符都是字母或数字则返回 True</td></tr><tr><td>string.isalpha()</td><td>如果 string 至少有一个字符并且所有，字符都是字母则返回 True</td></tr><tr><td>string.isdecimal()</td><td>如果 string 只包含数字则返回 True</td></tr><tr><td>string.islower()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(<strong>区分大小写的)字符都是小写</strong>，则返回 True</td></tr></tbody></table><h4 id="查找与替换"><a class="headerlink" href="#查找与替换"></a>查找与替换</h4><ul><li>可以用正则表达式</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.startswith(str)</td><td>检查字符串是否是以 str 开头，是则返回True</td></tr><tr><td>string.endswith(str)</td><td>检查字符串是否是以 str 结束，是则返回True</td></tr><tr><td>string.find(str, start=0, end=len(string))</td><td>检测 str 是否包含在 string 中，如果start 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 -1</td></tr><tr><td>string.rfind(str, start=0, end=len(string))</td><td>类似于 find()，不过是从右边开始查找</td></tr><tr><td>string.index(str, start=0, end=len(string))</td><td>跟 find() 方法类似，不过如果 str 不在 string 会报错</td></tr><tr><td>string.rindex(str, start=0, end=len(string))</td><td>类似于 index()，不过是从右边开始</td></tr><tr><td>string.replace(old_str, new_str, num=string.count(old))</td><td>把 string 中的 old_str 替换成new_str，如果 num 指定，则替换不超过 num 次  c.replace(“world”,“china”,2)</td></tr></tbody></table><h4 id="大小写转换"><a class="headerlink" href="#大小写转换"></a>大小写转换</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.lower()</td><td>转换 string 中所有大写字符为小写</td></tr><tr><td>string.upper()</td><td>转换 string 中的小写字母为大写</td></tr><tr><td>string.swapcase()</td><td>翻转 string 中的大小写（大写变小写，小写变大写）</td></tr></tbody></table><h4 id="文本对齐"><a class="headerlink" href="#文本对齐"></a>文本对齐</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.ljust(width)</td><td>返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.rjust(width)</td><td>返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.center(width)</td><td>返回一个原字符串居中，并使用空格填充至长度 width 的新字符串</td></tr></tbody></table><h4 id="去除空白字符"><a class="headerlink" href="#去除空白字符"></a>去除空白字符</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.lstrip(char)</td><td>截掉 string 左边（开始）的空白字符,可以去除字符 char</td></tr><tr><td>string.rstrip(char)</td><td>截掉 string 右边（开始）的空白字符,可以去除字符 char</td></tr><tr><td>string.strip(char)</td><td>截掉 string 左右两边（开始）的空白字符,可以去除字符 char</td></tr></tbody></table><h4 id="拆分与连接"><a class="headerlink" href="#拆分与连接"></a>拆分与连接</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><strong>string.split</strong>(str=“”, num)</td><td>以 str 为分隔符拆分 string，如果num 有指定值，则仅分隔 num + 1个子字符串，str <strong>默认包含空格、中文逗号和英文逗号</strong></td></tr><tr><td><strong>string.splitlines()</strong></td><td>splitlines 只是换行，每行字符串的内容不做修改</td></tr><tr><td><strong>string.join(seq)</strong></td><td>以 string 作为分隔符，将 seq 中所有的字符以 string 分割开</td></tr></tbody></table><h4 id="字符串的切片"><a class="headerlink" href="#字符串的切片"></a>字符串的切片</h4><ul><li><p><strong>切片</strong> 方法适用于 <strong>字符串</strong>、<strong>列表</strong>、<strong>元组</strong></p><ul><li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li><li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li><li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li></ul></li><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串[开始索引:结束索引:步长]</span><br></pre></td></tr></table></figure><ul><li><p>注意：</p><ul><li><p>指定的区间属于 <strong>左闭右开</strong> 型 <strong>[开始索引</strong>,<strong>结束索引)</strong> =&gt; 开始索引 &lt;= 范围 &lt;</p><p>结束索引</p><p>从 起始 位开始，到 <strong>结束</strong>位的前一位结束（<strong>不包含结束位本身</strong>)</p></li><li><p>从头开始，<strong>开始索引 数字可以省略，冒号不能省略</strong></p></li><li><p>到末尾结束，<strong>结束索引 数字可以省略，冒号不能省略</strong></p></li><li><p>步长默认为 1，如果连续切片，<strong>数字和冒号都可以省略</strong></p></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># tho</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">2</span>:])  <span class="comment"># thon</span></span><br><span class="line"><span class="built_in">print</span>(str1[:<span class="number">5</span>])  <span class="comment"># pytho</span></span><br><span class="line"><span class="built_in">print</span>(str1[::<span class="number">2</span>])  <span class="comment"># pto</span></span><br><span class="line"><span class="built_in">print</span>(str1[::-<span class="number">1</span>])  <span class="comment"># nohtyp 逆序</span></span><br></pre></td></tr></table></figure><hr><h4 id="集合"><a class="headerlink" href="#集合"></a>集合</h4><ul><li><p>集合里面不能有重复元素，必须是唯一的</p></li><li><p>定义一个空集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">demo_set=<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>add()</td><td>为集合添加元素</td></tr><tr><td>clear()</td><td>移除集合中的所有元素</td></tr><tr><td>copy()</td><td>拷贝一个集合</td></tr><tr><td>difference()</td><td>返回多个集合的差集</td></tr><tr><td>difference_update()</td><td>移除集合中的元素，该元素在指定的集合也存在</td></tr><tr><td>discard()</td><td>删除集合中指定的元素</td></tr><tr><td>intersection()</td><td>返回集合的交集</td></tr><tr><td>intersection_update()</td><td>返回集合的交集，直接在指定集合上进行更新</td></tr><tr><td>isdisjoint()</td><td>判断两个集合是否包含相同的元素，<strong>如果没有返回</strong> <strong>True</strong>，否则返回 false</td></tr><tr><td>issubset()</td><td>判断指定集合是否为该方法参数集合的子集</td></tr><tr><td>issuperset()</td><td>判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td>remove()</td><td>移除指定元素</td></tr><tr><td>symmetric_difference()</td><td>返回两个集合中不重复的元素集合</td></tr><tr><td>symmetric_difference_update()</td><td>移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中</td></tr><tr><td>union()</td><td>返回两个集合的并集</td></tr><tr><td>update()</td><td>给集合添加元素</td></tr></tbody></table><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line">y = &#123;<span class="string">&quot;google&quot;</span>, <span class="string">&quot;microsoft&quot;</span>, <span class="string">&quot;apple&quot;</span>&#125;</span><br><span class="line">z = x.difference(y)</span><br><span class="line"><span class="built_in">print</span>(z)  <span class="comment"># 等于x - y</span></span><br><span class="line"><span class="comment"># &#123;&#x27;cherry&#x27;, &#x27;banana&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>difference_update() 方法与 difference() 方法的区别在：</p><ul><li><p>difference() 方法返回一个移除相同元素的新集合，</p></li><li><p>difference_update() 方法是直接在原来的集合中移除元素，没有返回值。</p></li></ul><p>intersection_update() 方法不同于 intersection() 方法：</p><ul><li><p>intersection() 方法是返回一个新的集合，</p></li><li><p>intersection_update() 方法是在原始的集合上移除不重叠的元素。</p></li></ul><hr><h3 id="公共方法"><a class="headerlink" href="#公共方法"></a>公共方法</h3><h4 id="Python内置函数"><a class="headerlink" href="#Python内置函数"></a>Python内置函数</h4><table><thead><tr><th>函数</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>len(item)</td><td>计算容器中元素个数</td><td></td></tr><tr><td>del(item)</td><td>删除变量</td><td>del 有两种方式(列表，字典，集合)</td></tr><tr><td>max(item)</td><td>返回容器中元素最大值</td><td></td></tr><tr><td>min(item)</td><td>返回容器中元素最小值</td><td></td></tr></tbody></table><h4 id="切片"><a class="headerlink" href="#切片"></a>切片</h4><ul><li>表达式<ul><li>eg：<code>[::-2]</code></li></ul></li><li>支持的数据类型（都是无序的集合，通过 索引值 获取对应数据）<ul><li>字符串</li><li>列表</li><li>元组</li></ul></li><li>不支持的数据类型（都是有序的集合，通过 键值对 保存数据）<ul><li>字典</li><li>集合</li></ul></li></ul><h4 id="运算符-2"><a class="headerlink" href="#运算符-2"></a>运算符</h4><p><img src="/images/Python-00/image-20240527185859044.png" alt="容器常用运算" loading="lazy"></p><p>eg：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>] * <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;d&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) &lt; (<span class="number">2</span>, <span class="number">3</span>, -<span class="number">2</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 一般用 ==</span></span><br></pre></td></tr></table></figure><h5 id="成员运算符"><a class="headerlink" href="#成员运算符"></a>成员运算符</h5><ul><li>用于 <strong>测试</strong> 序列中是否包含指定的 <strong>成员</strong></li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回True，否则返回False</td><td>3 in (1, 2, 3) 返回 True</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回True，否则返回False</td><td>3 not in (1, 2, 3) 返回 False</td></tr></tbody></table><ul><li>在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></li></ul><hr><h2 id="函数进阶"><a class="headerlink" href="#函数进阶"></a>函数进阶</h2><p><img src="/images/Python-00/image-20240528143806300.png" alt="函数的参数和返回值" loading="lazy"></p><ul><li>无参数，无返回值</li><li>无参数，有返回值</li><li>有参数，无返回值</li><li>有参数，有返回值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回值 加还是不加() 返回的都是一个元组</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">measure</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回当前的温度&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始测量...&quot;</span>)</span><br><span class="line">    temp = <span class="number">39</span></span><br><span class="line">    wetness = <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测量结束...&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> temp, wetness</span><br><span class="line">    <span class="comment"># return (temp, wetness)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    temp, wetness = measure()</span><br><span class="line">    <span class="built_in">print</span>(temp, wetness)</span><br></pre></td></tr></table></figure><h3 id="交换两个数的值"><a class="headerlink" href="#交换两个数的值"></a>交换两个数的值</h3><ul><li><p><strong>解法</strong> <strong>1 ——</strong> <strong>使用其他变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tmp = b</span><br><span class="line">b = a</span><br><span class="line">a = tmp</span><br></pre></td></tr></table></figure></li><li><p><strong>解法</strong> <strong>2 ——</strong> <strong>不使用临时变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a + b</span><br><span class="line">b = a - b</span><br><span class="line">a = a - b</span><br></pre></td></tr></table></figure></li><li><p><strong>解法</strong> <strong>3 —— Python</strong> <strong>专有，利用元组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure></li></ul><h3 id="可变参数与不可变参数"><a class="headerlink" href="#可变参数与不可变参数"></a>可变参数与不可变参数</h3><ul><li><p><strong>+=</strong></p><ul><li>在 python 中，<strong>列表变量调用</strong> <strong>+=</strong> <strong>本质上是在执行列表变量的</strong> <strong>extend</strong> <strong>方法，不会修改变量的引用，就是变量的</strong> <strong>id</strong> <strong>值没变</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mutable</span>(<span class="params">num_list</span>):</span><br><span class="line">    num_list += [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="comment"># num_list.extend([1, 2, 3])</span></span><br><span class="line">    <span class="built_in">print</span>(num_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gl_list = [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">mutable(gl_list)</span><br><span class="line"><span class="built_in">print</span>(gl_list)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[6, 7, 8, 1, 2, 3]</span></span><br><span class="line"><span class="string">[6, 7, 8, 1, 2, 3]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="缺省参数"><a class="headerlink" href="#缺省参数"></a>缺省参数</h3><ul><li><p><strong>指定函数的缺省参数</strong></p><ul><li>在参数后使用赋值语句，可以指定参数的缺省值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 缺省参数指传参时可以不传对应的参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">name, gender=<span class="literal">True</span></span>):</span><br><span class="line">    gender_text = <span class="string">&quot;男生&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> gender:</span><br><span class="line">        gender_text = <span class="string">&quot;女生&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s 是 %s&quot;</span> % (name, gender_text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print_info(<span class="string">&quot;zhaosi&quot;</span>)  <span class="comment"># zhaosi 是 男生</span></span><br><span class="line">    print_info(<span class="string">&quot;zhaosi&quot;</span>, <span class="literal">False</span>)  <span class="comment"># zhaosi 是 女生</span></span><br></pre></td></tr></table></figure></li><li><p>缺省参数的定义位置</p><ul><li><p><strong>必须保证 带有默认值的缺省参数 在参数列表末尾</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">name, gender=<span class="literal">True</span>, title</span>):</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 这个是 错误 的</span></span><br><span class="line"><span class="comment"># 缺省参数只能放在 最后</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="多值参数"><a class="headerlink" href="#多值参数"></a>多值参数</h3><ul><li><p>有时可能需要 <strong>一个函数</strong> 能够处理的参数 <strong>个数</strong> 是<strong>不确定的</strong>，这个时候，就可以使用 <strong>多值参数</strong></p></li><li><p>python 中有 <strong>两种</strong> 多值参数：</p><ul><li><p>参数名前增加 <strong>一个</strong> * 可以接收 <strong>元组</strong></p></li><li><p>参数名前增加 <strong>两个</strong> * 可以接收 <strong>字典</strong></p></li></ul></li><li><p>一般在给多值参数命名时，<strong>习惯</strong>使用以下两个名字</p><ul><li><p><code>*args</code> —— 存放 <strong>元组</strong> 参数，前面有一个 *</p></li><li><p><code>**kwargs</code> —— 存放 <strong>字典</strong> 参数，前面有两个 *</p></li></ul></li><li><p>args 是 arguments 的缩写，有变量的含义</p></li><li><p>kw 是 keyword 的缩写，kwargs 可以记忆 <strong>键值对参数</strong></p></li><li><p><code>*args</code> 必须在 <code>**kwargs</code> 前面</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可变参数 也叫 多值参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">num, *args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, name=<span class="string">&quot;小明&quot;</span>, age=<span class="number">18</span>, gender=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># demo(num: 1, *args: 2, 3, 4, 5, **kwargs: name=&quot;小明&quot;, age=18, gender=True)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">(2, 3, 4, 5)</span></span><br><span class="line"><span class="string">&#123;&#x27;name&#x27;: &#x27;小明&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: True&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="解包-unpack"><a class="headerlink" href="#解包-unpack"></a>解包(unpack)</h3><ul><li><p>在调用带有多值参数的函数时，如果希望：</p><ul><li><p>将一个 <strong>元组变量</strong>，直接传递给 args</p></li><li><p>将一个 <strong>字典变量</strong>，直接传递给 kwargs</p></li></ul></li><li><p>就可以使用 <strong>拆包</strong>，简化参数的传递，<strong>拆包</strong> 的方式是：</p><ul><li><p>在 <strong>元组变量前</strong>，增加 <strong>一个</strong> <code>*</code></p><ul><li>效果就是把 (1, 2, 3, 4) 会变成 1, 2, 3, 4</li></ul></li><li><p>在 <strong>字典变量前</strong>，增加 <strong>两个</strong> <code>*</code></p><ul><li>效果就是把 {‘name’: ‘小明’, ‘age’: 18} 变为 name = ‘小明’, age = 18</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要将一个元组变量/字典变量传递给函数对应的参数</span></span><br><span class="line">gl_nums = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">gl_xiaoming = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小明&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会把 gl_nums 和 gl_xiaoming 作为元组传递个 args</span></span><br><span class="line">demo(gl_nums, gl_xiaoming)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">((1, 2, 3), &#123;&#x27;name&#x27;: &#x27;小明&#x27;, &#x27;age&#x27;: 18&#125;)</span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">demo(*gl_nums, **gl_xiaoming)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(1, 2, 3)</span></span><br><span class="line"><span class="string">&#123;&#x27;name&#x27;: &#x27;小明&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1>Python面向对象编程</h1><hr><h2 id="Python-命名规范"><a class="headerlink" href="#Python-命名规范"></a>Python 命名规范</h2><table><thead><tr><th>名称</th><th>写法</th></tr></thead><tbody><tr><td>模块名</td><td>module_name</td></tr><tr><td>包名</td><td>package_name</td></tr><tr><td>方法名</td><td>method_name</td></tr><tr><td>异常名</td><td>ExceptionName</td></tr><tr><td>函数名</td><td>function_name</td></tr><tr><td>全局常量名</td><td>GLOBAL_CONSTANT_NAME</td></tr><tr><td>全局变量名</td><td>global_var_name</td></tr><tr><td>实例名</td><td>instance_var_name</td></tr><tr><td>函数参数名</td><td>function_parameter_name</td></tr><tr><td>局部变量名</td><td>local_var_name</td></tr></tbody></table><p><strong>让Python指向Python3.6：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">bin</span>/python3<span class="number">.6</span> /usr/<span class="built_in">bin</span>/python</span><br></pre></td></tr></table></figure><hr><h2 id="面向对象的基础语法"><a class="headerlink" href="#面向对象的基础语法"></a>面向对象的基础语法</h2><h3 id="dir-内置函数"><a class="headerlink" href="#dir-内置函数"></a>dir 内置函数</h3><ul><li><p>在Python中 <strong>对象是无处不在</strong>的， <strong>变量、数据、函数</strong> 都是对象</p></li><li><p>object类是基类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># object 是 基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, height</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.height = height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s is running&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s is eating&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   <span class="comment"># 初始化一个对象时会调用 __init__</span></span><br><span class="line">   person = Person(<span class="string">&quot;John&quot;</span>, <span class="number">18</span>, <span class="number">187</span>);</span><br><span class="line">   person.run()</span><br><span class="line">   person.eat()</span><br></pre></td></tr></table></figure></li><li><p><strong>提示</strong> <strong>方法名</strong> 格式的方法是 Python 提供的 <strong>内置方法</strong> <strong>/</strong> <strong>属性</strong></p><table><thead><tr><th>序号</th><th>方法名</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td><code>__new__</code></td><td>方法</td><td><strong>创建对象</strong>时，会被 <strong>自动</strong> 调用</td></tr><tr><td>2</td><td><code>__init__</code></td><td>方法</td><td><strong>对象被初始化</strong>时，会被 <strong>自动</strong> 调用</td></tr><tr><td>3</td><td><code>__del__</code></td><td>方法</td><td><strong>对象被从内存中销毁</strong>前，会被 <strong>自动</strong> 调用</td></tr><tr><td>4</td><td><code>__str__</code></td><td>方法</td><td>返回<strong>对象的描述信息</strong>，print 函数输出使用</td></tr></tbody></table><ul><li><strong>利用好</strong> <strong>dir()</strong> <strong>函数</strong></li></ul></li></ul><hr><h3 id="定义简单的类"><a class="headerlink" href="#定义简单的类"></a>定义简单的类</h3><h4 id="定义指包含方法的类"><a class="headerlink" href="#定义指包含方法的类"></a>定义指包含方法的类</h4><ul><li><p>在 Python 中要定义一个只包含方法的类，语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">方法</span> <span class="number">1</span>(self, 参数列表):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">方法</span> <span class="number">2</span>(self, 参数列表):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>第一个参数必须是</strong> <strong>self</strong></p><ul><li><p>由 <strong>哪一个对象</strong> 调用的方法，方法内的 self 就是 <strong>哪一个对象的引用</strong></p></li><li><p>在类封装的方法内部，self 就表示 <strong>当前调用方法的对象自己</strong></p></li><li><p><strong>在方法内部</strong></p><ul><li><p>可以通过 self. <strong>访问对象的属性</strong></p></li><li><p>也可以通过 self. <strong>调用其他的对象方法</strong></p></li></ul></li></ul></li></ul></li></ul><h4 id="创建对象"><a class="headerlink" href="#创建对象"></a>创建对象</h4><ul><li><strong>对象变量</strong> <strong>=</strong> <strong>类名</strong>()</li></ul><hr><h3 id="初始化方法"><a class="headerlink" href="#初始化方法"></a>初始化方法</h3><ul><li>当使用 <strong>类名()</strong> 创建对象时，会 <strong>自动</strong> 执行以下操作<ul><li>为对象在内存中 <strong>分配空间</strong> —— 创建对象</li><li>为对象的属性 <strong>设置初始值</strong> —— 初始化方法(init)<ul><li>这个 <strong>初始化方法</strong> 就是 <code>__init__</code> 方法，<code>__init__</code> 是对象的<strong>内置方法</strong><ul><li>在 <code>__init__</code> 方法内部使用 self.属性名 = 属性的初始值 就可以 <strong>定义属性</strong></li><li>定义属性之后，再使用 类创建的对象，都会拥有该属性</li></ul></li></ul></li></ul></li></ul><h4 id="内置的方法及和属性"><a class="headerlink" href="#内置的方法及和属性"></a>内置的方法及和属性</h4><ul><li><p><code>__del__</code> <strong>方法</strong></p><ul><li>在Python中，使用 类名() 创建对象时，为对象 <strong>分配完空间</strong>后，<strong>自动</strong> 调用<code>__init__</code> 方法</li><li>当一个 <strong>对象被从内存中销毁</strong> 前，会 <strong>自动</strong> 调用 <code>__del__</code> 方法</li><li><code>__del__</code> 如果希望在对象被销毁前，再做一些事情，可以考虑一下 <code>__del__</code></li></ul></li><li><p><code>__str__</code> 方法</p><ul><li><code>__str__</code> 方法必须返回一个字符串</li><li>打印对象得到的是该函数 return 的内容</li><li>在 Python 中，使用 print 输出 <strong>对象变量</strong>，默认情况下，会输出这个变量 <strong>引用的对象</strong> 是 <strong>由哪一个类创建的对象</strong>，以及 <strong>在内存中的地址</strong>（<strong>十六进制表示</strong>)</li><li>在开发中，希望使用 print 输出 <strong>对象变量</strong> 时，能够打印 <strong>自定义的内容</strong>，就可以利用 <code>__str__</code> 这个内置方法了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, new_name</span>):</span><br><span class="line">        self.name = new_name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 来了&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对象销毁的时候会调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 我去了&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印对象调用这个</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 必须返回一个字符串</span></span><br><span class="line">        <span class="comment"># 必须有 return</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是小猫[%s]&quot;</span> % self.name</span><br><span class="line"></span><br><span class="line">tom=Cat(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tom)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Tom 来了</span></span><br><span class="line"><span class="string">我是小猫[Tom]</span></span><br><span class="line"><span class="string">Tom 我去了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="面向对象的封装"><a class="headerlink" href="#面向对象的封装"></a>面向对象的封装</h2><ul><li><p>封装</p><ul><li><p><strong>封装</strong> 是面向对象编程的一大特点</p></li><li><p>面向对象编程的 <strong>第一步</strong> —— 将 <strong>属性</strong> 和 <strong>方法 封装</strong> 到一个抽象的 <strong>类</strong> 中</p></li><li><p><strong>外界</strong> 使用 <strong>类</strong> 创建 <strong>对象</strong>，然后 <strong>让对象调用方法</strong></p></li></ul><ul><li><strong>对象方法的细节</strong> 都被 <strong>封装</strong> 在 <strong>类的内部</strong></li></ul></li><li><p><strong>添加注解</strong></p></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240528202446087.png" alt="案例需求" loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HouseItem</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, area</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.area = area</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[%s] 占地 %.2f&quot;</span> % (self.name, self.area)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">House</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, house_type, area</span>):</span><br><span class="line">        self.house_type = house_type</span><br><span class="line">        self.area = area</span><br><span class="line">        <span class="comment"># 剩余面积</span></span><br><span class="line">        self.free_area = area</span><br><span class="line">        <span class="comment"># 家具名称列表</span></span><br><span class="line">        self.item_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Python 能够自动的将一对括号内部的代码连接在一起</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;户型：%s\n 总面积：%.2f[剩余：%.2f]\n 家具：%s&quot;</span></span><br><span class="line">                % (self.house_type, self.area,</span><br><span class="line">                   self.free_area, self.item_list))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># item: HouseItem 添加注解，告知集成开发环境变量类型</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_item</span>(<span class="params">self, item: HouseItem</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断房子剩余面积够放家具，再添加，否则不能添加</span></span><br><span class="line">        <span class="keyword">if</span> self.free_area &gt;= item.area:</span><br><span class="line">            self.item_list.append(item)  <span class="comment"># 添加家具到列表中</span></span><br><span class="line">            self.free_area -= item.area  <span class="comment"># 更新剩余房间面积</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;no area&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;要添加 %s&quot;</span> % item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    bed = HouseItem(<span class="string">&quot;席梦思&quot;</span>, <span class="number">4</span>)</span><br><span class="line">    chest = HouseItem(<span class="string">&quot;衣柜&quot;</span>, <span class="number">2</span>)</span><br><span class="line">    table = HouseItem(<span class="string">&quot;餐桌&quot;</span>, <span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line">    house = House(<span class="string">&quot;大平层&quot;</span>, <span class="number">150</span>)</span><br><span class="line">    house.add_item(bed)</span><br><span class="line">    house.add_item(chest)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(house)</span><br></pre></td></tr></table></figure><ul><li><p><strong>定义没有初始值的属性</strong></p><ul><li><p>在定义属性时，如果 <strong>不知道设置什么初始值</strong>，可以设置为 None</p></li><li><p>None <strong>关键字</strong> 表示 <strong>什么都没有</strong>，表示一个 <strong>空对象</strong>，<strong>没有方法和属性，是一个特殊的常量</strong></p></li><li><p>可以将 None 赋值给任何一个变量</p></li></ul></li></ul><h3 id="身份运算符"><a class="headerlink" href="#身份运算符"></a>身份运算符</h3><ul><li><p>身份运算符用于 <strong>比较</strong> 两个对象的 <strong>内存地址</strong> 是否一致 —— <strong>是否是对同一个对象的引用</strong></p></li><li><p>在 Python 中针对 None 比较时，建议使用 is 判断</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>is 是判断两个标识符是不是引用同一个对象</td><td>x is y，类似于 id(x) == id(y)</td></tr><tr><td>is not</td><td>is not 是判断两个标识符是不是引用不同对象</td><td>x is not y，类似id(x) != id(y)</td></tr></tbody></table></li></ul><p><strong>is</strong> <strong>与</strong> <strong>==</strong> <strong>区别</strong>：</p><ul><li>is 用于判断 <strong>两个变量 引用对象是否为同一个</strong>，就是地址是不是一样的</li><li>== 用于判断 <strong>引用变量的值</strong> 是否相等</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == b)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><hr><h2 id="私有属性-和-私有方法"><a class="headerlink" href="#私有属性-和-私有方法"></a>私有属性 和 私有方法</h2><ul><li><strong>私有属性</strong> 就是 <strong>对象</strong> 不希望公开的 <strong>属性</strong></li><li><strong>私有方法</strong> 就是 <strong>对象</strong> 不希望公开的 <strong>方法</strong></li><li><strong>定义方式</strong>：<ul><li>在 <strong>定义属性或方法时</strong>，在 <strong>属性名或者方法名前</strong> 增加 <strong>两个下划线</strong>，定义的就是 <strong>私有</strong> 属性或方法</li><li>私有属性只能被自己的方法调用</li><li>私有方法只能被自己的方法调用</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Women</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 女性年龄隐藏</span></span><br><span class="line">        self.__age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__secret</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am %d years old&quot;</span> % self.__age)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">noSecret</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am %d years old&quot;</span> % self.__age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    xiaomei = Women(<span class="string">&#x27;小美&#x27;</span>)</span><br><span class="line">    <span class="comment"># 私有属性，外部不能直接访问</span></span><br><span class="line">    <span class="comment"># print(xiaomei.__age)</span></span><br><span class="line">    <span class="comment"># 私有方法，外部不能直接调用</span></span><br><span class="line">    <span class="comment"># xiaomei.__secret()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 公开方法可以访问私有属性</span></span><br><span class="line">    xiaomei.noSecret()  <span class="comment"># I am 18 years old</span></span><br></pre></td></tr></table></figure><h3 id="伪私有属性-和-私有方法"><a class="headerlink" href="#伪私有属性-和-私有方法"></a>伪私有属性 和 私有方法</h3><ul><li>在日常开发中，<strong>不要使用这种方式</strong>，<strong>访问对象的 私有属性 或 私有方法</strong></li><li>Python 中，并没有 <strong>真正意义</strong> 的 <strong>私有</strong><ul><li>在给 <strong>属性</strong>、<strong>方法</strong> 命名时，实际是对 <strong>名称</strong> 做了一些特殊处理，使得外界无法访问到</li><li><strong>处理方式</strong>：在 <strong>名称</strong> 前面加上 <code>_类名</code> =&gt; <code>_类名__名称</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(xiaomei._Women__age)  <span class="comment"># 18</span></span><br></pre></td></tr></table></figure><hr><h2 id="继承"><a class="headerlink" href="#继承"></a>继承</h2><ul><li><p>继承：<strong>子类</strong> 拥有 <strong>父类</strong> 的所有 <strong>方法</strong> 和 <strong>属性</strong></p></li><li><p>继承的语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">父类名</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Eating...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drink</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Drinking...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bark</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Barking...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    poppy = Dog()</span><br><span class="line">    poppy.drink()</span><br><span class="line">    poppy.eat()</span><br><span class="line">    poppy.bark()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Drinking...</span></span><br><span class="line"><span class="string">Eating...</span></span><br><span class="line"><span class="string">Barking...</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="方法的重写"><a class="headerlink" href="#方法的重写"></a>方法的重写</h3><ul><li><strong>子类</strong> 拥有 <strong>父类</strong> 的所有 <strong>方法</strong> 和 <strong>属性</strong></li><li><strong>子类</strong> 继承自 <strong>父类</strong>，可以直接 <strong>享受</strong> 父类中已经封装好的方法，不需要再次开发</li><li>当 <strong>父类</strong> 的方法实现不能满足子类需求时，可以对方法进行 <strong>重写</strong>(override)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Eating...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drink</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Drinking...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Dof is Eating...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bark</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Barking...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    poppy = Dog()</span><br><span class="line">    poppy.drink()</span><br><span class="line">    poppy.eat()</span><br><span class="line">    poppy.bark()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Drinking...</span></span><br><span class="line"><span class="string">Dof is Eating...</span></span><br><span class="line"><span class="string">Barking...</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="super-关键字"><a class="headerlink" href="#super-关键字"></a>super() 关键字</h3><ul><li>super() 就是使用 super 类创建出来的对象</li><li><strong>最常</strong> 使用的场景就是在 <strong>重写父类方法时</strong>，调用 <strong>在父类中封装的方法实现</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Eating...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drink</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Drinking...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Dof is Eating...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">super</span>().eat()  <span class="comment"># 使用 super() 调用原本在父类封装的方法</span></span><br><span class="line">        <span class="comment"># 父类名.方法(self)</span></span><br><span class="line">        <span class="comment"># 这里写 Animal.eat() 这种方法是不对的</span></span><br><span class="line">        <span class="comment"># 如果出现子类调用方法，会出现递归调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bark</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Barking...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    poppy = Dog()</span><br><span class="line">    poppy.drink()</span><br><span class="line">    poppy.eat()</span><br><span class="line">    poppy.bark()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Drinking...</span></span><br><span class="line"><span class="string">Dof is Eating...</span></span><br><span class="line"><span class="string">Eating...</span></span><br><span class="line"><span class="string">Barking...</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="父类的-私有属性-和-私有方法"><a class="headerlink" href="#父类的-私有属性-和-私有方法"></a>父类的 私有属性 和 私有方法</h3><ul><li><strong>子类对象 不能</strong> 在自己的方法内部，<strong>直接</strong> 访问 父类的 <strong>私有属性</strong> 或 <strong>私有方法</strong></li><li><strong>子类对象</strong> 可以通过 <strong>父类</strong> 的 <strong>公有方法 间接</strong> 访问到 <strong>私有属性</strong> 或 <strong>私有方法（父类在自己的公有方法中调用私有方法）</strong></li></ul><h3 id="多继承"><a class="headerlink" href="#多继承"></a>多继承</h3><ul><li><p><strong>子类</strong> 可以拥有 <strong>多个父类</strong>，并且具有 <strong>所有父类</strong> 的 <strong>属性</strong> 和 <strong>方法</strong></p></li><li><p><strong>Python</strong> <strong>中的</strong> <strong>MRO ——</strong> <strong>方法搜索顺序</strong></p><ul><li><p>Python 中针对 <strong>类</strong> 提供了一个 <strong>内置属性</strong> <code>__mro__</code> 可以查看 <strong>方法</strong> 搜索顺序</p></li><li><p>MRO 是 method resolution order，主要用于 <strong>在多继承时判断 方法、属性 的调用 路径</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(C.__mro__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span></span><br></pre></td></tr></table></figure><ul><li>在搜索方法时，是按照 <code>__mro__</code> 的输出结果 <strong>从左至右</strong> 的顺序查找的</li><li>如果在当前类中 <strong>找到方法，就直接执行，不再搜索</strong>，如果 <strong>没有找到，就查找下一个类</strong> 中是否有对应的方法，<strong>如果找到，就直接执行，不再搜索</strong>，如果找到最后一个类，还没有找到方法，程序报错</li></ul></li><li><p>合并所有父类的 MRO 列表并遵循如下三条准则：</p><ol><li><p><strong>子类会先于父类被检查</strong></p></li><li><p><strong>多个父类会根据它们在列表中的顺序被检查</strong></p></li><li><p>如果对下一个类存在两个合法的选择，选择第一个父类</p></li></ol></li></ul></li></ul><hr><h2 id="多态"><a class="headerlink" href="#多态"></a>多态</h2><ul><li>Python实现多态的操作 就是 <strong>重写</strong></li><li>多态 是 不同的对象调用同一个方法，实现不同的行为</li><li><strong>多态</strong> 不同的 <strong>子类对象</strong> 调用相同的 <strong>父类方法</strong>，产生不同的执行结果<ul><li><strong>多态</strong> 可以 <strong>增加代码的灵活度</strong></li><li>以 <strong>继承</strong> 和 <strong>重写父类方法</strong> 为前提</li><li>是调用方法的技巧，<strong>不会影响到类的内部设计</strong></li></ul></li><li><strong>单一职责</strong>，<strong>开放 封闭</strong> —对扩展开放，对修改封闭</li></ul><hr><h2 id="常见问题-（总结）"><a class="headerlink" href="#常见问题-（总结）"></a>常见问题 （总结）</h2><p><strong>例：找出102个数中出现 1 次的两个数</strong></p><p>eg：</p><blockquote><p>0000 0110  6</p><p>0000 1011  11</p><p>0000 1101  13   就是分成两堆</p><p>最低位： 0000 0001</p><p>1与6 按位与是假，和11按位与是真</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_list102_one</span>():</span><br><span class="line">    <span class="built_in">list</span> = [<span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>]</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        result ^= i</span><br><span class="line">    split_flag = result &amp; -result</span><br><span class="line">    result1 = <span class="number">0</span></span><br><span class="line">    result2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        <span class="keyword">if</span> split_flag &amp; i:</span><br><span class="line">            result1 ^= i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result2 ^= i</span><br></pre></td></tr></table></figure><h3 id="format-的使用"><a class="headerlink" href="#format-的使用"></a>format 的使用</h3><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">use_format</span>():</span><br><span class="line">    i = <span class="number">10</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&quot;hello&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我今年&#123;&#125;岁，&#123;&#125; world&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">str</span>))</span><br><span class="line"></span><br><span class="line">use_format()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我今年10岁，hello world</span></span><br></pre></td></tr></table></figure><hr><h2 id="类属性-和-类方法"><a class="headerlink" href="#类属性-和-类方法"></a>类属性 和 类方法</h2><h3 id="类的结构"><a class="headerlink" href="#类的结构"></a>类的结构</h3><ul><li>使用面向对象开发，<strong>第</strong> <strong>1</strong> <strong>步</strong> 是设计 <strong>类</strong></li><li>使用 <strong>类名</strong>() 创建对象，<strong>创建对象</strong> 的动作有两步：<ol><li>在内存中为对象 <strong>分配空间</strong></li><li>调用初始化方法 <strong>init</strong> 为 <strong>对象初始化</strong></li></ol></li><li>对象创建后，<strong>内存</strong> 中就有了一个对象的 <strong>实实在在</strong> 的存在 —— <strong>实例</strong></li></ul><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240529223533254.png" alt="实例" style="zoom:67%;"><ul><li>在 Python 中，<strong>类</strong> 是一个特殊的对象 —— <strong>类对象</strong></li><li>通过 <code>类名.</code> 的方式可以 <strong>访问类的属性</strong> 或者 <strong>调用类的方法</strong></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240529223729688.png" alt="示例" loading="lazy"></p><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tool</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建工具对象</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    too1 = Tool(<span class="string">&quot;锄头&quot;</span>)</span><br><span class="line">    too2 = Tool(<span class="string">&quot;斧头&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(Tool.count)  <span class="comment"># 2</span></span><br><span class="line">    <span class="built_in">print</span>(too1.count)  <span class="comment"># 2 ，但是是不规范的写法</span></span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240529224216675.png" alt="eg 中 too1访问顺序" loading="lazy"></p><ul><li><p>因此，要访问类属性有两种方式：</p><ul><li><code>类名.类属性</code></li><li><code>对象.类属性</code> （不推荐）</li></ul></li><li><p>如果使用 <code>对象.类属性 = 值</code> 赋值语句，只会 <strong>给对象添加一个属性</strong>，而不会影响到 <strong>类属性的值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tool</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    too1 = Tool(<span class="string">&quot;锄头&quot;</span>)</span><br><span class="line">    too2 = Tool(<span class="string">&quot;斧头&quot;</span>)</span><br><span class="line"></span><br><span class="line">    too1.count = <span class="number">99</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(Tool.count)  <span class="comment"># 2</span></span><br><span class="line">    <span class="built_in">print</span>(too1.count)  <span class="comment"># 99</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="类方法-和-静态方法"><a class="headerlink" href="#类方法-和-静态方法"></a>类方法 和 静态方法</h2><h3 id="类方法"><a class="headerlink" href="#类方法"></a>类方法</h3><p>（出现概率比较小）</p><ul><li><p><strong>类方法</strong> 就是针对 <strong>类对象</strong> 定义的方法</p><ul><li>在 <strong>类方法</strong> 内部可以直接访问 <strong>类属性</strong> 或者调用其他的 <strong>类方法</strong></li></ul></li><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">类方法名</span>(<span class="params">cls</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>类方法需要用 <strong>修饰器</strong> <code>@classmethod</code> 来标识，<strong>告诉解释器这是一个 类方法</strong></li><li>类方法的 <strong>第一个参数</strong> 应该是 <code>cls</code><ul><li>由 <strong>哪一个类</strong> 调用的方法，方法内的 <code>cls</code> 就是 <strong>哪一个类的引用</strong></li><li>这个参数和 <strong>实例方法</strong> 的第一个参数是 self 类似</li><li><strong>提示</strong> 使用其他名称也可以，不过习惯使用 cls</li></ul></li><li>通过 <code>类名.</code> 调用 <strong>类方法</strong>，<strong>调用方法时</strong>，不需要传递 cls 参数</li><li><strong>在方法内部</strong><ul><li>可以通过 <code>cls.</code> <strong>访问类的属性</strong></li><li>也可以通过 <code>cls.</code> <strong>调用其他的类方法</strong></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tool</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_tool_count</span>(<span class="params">cls</span>):  <span class="comment"># cls 代表当前类名</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;工具对象的个数：%d&quot;</span> % cls.count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    too1 = Tool(<span class="string">&quot;锄头&quot;</span>)</span><br><span class="line">    too2 = Tool(<span class="string">&quot;斧头&quot;</span>)</span><br><span class="line"></span><br><span class="line">    Tool.show_tool_count()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 工具对象的个数：2</span></span><br></pre></td></tr></table></figure><h3 id="静态方法"><a class="headerlink" href="#静态方法"></a>静态方法</h3><ul><li><p>既 <strong>不需要</strong> 访问 <strong>实例属性</strong> 或者调用 <strong>实例方法</strong></p></li><li><p>也 <strong>不需要</strong> 访问 <strong>类属性</strong> 或者调用 <strong>类方法</strong></p></li><li><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">静态方法名</span>():</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><strong>静态方法</strong> 需要用 <strong>修饰器</strong> <code>@staticmethod</code> 来标识，<strong>告诉解释器这是一个静态方法</strong></li><li>通过 <code>类名.</code> 调用 <strong>静态方法</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">        <span class="comment"># 静态方法内不需要访问实例属性/类属性</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小狗要跑...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过类名.调用静态方法 - 不需要创建对象</span></span><br><span class="line">Dog.run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 小狗要跑...</span></span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span>:</span><br><span class="line">    <span class="comment"># 类属性 top_score</span></span><br><span class="line">    top_score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例属性 player_name</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, play_name</span>):</span><br><span class="line">        self.play_name = play_name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静态方法 show_help</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_help</span>():</span><br><span class="line">        <span class="built_in">print</span>(Game.top_score)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法 show_top_score</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_top_score</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(cls.top_score)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例方法 start_game</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_game</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.play_name)</span><br></pre></td></tr></table></figure><hr><h2 id="单例设计模式"><a class="headerlink" href="#单例设计模式"></a>单例设计模式</h2><ul><li>设计模式<ul><li><strong>设计模式</strong> 是 <strong>前人工作的总结和提炼</strong>，通常，被人们广泛流传的设计模式都是针对 <strong>某一特定问题</strong> 的成熟的解决方案</li><li>使用 <strong>设计模式</strong> 是为了可重用代码、让代码更容易被他人理解、保证代码可靠性，可扩展性很好</li></ul></li><li>单例设计模式<ul><li><strong>目的</strong> —— 让 <strong>类</strong> 创建的对象，在系统中 <strong>只有 唯一的一个实例</strong></li><li>每一次执行 <code>类名()</code> 返回的对象，<strong>内存地址是相同的</strong></li></ul></li><li>使用场景<ul><li><strong>音乐播放</strong> 对象</li><li><strong>回收站</strong> 对象</li><li><strong>打印机</strong> 对象</li></ul></li></ul><h3 id="new-方法"><a class="headerlink" href="#new-方法"></a><code>__new__</code>方法</h3><ul><li><code>__</code>：两个<code>_</code>开头的都属于 内置方法，就是 object 自带的方法</li><li>使用 <strong>类名()</strong> 创建对象时，Python 的解释器 <strong>首先</strong> 会 调用 <code>__new__</code> 方法为对象<strong>分配空间</strong></li><li><code>__new__</code> 是一个 由 object 基类提供的 <strong>内置的静态方法</strong>，主要作用有两个：<ul><li>在内存中为对象 <strong>分配空间</strong></li><li><strong>返回</strong> 对象的引用</li></ul></li><li>Python 的解释器获得对象的 <strong>引用</strong> 后，将引用作为 <strong>第一个参数</strong>，传递给<code>__init__</code> 方法</li><li>重写 <code>__new__</code> 方法 的代码非常固定：<ul><li>重写 <code>__new__</code> 方法 <strong>一定要</strong> <strong>return super().new(cls)</strong></li><li>否则 Python 的解释器 <strong>得不到</strong> 分配了空间的 <strong>对象引用</strong>，<strong>就不会调用对象的初始化方法</strong></li></ul></li><li><code>__new__</code> 是一个静态方法，在调用时需要 <strong>主动传递</strong> cls 参数</li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240530145437263.png" alt="举例" loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MusicPlayer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 创建对象的时候，new方法会自动调用</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建对象，分配空间&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 为对象分配空间</span></span><br><span class="line">        instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 返回对象的引用</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%x&quot;</span> % <span class="built_in">id</span>(instance))</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;播放器初始化...&quot;</span>)</span><br><span class="line"></span><br><span class="line">musicPlayer = MusicPlayer()</span><br><span class="line"><span class="built_in">print</span>(musicPlayer)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象，分配空间</span></span><br><span class="line"><span class="comment"># 21a10feef10</span></span><br><span class="line"><span class="comment"># 播放器初始化...</span></span><br><span class="line"><span class="comment"># &lt;__main__.MusicPlayer object at 0x0000021A10FEEF10&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Python中的单例"><a class="headerlink" href="#Python中的单例"></a>Python中的单例</h3><ul><li>定义一个 <strong>类属性</strong>，初始值是 None，用于记录 <strong>单例对象的引用</strong></li><li>重写 <strong>new</strong> 方法</li><li>如果 <strong>类属性</strong> is None，调用父类方法分配空间，并在类属性中记录结果</li><li>返回 <strong>类属性</strong> 中记录的 <strong>对象引用</strong></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240530150437656.png" alt="单例模式" loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 借助类属性，外加重写 __new__ 方法实现单例模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">            cls.instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;初始化&quot;</span>)</span><br><span class="line"></span><br><span class="line">singleton1 = Singleton()</span><br><span class="line">singleton2 = Singleton()</span><br><span class="line"><span class="built_in">print</span>(singleton1)</span><br><span class="line"><span class="built_in">print</span>(singleton2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="comment"># &lt;__main__.Singleton object at 0x0000020A6BC6EF10&gt;</span></span><br><span class="line"><span class="comment"># &lt;__main__.Singleton object at 0x0000020A6BC6EF10&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="异常"><a class="headerlink" href="#异常"></a>异常</h2><ul><li>程序在运行时，如果 Python 解释器 <strong>遇到</strong> 到一个错误，<strong>会停止程序的执行，并且提示一些错误信息</strong>，这就是 <strong>异常</strong></li><li><strong>程序停止执行并且提示错误信息</strong> 这个动作，我们通常称之为：<strong>抛出(raise)异常</strong></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240530151647241.png" alt="异常流程图" loading="lazy"></p><ul><li><p>捕获异常 的语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">尝试执行的代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">出现错误的处理</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 提示用户输入一个数字</span></span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入数字：&quot;</span>))</span><br><span class="line"><span class="keyword">except</span>:  <span class="comment"># 出现异常才会走到except，有了except程序才不会崩溃</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入正确的数字&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure></li><li><p>错误类型的捕获 的语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment"># 尝试执行的代码</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型 <span class="number">1</span>:</span><br><span class="line"><span class="comment"># 针对错误类型 1，对应的代码处理</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (错误类型 <span class="number">2</span>, 错误类型 <span class="number">3</span>):</span><br><span class="line"><span class="comment"># 针对错误类型 2 和 3，对应的代码处理</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;未知错误 %s&quot;</span> % result)</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 提示用户输入一个数字</span></span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入数字：&quot;</span>))</span><br><span class="line">    result = <span class="number">8</span> / num</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入正确的整数&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;除 0 错误&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>异常捕获 完整语法格式</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment"># 尝试执行的代码</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型 <span class="number">1</span>:</span><br><span class="line"><span class="comment"># 针对错误类型 1，对应的代码处理</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型 <span class="number">2</span>:</span><br><span class="line"><span class="comment"># 针对错误类型 2，对应的代码处理</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (错误类型 <span class="number">3</span>, 错误类型 <span class="number">4</span>):</span><br><span class="line"><span class="comment"># 针对错误类型 3 和 4，对应的代码处理</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line"><span class="comment"># 打印错误信息</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># else 下面的代码如果有异常，进程会直接结束</span></span><br><span class="line"><span class="comment"># 没有异常才会执行的代码</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 为了让阅读代码者知道这里是一个整体</span></span><br><span class="line"><span class="comment"># 无论是否有异常，都会执行的代码</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;无论是否有异常，都会执行的代码&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>else 只有在没有异常时才会执行的代码</li><li>finally 无论是否有异常，都会执行的代码</li></ul></li><li><p><strong>Python 捕获异常发生的文件和具体行数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(a) <span class="comment"># 这里是异常</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(e.__traceback__.tb_frame.f_globals[<span class="string">&quot;__file__&quot;</span>])  <span class="comment"># 发生异常所在的文件</span></span><br><span class="line">    <span class="built_in">print</span>(e.__traceback__.tb_lineno) <span class="comment"># 发生异常所在的行号</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Python-的异常汇总"><a class="headerlink" href="#Python-的异常汇总"></a>Python 的异常汇总</h3><ul><li><strong>标粗的比较重要！！！</strong></li></ul><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240530152905513.png" alt="异常01"><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240530152937415.png" alt="异常02"><ul><li><p>断言异常 AssertionError</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类似于 if/else 表达式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># assert 1 == 1</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> == <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> AssertionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;断言异常&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 断言异常</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="异常的传递"><a class="headerlink" href="#异常的传递"></a>异常的传递</h3><ul><li><strong>异常的传递</strong> —— 当 <strong>函数/方法</strong> 执行 <strong>出现异常</strong>，会 <strong>将异常传递</strong> 给 函数/方法的 <strong>调用一方</strong></li><li>如果 <strong>传递到主程序</strong>，仍然 <strong>没有异常处理</strong>，程序才会被终止</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入整数：&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo2</span>():</span><br><span class="line">    <span class="keyword">return</span> demo1()</span><br><span class="line">    <span class="comment"># 利用异常的传递性，在主程序捕获异常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = demo2()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未知错误 %s&quot;</span> % result)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果输入 abc</span></span><br><span class="line"><span class="comment"># 这里首先在 int(input(&quot;输入整数：&quot;)) 出现异常，然后抛给demo1()函数，</span></span><br><span class="line"><span class="comment"># 再抛给demo2()函数，然后直接执行except后面的语句，没有执行num的赋值运算的操作，所以在finally处未打印</span></span><br></pre></td></tr></table></figure><h3 id="抛出-raise-异常"><a class="headerlink" href="#抛出-raise-异常"></a>抛出 raise 异常</h3><ul><li>在开发中，除了 <strong>代码执行出错</strong> Python 解释器会 <strong>抛出</strong> 异常之外</li><li>可以根据 <strong>应用程序 特有的业务需求 主动抛出异常</strong></li><li>Python 中提供了一个 Exception <strong>异常类</strong><ul><li>在开发时，如果满足 <strong>特定业务需求时</strong>，希望 <strong>抛出异常</strong>，可以：<ul><li><strong>创建</strong> 一个 Exception 的 <strong>对象</strong></li><li>使用 raise <strong>关键字</strong> 抛出 <strong>异常对象</strong></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">定义 input_password 函数，提示用户输入密码</span></span><br><span class="line"><span class="string">• 如果用户输入长度 &lt; 8，抛出异常</span></span><br><span class="line"><span class="string">• 如果用户输入长度 &gt;=8，返回输入的密码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">input_password</span>():</span><br><span class="line">    <span class="comment"># 1. 提示用户输入密码</span></span><br><span class="line">    pwd = <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 判断密码长度 &gt;= 8，返回用户输入的密码</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(pwd) &gt;= <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> pwd</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 如果 &lt; 8 主动抛出异常</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主动抛出异常&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.1. 创建 Exception 异常对象 - 可以使用错误信息字符串作为参数</span></span><br><span class="line">    ex = Exception(<span class="string">&quot;密码长度不够&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.2. 使用 raise 主动抛出异常</span></span><br><span class="line">    <span class="keyword">raise</span> ex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示用户输入密码</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(input_password())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p><a href="https://python-cookbook.readthedocs.io/zh-cn/latest/c14/p08_creating_custom_exceptions.html">创建自定义异常 — python3-cookbook 2.0.0 文档 (python-cookbook.readthedocs.io)</a></p><hr><h2 id="模块-和-包"><a class="headerlink" href="#模块-和-包"></a>模块 和 包</h2><ul><li>每一个以扩展名 py 结尾的 Python 源代码文件都是一个 <strong>模块</strong></li><li><strong>模块名</strong> 同样也是一个 <strong>标识符</strong>，需要符合标识符的命名规则</li><li><strong>模块</strong> 就好比是 <strong>工具包</strong>，要想使用这个工具包中的工具，就需要先 <strong>导入</strong> 这个模块</li></ul><h3 id="模块的导入"><a class="headerlink" href="#模块的导入"></a>模块的导入</h3><ul><li><p><code>import</code>导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名 <span class="number">1</span>, 模块名 <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示：在导入模块时，每个导入应该独占一行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> 模块名 <span class="number">1</span></span><br><span class="line"><span class="keyword">import</span> 模块名 <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>如果模块的名字太长</strong>，可以使用 <code>as</code> 指定模块的名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名 <span class="number">1</span> <span class="keyword">as</span> 模块别名</span><br></pre></td></tr></table></figure></li></ul><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test_module</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> test_module <span class="keyword">as</span> DogModule</span><br></pre></td></tr></table></figure></li><li><p><code>from ... import</code> 导入</p><ul><li>希望 <strong>从某一个模块</strong> 中，导入 <strong>部分</strong> 工具，就可以使用 from … import 的方式</li><li>import 模块名 是 <strong>一次性</strong> 把模块中 <strong>所有工具全部导入</strong>，并且通过 <strong>模块名/别名</strong>访问</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 模块 导入 某一个工具</span></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="number">1</span> <span class="keyword">import</span> 工具名</span><br></pre></td></tr></table></figure><ul><li>导入之后<ul><li><strong>不需要</strong> 通过 <code>模块名.</code>，可以直接使用 <strong>模块提供的工具</strong> —— <strong>全局变量</strong>、<strong>函数</strong>、<strong>类</strong></li></ul></li></ul><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> test_module1 <span class="keyword">import</span> Dog </span><br><span class="line"><span class="keyword">from</span> test_module2 <span class="keyword">import</span> say_hello</span><br><span class="line"></span><br><span class="line">wangcai = Dog()</span><br><span class="line">say_hello()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> test_module <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> test_module</span><br><span class="line"><span class="comment"># 两者区别</span></span><br><span class="line"><span class="comment"># 如果都调用Dog()</span></span><br><span class="line"><span class="comment"># 第一种</span></span><br><span class="line">Dog()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种</span></span><br><span class="line">test_module.Dog()</span><br></pre></td></tr></table></figure></li></ul><h3 id="模块的搜索顺序"><a class="headerlink" href="#模块的搜索顺序"></a>模块的搜索顺序</h3><ul><li><p>Python 的解释器在 <strong>导入模块</strong> 时：</p><ol><li><p>搜索 <strong>当前目录</strong> 指定模块名的文件，<strong>如果有就直接导入</strong></p></li><li><p>如果没有，再搜索 <strong>系统目录</strong>（外部库，就是调用的包）</p></li></ol></li><li><p>Python 中每一个模块都有一个内置属性 <code>__file__</code> 可以 <strong>查看模块</strong> 的 <strong>完整路径</strong></p></li></ul><h3 id="原则-：-每一个文件都应该是可以被导入的"><a class="headerlink" href="#原则-：-每一个文件都应该是可以被导入的"></a>原则 ： 每一个文件都应该是可以被导入的</h3><ul><li><code>__name__</code>属性<ul><li><code>__name__</code> 是 Python 的一个内置属性，记录着一个 <strong>字符串</strong></li><li>如果 <strong>是被其他文件导入的</strong>，<code>__name__</code> 就是 <strong>模块名</strong></li><li>如果 <strong>是当前执行的程序</strong> <code>__name__</code> 是 <code>__main__</code></li></ul></li></ul><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这里是主流程代码&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要导入这个模块，这个文件下面的代码不会被导入</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="包-的概念"><a class="headerlink" href="#包-的概念"></a>包 的概念</h3><ul><li><p><strong>包</strong> 是一个 <strong>包含多个模块</strong> 的 <strong>特殊目录</strong></p></li><li><p>目录下有一个 <strong>特殊的文件</strong> <code>__init__.py</code></p></li><li><p>包名的 <strong>命名方式</strong> 和变量名一致，<strong>小写字母</strong> + _</p></li><li><p>好处：</p><ul><li>使用 import 包名 可以一次性导入 <strong>包</strong> 中 <strong>所有的模块</strong></li></ul></li><li><p><code>__init__.py</code></p><ul><li><p>要在外界使用 <strong>包</strong> 中的模块，需要在 <code>__init__.py</code> 中指定 <strong>对外界提供的模块列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 __init__.py 文件中写入下列语句</span></span><br><span class="line"><span class="comment"># 从 当前目录 导入 模块列表</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> send_message</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> receive_message</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="发布模块"><a class="headerlink" href="#发布模块"></a>发布模块</h3><ul><li><p>创建 <a href="http://setup.py">setup.py</a> 文件</p><ul><li>在 要打包的包外面创建，与要打包的包一起组成一个软件包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line">setup(name=<span class="string">&quot;hc_message&quot;</span>, <span class="comment"># 包名</span></span><br><span class="line">version=<span class="string">&quot;1.0&quot;</span>, <span class="comment"># 版本</span></span><br><span class="line">description=<span class="string">&quot;coo1heisenberg&#x27;s 发送和接收消息模块&quot;</span>, <span class="comment"># 描述信息</span></span><br><span class="line">long_description=<span class="string">&quot;完整的发送和接收消息模块&quot;</span>, <span class="comment"># 完整描述信息</span></span><br><span class="line">author=<span class="string">&quot;coo1heisenberg&quot;</span>, <span class="comment"># 作者</span></span><br><span class="line">author_email=<span class="string">&quot;hc_one1@163.com&quot;</span>, <span class="comment"># 作者邮箱</span></span><br><span class="line">url=<span class="string">&quot;www.coo1heisenberg.github.io&quot;</span>, <span class="comment"># 主页</span></span><br><span class="line">py_modules=[<span class="string">&quot;hc_message.send_message&quot;</span>,<span class="string">&quot;hc_message.receive_message&quot;</span>]) <span class="comment"># 有哪些模块</span></span><br></pre></td></tr></table></figure></li><li><p>构建模块（Ubuntu 和 windows 都可以）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 setup.py build</span></span><br></pre></td></tr></table></figure></li><li><p>生成发布压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 setup.py sdist</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="安装模块"><a class="headerlink" href="#安装模块"></a>安装模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar xf hc_message-1.0.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> hc_message-1.0</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo python3 setup.py install</span></span><br></pre></td></tr></table></figure><ul><li><p>卸载模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /usr/local/lib/python3.6/dist-packages/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">rm</span> -r hc_message*</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="pip-安装第三方模块"><a class="headerlink" href="#pip-安装第三方模块"></a>pip 安装第三方模块</h3><ul><li><p><strong>第三方模块</strong> 通常是指由 <strong>知名的第三方团队 开发的</strong> 并且被 <strong>程序员广泛使用</strong> 的 Python 包 / 模块</p></li><li><p>在Ubuntu下安装pip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure></li><li><p>验证 pip 是否装好</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 -V</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pip 9.0.1 from /usr/lib/python3/dist-packages (python 3.6)</span></span><br></pre></td></tr></table></figure></li><li><p>在 Ubuntu 下修改 pip (python) 安装源</p><ol><li><p><code>mkdir .pip</code> 文件夹</p></li><li><p>在 <code>~/.pip</code> 目录下，新建 <code>pip.conf</code></p></li><li><p>写入以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout = 6000</span><br><span class="line">index-url = https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">trusted-host = pypi.mirrors.ustc.edu.cn</span><br></pre></td></tr></table></figure></li></ol></li><li><p>在windows下操作，同样要改 pip 安装源</p><ol><li><p>进入 C:\Users\Administrator\AppData\Roaming</p></li><li><p>创建文件夹 C:\Users\Administrator\AppData\Roaming\pip</p></li><li><p>新建 pip.ini 文件</p></li><li><p>写入以下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">timeout</span> = <span class="number">6000</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"><span class="attr">trusted-host</span> = pypi.mirrors.ustc.edu.cn</span><br></pre></td></tr></table></figure><ul><li>注意：下载的时候不要挂VPN</li></ul></li></ol></li><li><p>在 PyCharm 修改 pip 安装源</p></li></ul><hr><h2 id="文件操作"><a class="headerlink" href="#文件操作"></a>文件操作</h2><p>在 <strong>计算机</strong> 中要操作文件的套路非常固定，一共包含<strong>三个步骤</strong>：</p><ol><li><p>打开文件</p></li><li><p>读、写文件</p><ul><li><strong>读</strong> 将文件内容读入内存</li><li><strong>写</strong> 将内存内容写入文件</li></ul></li><li><p>关闭文件</p></li></ol><h3 id="操作文件的函数-方法"><a class="headerlink" href="#操作文件的函数-方法"></a>操作文件的函数 / 方法</h3><table><thead><tr><th>序号</th><th>函数 / 方法</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>open</td><td>打开文件，并且返回文件操作对象</td></tr><tr><td>2</td><td>read</td><td>将文件内容读取到内存</td></tr><tr><td>3</td><td>write</td><td>将指定内容写入文件</td></tr><tr><td>4</td><td>close</td><td>关闭文件</td></tr></tbody></table><ul><li>open 函数的第一个参数是要打开的文件名（文件名区分大小写）<ul><li>如果文件 <strong>存在</strong>，返回 <strong>文件操作对象</strong></li><li>如果文件 <strong>不存在</strong>，会 <strong>抛出异常</strong></li></ul></li><li>read 方法可以一次性 <strong>读入</strong> 并 <strong>返回</strong> 文件的 <strong>所有内容</strong></li><li>close 方法负责 <strong>关闭文件</strong><ul><li>如果 <strong>忘记关闭文件</strong>，<strong>会造成系统资源消耗，而且会影响到后续对文件的访问</strong></li><li>注意：read 方法执行后，会把 <strong>文件指针</strong> 移动到 <strong>文件的末尾</strong><ul><li>如果读到结尾再读，会得到空的字符串</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">use_open</span>():</span><br><span class="line">    <span class="comment"># Python以下面形式打开，默认是打开文本文件的</span></span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 读取</span></span><br><span class="line">    text = file.read() </span><br><span class="line">    <span class="built_in">print</span>(text)</span><br><span class="line">    <span class="comment"># 关闭</span></span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    use_open()</span><br></pre></td></tr></table></figure><h3 id="打开文件的方式"><a class="headerlink" href="#打开文件的方式"></a>打开文件的方式</h3><ul><li>open 函数默认以 <strong>只读方式</strong> 打开文件，返回文件对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;文件名&quot;</span>, <span class="string">&quot;访问方式&quot;</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>访问方式</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>以<strong>只读</strong>方式打开文件。文件的指针将会放在文件的开头，这是<strong>默认模式</strong>。如果文件不存在，抛出异常</td></tr><tr><td>w</td><td>以<strong>只写</strong>方式打开文件。如果文件存在会被<strong>覆盖</strong>。如果文件不存在，创建新文件，与 r+ 的区别是 w会<strong>清空文件</strong>， r+ 不会清空文件</td></tr><tr><td>a</td><td>以<strong>追加</strong>方式打开文件。如果该文件已存在，<strong>文件指针将会放在文件的结尾</strong>。如果文件不存在，创建新文件进行写入，只能写，不能读</td></tr><tr><td>r+</td><td>以<strong>读写</strong>方式打开文件。<strong>文件的指针将会放在文件的开头</strong>。如果文件不存在，抛出异常</td></tr><tr><td>w+</td><td>以<strong>读写</strong>方式打开文件。如果文件存在会被<strong>覆盖</strong>。如果文件不存在，创建新文件</td></tr><tr><td>a+</td><td>以<strong>读写</strong>方式打开文件。如果该文件已存在，<strong>文件指针将会放在文件的结尾</strong>。如果文件不存在，创建新文件进行写入</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">use_write</span>():</span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 写入</span></span><br><span class="line">    file.write(<span class="string">&quot;Next to meet you&quot;</span>)</span><br><span class="line">    <span class="comment"># 关闭</span></span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    use_write()</span><br></pre></td></tr></table></figure><h3 id="readline-方法"><a class="headerlink" href="#readline-方法"></a>readline 方法</h3><ul><li>readline 方法可以一次读取一行内容</li><li>方法执行后，会把 <strong>文件指针</strong> 移动到下一行，准备再次读取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">use_readline</span>():</span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 每次读一行</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = file.readline()</span><br><span class="line">        <span class="comment"># 如果文件为空，文件结束</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 每读取一行的末尾已经有了一个 `\n</span></span><br><span class="line">        <span class="built_in">print</span>(line, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    use_readline()</span><br><span class="line">    </span><br><span class="line">```</span><br><span class="line">Next to meet you</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">```</span><br></pre></td></tr></table></figure><h3 id="seek-的使用"><a class="headerlink" href="#seek-的使用"></a>seek 的使用</h3><ul><li><p>文件指针定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seek(offset, <span class="keyword">from</span>) </span><br></pre></td></tr></table></figure><ul><li>offset ：文件指针偏移量(很多博客在这里将 offset 定义为指针偏移量，但是目前我的看法是这里定义为指针的相对位置)</li><li>from ： <strong>0-文件开头</strong>、<strong>1-当前位置</strong>、<strong>2-文件末尾</strong> (这里的 0,1,2 只是代表了文件位置，而不是说 0,1,2 可以参与指针偏移的计算。from 是可选项，<strong>默认为 0</strong>)</li><li><strong>二进制模式下才可以往前偏移，二进制模式下 offset 才能为负值</strong></li><li>当有汉字时，seek填写的必须是3的整数倍，否则报错</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 seek 对位置指针进行偏移</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">use_seek</span>():</span><br><span class="line">    <span class="comment"># 打开文件</span></span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 写入</span></span><br><span class="line">    file.write(<span class="string">&quot; hello 123&quot;</span>)</span><br><span class="line">    file.seek(<span class="number">0</span>)</span><br><span class="line">    text = file.read()</span><br><span class="line">    <span class="built_in">print</span>(text)</span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    use_seek()</span><br></pre></td></tr></table></figure><h3 id="w-和-wb-模式的差异"><a class="headerlink" href="#w-和-wb-模式的差异"></a>w 和 wb 模式的差异</h3><ul><li><p>wb 模式：只写的二进制模式，而二进制模式打开得到的是字节流，二进制模式上磁盘存的是什么字符，直接拿出来</p><ul><li>b 模式：得到的是字节流，在b模式下执行open要把encoding删去</li></ul></li><li><p>w 模式：只写的文本模式，而文本模式下， <code>\r\n</code>拿出来是<code>\n</code></p></li></ul><h3 id="文件-目录的常用管理操作"><a class="headerlink" href="#文件-目录的常用管理操作"></a>文件 / 目录的常用管理操作</h3><ul><li>在 <strong>终端</strong> / <strong>文件浏览器</strong>、 中可以执行常规的 <strong>文件</strong> / <strong>目录</strong> 管理操作，例如：创建、重命名、删除、改变路径、查看目录内容 …</li><li>在 Python 中，如果希望通过程序实现上述功能，<strong>需要导入</strong> <strong>os</strong> <strong>模块</strong></li></ul><h4 id="文件操作-2"><a class="headerlink" href="#文件操作-2"></a>文件操作</h4><table><thead><tr><th>序号</th><th>方法名</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>1</td><td>rename</td><td>重命名文件</td><td><code>os.rename(源文件名, 目标文件名)</code></td></tr><tr><td>2</td><td>remove</td><td>删除文件,不能删除文件夹</td><td><code>os.remove(文件名)</code></td></tr></tbody></table><h4 id="目录操作"><a class="headerlink" href="#目录操作"></a>目录操作</h4><table><thead><tr><th>序号</th><th>方法名</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>1</td><td>listdir</td><td>目录列表</td><td><code>os.listdir(目录名)</code></td></tr><tr><td>2</td><td>mkdir</td><td>创建目录</td><td><code>os.mkdir(目录名)</code></td></tr><tr><td>3</td><td>rmdir</td><td>删除目录</td><td><code>os.rmdir(目录名)</code></td></tr><tr><td>4</td><td>getcwd</td><td>获取当前目录</td><td><code>os.getcwd()</code></td></tr><tr><td>5</td><td>chdir</td><td>修改工作目录</td><td><code>os.chdir(目标目录)</code></td></tr><tr><td>6</td><td>path.isdir</td><td>判断是否是文件夹</td><td><code>os.path.isdir(文件路径)</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">use_rename</span>():</span><br><span class="line">    os.rename(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;file.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">use_remove</span>():</span><br><span class="line">    os.remove(<span class="string">&#x27;file.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">use_listdir</span>():</span><br><span class="line">    <span class="built_in">print</span>(os.listdir(<span class="string">&quot;.&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 深度优先的目录遍历</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dir_dfs</span>(<span class="params">path</span>):</span><br><span class="line">    file_list = os.listdir(path)</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> file_list:  <span class="comment"># 遍历当前目录下的所有文件</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(path + <span class="string">&quot;/&quot;</span> + filename):  <span class="comment"># 如果是目录</span></span><br><span class="line">            dir_dfs(path + <span class="string">&quot;/&quot;</span> + filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#  use_rename()</span></span><br><span class="line">    <span class="comment">#  use_remove()</span></span><br><span class="line">    <span class="comment">#  use_listdir()</span></span><br><span class="line">    dir_dfs(<span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="eval-函数"><a class="headerlink" href="#eval-函数"></a>eval 函数</h2><ul><li><strong>将字符串</strong> 当成 <strong>有效的表达式</strong> 来求值 并 <strong>返回计算结果</strong></li></ul><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;1 + 1&quot;</span>))  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(<span class="string">&quot;[1, 2, 3, 4, 5]&quot;</span>)))  <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;&#123;&#x27;name&#x27;:&#x27;zs&#x27;, &#x27;age&#x27;:18&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(<span class="built_in">str</span>)))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>在开发时千万不要使用 eval 直接转换 input 的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存在安全风险</span></span><br><span class="line"><span class="comment"># 不要用eval去执行前端传递过来的字符串</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;rm -rf /&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><hr><h1>Python常用数据结构与算法</h1><hr><h2 id="栈"><a class="headerlink" href="#栈"></a>栈</h2><hr><ul><li><p>Python代码定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.stack = []  <span class="comment"># 使用列表实现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, ele</span>):</span><br><span class="line">        self.stack.append(ele)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.stack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.empty():</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;stack is empty&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[-<span class="number">1</span>]  <span class="comment"># 切片，获取列表末尾元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.stack == []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.stack)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="队列"><a class="headerlink" href="#队列"></a>队列</h2><hr><ul><li><p>Python代码定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环队列</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增删查改</span></span><br><span class="line">queue = deque([<span class="string">&quot;Eric&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Michael&quot;</span>])</span><br><span class="line">queue.append(<span class="string">&#x27;luke&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(queue)</span><br><span class="line"><span class="comment"># deque([&#x27;Eric&#x27;, &#x27;John&#x27;, &#x27;Michael&#x27;, &#x27;luke&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(queue.popleft())  <span class="comment"># 左边出队</span></span><br><span class="line"><span class="comment"># Eric</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(queue)</span><br><span class="line"><span class="comment"># deque([&#x27;John&#x27;, &#x27;Michael&#x27;, &#x27;luke&#x27;])</span></span><br><span class="line"></span><br><span class="line">queue[<span class="number">0</span>] = <span class="string">&#x27;xiongda&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(queue[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># xiongda</span></span><br></pre></td></tr></table></figure><ul><li><p>判断循环队列 满：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(rear + <span class="number">1</span>) % MaxSize == front</span><br></pre></td></tr></table></figure></li><li><p>判断循环队列 空：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rear == front</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="二叉树"><a class="headerlink" href="#二叉树"></a>二叉树</h2><ul><li><p>二叉树的节点的定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;节点类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, elem=-<span class="number">1</span>, lchild=<span class="literal">None</span>, rchild=<span class="literal">None</span></span>):</span><br><span class="line">        self.elem = elem</span><br><span class="line"></span><br><span class="line">        self.lchild = lchild</span><br><span class="line">        self.rchild = rchild</span><br></pre></td></tr></table></figure></li><li><p>二叉树的建树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line">        self.queue = []  <span class="comment"># 创建一个辅助队列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 层序遍历建树</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_node</span>(<span class="params">self, elem</span>):</span><br><span class="line">        new_node = Node(elem)  <span class="comment"># 对新节点进行初始化</span></span><br><span class="line">        self.queue.append(new_node)  <span class="comment"># 放入队列</span></span><br><span class="line">        <span class="keyword">if</span> self.root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.root = new_node  <span class="comment"># 树为空，new_node就为树根</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.queue[<span class="number">0</span>].lchild <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment"># 判断左孩子是否为空</span></span><br><span class="line">                self.queue[<span class="number">0</span>].lchild = new_node</span><br><span class="line">            <span class="keyword">elif</span> self.queue[<span class="number">0</span>].rchild <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment"># 判断右孩子是否为空</span></span><br><span class="line">                self.queue[<span class="number">0</span>].rchild = new_node</span><br><span class="line">                self.queue.pop(<span class="number">0</span>)  <span class="comment"># 出队</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先序遍历</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">self, current_node: Node</span>):  <span class="comment"># current_node: Node 指定current_node类型</span></span><br><span class="line">        <span class="keyword">if</span> current_node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(current_node.elem, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">            self.preorder(current_node.lchild)</span><br><span class="line">            self.preorder(current_node.rchild)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 中序遍历</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">midorder</span>(<span class="params">self, current_node: Node</span>):  <span class="comment"># current_node: Node 指定current_node类型</span></span><br><span class="line">        <span class="keyword">if</span> current_node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.midorder(current_node.lchild)</span><br><span class="line">            <span class="built_in">print</span>(current_node.elem, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">            self.midorder(current_node.rchild)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后序遍历</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">postorder</span>(<span class="params">self, current_node: Node</span>):  <span class="comment"># current_node: Node 指定current_node类型</span></span><br><span class="line">        <span class="keyword">if</span> current_node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.postorder(current_node.lchild)</span><br><span class="line">            self.postorder(current_node.rchild)</span><br><span class="line">            <span class="built_in">print</span>(current_node.elem, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tree = Tree()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        tree.insert_node(i)</span><br><span class="line"></span><br><span class="line">    tree.preorder(tree.root)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    tree.midorder(tree.root)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    tree.postorder(tree.root)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1 2 4 8 9 5 10 3 6 7 </span></span><br><span class="line"><span class="string">8 4 9 2 10 5 1 6 3 7 </span></span><br><span class="line"><span class="string">8 9 4 10 5 2 6 7 3 1 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="排序算法"><a class="headerlink" href="#排序算法"></a>排序算法</h2><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html?tdsourcetag=s_pcqq_aiomsg">数据结构可视化 (usfca.edu)</a></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240605154654644.png" alt="排序算法的时间复杂度对比" loading="lazy"></p><h3 id="冒泡排序"><a class="headerlink" href="#冒泡排序"></a>冒泡排序</h3><ul><li>i 很大，内层循环从前象后比，把最大的冒泡放到最后，i 不断减小，最终达到有序</li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240605161708409.png" alt="冒泡排序流程" loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 冒泡排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort_for</span>(<span class="params">self</span>):</span><br><span class="line">    arr = self.arr</span><br><span class="line">    n = self.arr_len</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[i]:</span><br><span class="line">                arr[j], arr[i] = arr[i], arr[j]</span><br><span class="line">                </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort_while</span>(<span class="params">self</span>):</span><br><span class="line">    arr = self.arr</span><br><span class="line">    i = self.arr_len - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; i:</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j + <span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        i -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="选择排序"><a class="headerlink" href="#选择排序"></a>选择排序</h3><ul><li>min_pos 记录最小的，每一轮比较知道最小的是谁，放到最前面，i 变大，最终达到有序</li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240605161737679.png" alt="选择排序流程" loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_sort</span>(<span class="params">self</span>):</span><br><span class="line">    arr = self.arr</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.arr_len - <span class="number">1</span>):</span><br><span class="line">        min_pos = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, self.arr_len):</span><br><span class="line">            <span class="keyword">if</span> arr[min_pos] &gt; arr[j]:</span><br><span class="line">                min_pos = j</span><br><span class="line">        arr[i], arr[min_pos] = arr[min_pos], arr[i]  <span class="comment"># Python特有的两数交换</span></span><br></pre></td></tr></table></figure><h3 id="插入排序"><a class="headerlink" href="#插入排序"></a>插入排序</h3><ul><li>把前面数据作为有序序列，后面的数不断的插入到前面的有序序列中</li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240605162506285.png" alt="插入排序流程" loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort</span>(<span class="params">self</span>):</span><br><span class="line">    arr = self.arr</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; self.arr_len:  <span class="comment"># 外层控制要插入的数</span></span><br><span class="line">        insert_val = arr[i]</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> arr[j] &gt; insert_val:</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        arr[j + <span class="number">1</span>] = insert_val</span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a class="headerlink" href="#希尔排序"></a>希尔排序</h3><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240605184329105.png" alt="希尔排序流程" loading="lazy"></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240605184400039.png" alt loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 希尔排序</span></span><br><span class="line"><span class="comment"># 写插入排序，换gap</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell_sort</span>(<span class="params">self</span>):</span><br><span class="line">    arr = self.arr</span><br><span class="line">    <span class="comment"># 最外层循环控制步长</span></span><br><span class="line">    gap = self.arr_len &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        i = gap  <span class="comment"># 第一个要插入的数的位置</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; self.arr_len:  <span class="comment"># 外层控制要插入的数</span></span><br><span class="line">            insert_val = arr[i]</span><br><span class="line">            j = i - gap</span><br><span class="line">            <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> arr[j] &gt; insert_val:</span><br><span class="line">                arr[j + gap] = arr[j]</span><br><span class="line">                j -= gap</span><br><span class="line">            arr[j + gap] = insert_val</span><br><span class="line">            i += <span class="number">1</span>  <span class="comment"># 只有这一个地方不是 gap</span></span><br><span class="line">        gap &gt;&gt;= <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="快速排序"><a class="headerlink" href="#快速排序"></a>快速排序</h3><ul><li>分治思想，一轮比较，把小的数放到左边，大的数放到右边，分割值已经排好，递归左边的</li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240605185706774.png" alt="快速排序流程" loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 快速排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">self, left, right</span>):</span><br><span class="line">    arr = self.arr</span><br><span class="line">    k = left</span><br><span class="line">    i = left</span><br><span class="line">    <span class="keyword">while</span> i &lt; right:</span><br><span class="line">        <span class="keyword">if</span> arr[i] &lt; arr[right]:  <span class="comment"># k始终指向要存放比分割值小的下标</span></span><br><span class="line">            arr[i], arr[k] = arr[k], arr[i]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    arr[k], arr[right] = arr[right], arr[k]</span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">self, left, right</span>):</span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        pivot = self.partition(left, right)</span><br><span class="line">        self.quick_sort(left, pivot - <span class="number">1</span>)  <span class="comment"># 排左边一半</span></span><br><span class="line">        self.quick_sort(pivot + <span class="number">1</span>, right)  <span class="comment"># 排右边一般</span></span><br></pre></td></tr></table></figure><h3 id="堆排序"><a class="headerlink" href="#堆排序"></a>堆排序</h3><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240606121122289.png" alt="堆排序流程（上）" style="zoom:80%;"><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240606121235562.png" alt="堆排序流程（下）" loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 大根堆</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adjust_max_heap</span>(<span class="params">self, dad, arr_len</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将某棵子树调整为大根堆</span></span><br><span class="line"><span class="string">    :param dad:</span></span><br><span class="line"><span class="string">    :param arr_len:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    arr = self.arr</span><br><span class="line">    son = <span class="number">2</span> * dad + <span class="number">1</span>  <span class="comment"># 找到左孩子的位置</span></span><br><span class="line">    <span class="keyword">while</span> son &lt; arr_len:</span><br><span class="line">        <span class="comment"># 拿左孩子和右孩子进行比较</span></span><br><span class="line">        <span class="keyword">if</span> son + <span class="number">1</span> &lt; arr_len <span class="keyword">and</span> arr[son + <span class="number">1</span>] &gt; arr[son]:</span><br><span class="line">            son += <span class="number">1</span>  <span class="comment"># 准备拿右孩子跟父亲比，如果不成立，还是拿左孩子跟父亲比</span></span><br><span class="line">        <span class="keyword">if</span> arr[son] &gt; arr[dad]:  <span class="comment"># 一旦发生交换，孩子变为父亲，继续调整</span></span><br><span class="line">            arr[son], arr[dad] = arr[dad], arr[son]</span><br><span class="line">            dad = son</span><br><span class="line">            son = dad * <span class="number">2</span> + <span class="number">1</span>  <span class="comment"># 重新往下判断</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"><span class="comment"># 堆排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">self</span>):</span><br><span class="line">    arr = self.arr</span><br><span class="line">    <span class="comment"># range 是左闭右开的，后面那个是步长</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.arr_len // <span class="number">2</span> - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        self.adjust_max_heap(i, self.arr_len)</span><br><span class="line">    <span class="comment"># 交换根部元素和数组的第一个元素</span></span><br><span class="line">    arr[<span class="number">0</span>], arr[self.arr_len - <span class="number">1</span>] = arr[self.arr_len - <span class="number">1</span>], arr[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 数组长度减少，每次都调整大根堆</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.arr_len - <span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        self.adjust_max_heap(<span class="number">0</span>, i)  <span class="comment"># 这里的i表示数组有几个元素</span></span><br><span class="line">        arr[i - <span class="number">1</span>], arr[<span class="number">0</span>] = arr[<span class="number">0</span>], arr[i - <span class="number">1</span>]  <span class="comment"># 顶端元素和最末端元素交换</span></span><br></pre></td></tr></table></figure><h3 id="归并排序"><a class="headerlink" href="#归并排序"></a>归并排序</h3><ul><li>数组一分为二，把low到mid递归变为有序，把mid+1到high递归变为有序，通过merge合并两个有序数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 归并排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, low, mid, high</span>):</span><br><span class="line">    temp_arr = self.temp_arr</span><br><span class="line">    arr = self.arr</span><br><span class="line">    temp_arr[low: high + <span class="number">1</span>] = arr[low: high + <span class="number">1</span>]</span><br><span class="line">    i = low</span><br><span class="line">    j = mid + <span class="number">1</span></span><br><span class="line">    k = low</span><br><span class="line">    <span class="comment"># 合并两个有序数组</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:</span><br><span class="line">        <span class="keyword">if</span> temp_arr[i] &lt; temp_arr[j]:</span><br><span class="line">            arr[k] = temp_arr[i]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> temp_arr[i] &gt; temp_arr[j]:</span><br><span class="line">            arr[k] = temp_arr[j]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 某一个剩余的比较多</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">        arr[k] = temp_arr[i]</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        arr[k] = temp_arr[j]</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 归并排序不限制是二路归并</span></span><br><span class="line"><span class="comment"># low high 就是数组的下标</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">self, low, high</span>):</span><br><span class="line">    <span class="keyword">if</span> low &lt; high:</span><br><span class="line">        <span class="comment"># 递归分割</span></span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        self.merge_sort(low, mid)  <span class="comment"># 递归到最后就是一个单独的元素，下层也是一个单独的元素</span></span><br><span class="line">        self.merge_sort(mid + <span class="number">1</span>, high)</span><br><span class="line">        self.merge(low, mid, high)  <span class="comment"># 合并两个有序数组</span></span><br></pre></td></tr></table></figure><h3 id="计数排序"><a class="headerlink" href="#计数排序"></a>计数排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计数排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_sort</span>(<span class="params">self</span>):</span><br><span class="line">    count = [<span class="number">0</span>] * self.boundary</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    arr = self.arr</span><br><span class="line">    <span class="keyword">while</span> i &lt; self.arr_len:</span><br><span class="line">        count[arr[i]] += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 回填到原数组</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.boundary):</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; count[i]:  <span class="comment"># count[i]记录了i数值出现了多少次</span></span><br><span class="line">            arr[k] = i</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            j += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="排序算法的时间比较"><a class="headerlink" href="#排序算法的时间比较"></a>排序算法的时间比较</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySort</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, list_len</span>):</span><br><span class="line">        self.arr = []  <span class="comment"># 列表</span></span><br><span class="line">        self.arr_len = list_len  <span class="comment"># 列表的长度</span></span><br><span class="line">        self.temp_arr = [<span class="number">0</span>] * self.arr_len</span><br><span class="line">        self.boundary = <span class="number">99</span>  <span class="comment"># 数据范围</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成随机数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">random_int</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.arr_len):</span><br><span class="line">            self.arr.append(random.randint(<span class="number">0</span>, self.boundary - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 冒泡排序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bubble_sort_for</span>(<span class="params">self</span>):</span><br><span class="line">        arr = self.arr</span><br><span class="line">        n = self.arr_len</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                <span class="keyword">if</span> arr[j] &gt; arr[i]:</span><br><span class="line">                    arr[j], arr[i] = arr[i], arr[j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bubble_sort_while</span>(<span class="params">self</span>):</span><br><span class="line">        arr = self.arr</span><br><span class="line">        i = self.arr_len - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> j &lt; i:</span><br><span class="line">                <span class="keyword">if</span> arr[j] &gt; arr[j + <span class="number">1</span>]:</span><br><span class="line">                    arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择排序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_sort</span>(<span class="params">self</span>):</span><br><span class="line">        arr = self.arr</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.arr_len - <span class="number">1</span>):</span><br><span class="line">            min_pos = i</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, self.arr_len):</span><br><span class="line">                <span class="keyword">if</span> arr[min_pos] &gt; arr[j]:</span><br><span class="line">                    min_pos = j</span><br><span class="line">            arr[i], arr[min_pos] = arr[min_pos], arr[i]  <span class="comment"># Python特有的两数交换</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 插入排序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_sort</span>(<span class="params">self</span>):</span><br><span class="line">        arr = self.arr</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; self.arr_len:  <span class="comment"># 外层控制要插入的数</span></span><br><span class="line">            insert_val = arr[i]</span><br><span class="line">            j = i - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> arr[j] &gt; insert_val:</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            arr[j + <span class="number">1</span>] = insert_val</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 希尔排序</span></span><br><span class="line">    <span class="comment"># 写插入排序，换gap</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shell_sort</span>(<span class="params">self</span>):</span><br><span class="line">        arr = self.arr</span><br><span class="line">        <span class="comment"># 最外层循环控制步长</span></span><br><span class="line">        gap = self.arr_len &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">            i = gap  <span class="comment"># 第一个要插入的数的位置</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; self.arr_len:  <span class="comment"># 外层控制要插入的数</span></span><br><span class="line">                insert_val = arr[i]</span><br><span class="line">                j = i - gap</span><br><span class="line">                <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> arr[j] &gt; insert_val:</span><br><span class="line">                    arr[j + gap] = arr[j]</span><br><span class="line">                    j -= gap</span><br><span class="line">                arr[j + gap] = insert_val</span><br><span class="line">                i += <span class="number">1</span>  <span class="comment"># 只有这一个地方不是 gap</span></span><br><span class="line">            gap &gt;&gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 快速排序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">self, left, right</span>):</span><br><span class="line">        arr = self.arr</span><br><span class="line">        k = left</span><br><span class="line">        i = left</span><br><span class="line">        <span class="keyword">while</span> i &lt; right:</span><br><span class="line">            <span class="keyword">if</span> arr[i] &lt; arr[right]:  <span class="comment"># k始终指向要存放比分割值小的下标</span></span><br><span class="line">                arr[i], arr[k] = arr[k], arr[i]</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        arr[k], arr[right] = arr[right], arr[k]</span><br><span class="line">        <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">self, left, right</span>):</span><br><span class="line">        <span class="keyword">if</span> left &lt; right:</span><br><span class="line">            pivot = self.partition(left, right)</span><br><span class="line">            self.quick_sort(left, pivot - <span class="number">1</span>)  <span class="comment"># 排左边一半</span></span><br><span class="line">            self.quick_sort(pivot + <span class="number">1</span>, right)  <span class="comment"># 排右边一般</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adjust_max_heap</span>(<span class="params">self, dad, arr_len</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将某棵子树调整为大根堆</span></span><br><span class="line"><span class="string">        :param dad:</span></span><br><span class="line"><span class="string">        :param arr_len:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        arr = self.arr</span><br><span class="line">        son = <span class="number">2</span> * dad + <span class="number">1</span>  <span class="comment"># 找到左孩子的位置</span></span><br><span class="line">        <span class="keyword">while</span> son &lt; arr_len:</span><br><span class="line">            <span class="comment"># 拿左孩子和右孩子进行比较</span></span><br><span class="line">            <span class="keyword">if</span> son + <span class="number">1</span> &lt; arr_len <span class="keyword">and</span> arr[son + <span class="number">1</span>] &gt; arr[son]:</span><br><span class="line">                son += <span class="number">1</span>  <span class="comment"># 准备拿右孩子跟父亲比，如果不成立，还是拿左孩子跟父亲比</span></span><br><span class="line">            <span class="keyword">if</span> arr[son] &gt; arr[dad]:  <span class="comment"># 一旦发生交换，孩子变为父亲，继续调整</span></span><br><span class="line">                arr[son], arr[dad] = arr[dad], arr[son]</span><br><span class="line">                dad = son</span><br><span class="line">                son = dad * <span class="number">2</span> + <span class="number">1</span>  <span class="comment"># 重新往下判断</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 堆排序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">self</span>):</span><br><span class="line">        arr = self.arr</span><br><span class="line">        <span class="comment"># range 是左闭右开的，后面那个是步长</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.arr_len // <span class="number">2</span> - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            self.adjust_max_heap(i, self.arr_len)</span><br><span class="line">        <span class="comment"># 交换根部元素和数组的第一个元素</span></span><br><span class="line">        arr[<span class="number">0</span>], arr[self.arr_len - <span class="number">1</span>] = arr[self.arr_len - <span class="number">1</span>], arr[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.arr_len - <span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            self.adjust_max_heap(<span class="number">0</span>, i)</span><br><span class="line">            arr[i - <span class="number">1</span>], arr[<span class="number">0</span>] = arr[<span class="number">0</span>], arr[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 归并排序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, low, mid, high</span>):</span><br><span class="line">        temp_arr = self.temp_arr</span><br><span class="line">        arr = self.arr</span><br><span class="line">        temp_arr[low: high + <span class="number">1</span>] = arr[low: high + <span class="number">1</span>]</span><br><span class="line">        i = low</span><br><span class="line">        j = mid + <span class="number">1</span></span><br><span class="line">        k = low</span><br><span class="line">        <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:</span><br><span class="line">            <span class="keyword">if</span> temp_arr[i] &lt; temp_arr[j]:</span><br><span class="line">                arr[k] = temp_arr[i]</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> temp_arr[i] &gt; temp_arr[j]:</span><br><span class="line">                arr[k] = temp_arr[j]</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 某一个剩余的比较多</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">            arr[k] = temp_arr[i]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">            arr[k] = temp_arr[j]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">self, low, high</span>):</span><br><span class="line">        <span class="keyword">if</span> low &lt; high:</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">            self.merge_sort(low, mid)</span><br><span class="line">            self.merge_sort(mid + <span class="number">1</span>, high)</span><br><span class="line">            self.merge(low, mid, high)  <span class="comment"># 合并两个有序数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计数排序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count_sort</span>(<span class="params">self</span>):</span><br><span class="line">        count = [<span class="number">0</span>] * self.boundary</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        arr = self.arr</span><br><span class="line">        <span class="keyword">while</span> i &lt; self.arr_len:</span><br><span class="line">            count[arr[i]] += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 回填到原数组</span></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.boundary):</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> j &lt; count[i]:  <span class="comment"># count[i]记录了i数值出现了多少次</span></span><br><span class="line">                arr[k] = i</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择测试的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_sort</span>(<span class="params">self, sort_method, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.arr)</span><br><span class="line">        sort_method(*args, **kwargs)  <span class="comment"># 方法也可以传递</span></span><br><span class="line">        <span class="built_in">print</span>(self.arr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试排序时间</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_sort_time</span>(<span class="params">self, sort_method, *args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        sort_method(*args, **kwargs)  <span class="comment"># 方法也可以传递</span></span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;use time &#123;&#125;&quot;</span>.<span class="built_in">format</span>(end - start))  <span class="comment"># format不用关注前面的数据类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tmpSort = MySort(<span class="number">10000</span>)</span><br><span class="line">    tmpSort.random_int()</span><br><span class="line">    <span class="comment"># tmpSort.test_sort(tmpSort.quick_sort, 0, tmpSort.arr_len - 1)  # 方法也可以传递</span></span><br><span class="line">    <span class="comment"># tmpSort.test_sort(tmpSort.merge_sort, 0, tmpSort.arr_len - 1)</span></span><br><span class="line">    tmpSort.test_sort_time(tmpSort.merge_sort, <span class="number">0</span>, tmpSort.arr_len - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">用递归都比较费时</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bubble_sort：1.1773815155029297</span></span><br><span class="line"><span class="string">select_sort：1.2040174007415771</span></span><br><span class="line"><span class="string">insert_sort：1.4200668334960938</span></span><br><span class="line"><span class="string">shell_sort：0.016226530075073242</span></span><br><span class="line"><span class="string">quick_sort：0.026999711990356445</span></span><br><span class="line"><span class="string">heap_sort：0.017983436584472656</span></span><br><span class="line"><span class="string">merge_sort：</span></span><br><span class="line"><span class="string">count_sort：0.0010008811950683594</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240607153132677.png" alt="备注" loading="lazy"></p><hr><h2 id="常见面试题"><a class="headerlink" href="#常见面试题"></a>常见面试题</h2><ol><li><p><strong>N 个无序数的数组，让找出第 K 大的数？</strong></p><ul><li>对前 K 个元素建立小根堆，遍历数组元素，发现比堆顶元素要大，淘汰堆顶元素，把这个元素放入堆顶，重新调整为小根堆，循环往复，到最后。时间复杂度为<code>O(NlogK)</code></li><li>也可以用快速排序，通过分隔值分为两块，把比分隔值小的那部分数删除掉，然后再快排比分隔值大的，循环往复，找到K个数。<code>O(N) -&gt; O(N/2) -&gt; O(N/4) -&gt; O(N/8) -&gt; O(N/16) ...</code></li></ul></li><li><p><strong>如果内存无法存储 K 个元素怎么办？</strong></p><ul><li>这是一个逆向思维的问题，假如内存可以存下 N-K+1 个元素，我们首先建立 N-K+1 元素的大根堆，这时依次遍历数组，如果发现某个元素小于堆顶，这时移除堆顶，将新元素放入，重新调整为大根堆，这时遍历到数组末尾，堆顶元素即为第 N-K+1 小的，所以也就是第 K 大的。</li></ul></li><li><p><strong>刚才找的第 K 大的元素是没有考虑重复元素的问题，现在要找的第 K 大是不含有重复元素的第 K 大？</strong></p><ul><li><p>建立小根堆时，重复的元素不放入，通过计数排序去重</p></li><li><p>位图是最快快的去重方法（采用空间换时间）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位图去重</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BitMap</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.bitmap = <span class="number">0</span></span><br><span class="line">        self.arr = [<span class="number">9</span>, <span class="number">20</span>, <span class="number">17</span>, <span class="number">16</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line">        self.new_arr = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">duplicate_remove</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.arr:</span><br><span class="line">            <span class="keyword">if</span> self.bitmap &amp; <span class="number">1</span> &lt;&lt; i:  <span class="comment"># 按位 与</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.new_arr.append(i)</span><br><span class="line">                self.bitmap |= <span class="number">1</span> &lt;&lt; i  <span class="comment"># 按位 或</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    bitmap = BitMap()</span><br><span class="line">    bitmap.duplicate_remove()</span><br><span class="line">    <span class="built_in">print</span>(bitmap.new_arr)</span><br><span class="line">    <span class="comment">#  [9, 20, 17, 16, 3, 4, 8, 2, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">按位与运算符（&amp;）</span></span><br><span class="line"><span class="string">运算规则：0 &amp; 0 = 0; 0 &amp; 1 = 0; 1 &amp; 0 = 0; 1 &amp; 1 = 1;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">按位或运算符（|）</span></span><br><span class="line"><span class="string">运算规则：0 | 0 = 0；0 | 1 = 1；1 | 0 = 1；1 | 1 = 1；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">异或运算符（^）</span></span><br><span class="line"><span class="string">运算规则：0^0=0；   0^1=1；   1^0=1；   1^1=0；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>字典树：用于字符串的去重</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240607185657937.png" alt="字典树介绍" loading="lazy"></p></li></ul></li><li><p><strong>如果单台机器的内存即不能存储 K 个元素，也无法存储 N-K 个元素，如何使用多机排序找出第 K 大的元素？</strong></p><ul><li>如果内存放不下，又不可以多机排序，这时只能使用外部排序，外部排序，首先是将数据切分为 k 块，每一块可以放入内存排序后，重新写回，然后针对 k 块数据采用多路归并（败者树的多路归并思想）<ul><li>败者树（Loser Tree）是一种特殊的完全二叉树结构，主要用于选择算法和归并排序中。它的设计初衷是为了高效地从多个已排序序列中选择最小或最大元素</li></ul></li></ul></li><li><p><strong>总计 25 匹马,5 条赛道,一匹马一个赛道,比赛只能得到 5 匹马之间的快慢程度,请问至少需要比几次，才能得到前三名</strong></p><ul><li>A 组：A1，A2，A3，A4，A5</li><li>B 组：B1，B2，B3，B4，B5</li><li>C 组：C1，C2，C3，C4，C5</li><li>D 组：D1，D2，D3，D4，D5</li><li>E 组：E1，E2，E3，E4，E5<ul><li>假设每组的马的速度是 <strong>X1&gt;X2&gt;X3&gt;X4&gt;X5，(X= A,B,C…)</strong></li><li>首先每组的 5 匹马的比赛是避免不了的，根据每组的快慢且找出最快的前 3 匹马</li><li>再将每组的第一名：A1，B1，C1，D1，E1五匹马拿出来比赛，假设结果为：<strong>A1&gt;B1&gt;C1&gt;D1&gt;E1</strong><ul><li>A 组：<strong>A1，A2，A3</strong></li><li>B 组：<strong>B1，B2</strong>，B3</li><li>C 组：<strong>C1</strong>，C2，C3</li></ul></li><li>接下来把 <strong>A2，B1，A3，B2，C1</strong>。这五匹马再进行一场比赛即可确定全场第二与第三</li><li><strong>总共进行 7 场比赛可以确定最快的前三匹马</strong></li></ul></li></ul></li></ol><hr><h2 id="二分查找"><a class="headerlink" href="#二分查找"></a>二分查找</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">arr, target</span>):</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> arr[mid] &gt; target:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> arr[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">    <span class="built_in">print</span>(binary_search(arr, <span class="number">3</span>))  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><ul><li>二分查找的时间复杂度为 <code>O(logn)</code></li></ul><hr><h2 id="哈希查找"><a class="headerlink" href="#哈希查找"></a>哈希查找</h2><ul><li><p>用到一个列表，通过一个 F(x) 公式得到的一个下标值，必须是 0-999 之间 放到这个列表中</p></li><li><p>获取 ASCII 码值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>))  <span class="comment"># 获得这个 a 的ASCII码为 97</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">elf_hash</span>(<span class="params">hash_str</span>):</span><br><span class="line">    h = <span class="number">0</span></span><br><span class="line">    g = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> hash_str:</span><br><span class="line">        h = (h &lt;&lt; <span class="number">4</span>) + <span class="built_in">ord</span>(i)</span><br><span class="line">        g = h &amp; <span class="number">0xf0000000</span></span><br><span class="line">        <span class="keyword">if</span> g:</span><br><span class="line">            h ^= g &gt;&gt; <span class="number">24</span></span><br><span class="line">        h &amp;= ~g</span><br><span class="line">    <span class="keyword">return</span> h % MAXKEY</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">use_hash</span>():</span><br><span class="line">    str_list = [<span class="string">&quot;xiongda&quot;</span>, <span class="string">&quot;lele&quot;</span>, <span class="string">&quot;hanmeimei&quot;</span>, <span class="string">&quot;wangdao&quot;</span>, <span class="string">&quot;fenghua&quot;</span>]  <span class="comment"># 要存储到哈希表的数据</span></span><br><span class="line">    hash_table = [<span class="literal">None</span>] * MAXKEY  <span class="comment"># 哈希表初始化</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str_list:</span><br><span class="line">        <span class="keyword">if</span> hash_table[elf_hash(i)]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;哈希冲突&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            hash_table[elf_hash(i)] = i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    use_hash()</span><br></pre></td></tr></table></figure><hr><h2 id="sort-常用场景"><a class="headerlink" href="#sort-常用场景"></a>sort 常用场景</h2><h3 id="基本排序-Sorting-Basics"><a class="headerlink" href="#基本排序-Sorting-Basics"></a>基本排序 Sorting Basics</h3><ul><li>sort 函数是 list 列表中的函数，而 sorted 可以对 list 或者 iterator 进行排序</li><li>sort 和 sorted 的比较<ul><li><strong>用</strong> <strong>sort</strong> <strong>函数对列表排序时会影响列表本身，而</strong> <strong>sorted</strong> <strong>不会</strong></li></ul></li></ul><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">sorted</span>(l)  <span class="comment"># l = [5, 2, 3, 1, 4]，不会发生改变</span></span><br><span class="line"></span><br><span class="line">l.sort()  <span class="comment"># l = [1, 2, 3, 4, 5]，会发生改变</span></span><br><span class="line"></span><br><span class="line">d = &#123;<span class="number">3</span>:<span class="string">&quot;D&quot;</span>, <span class="number">1</span>:<span class="string">&quot;A&quot;</span>, <span class="number">2</span>:<span class="string">&quot;C&quot;</span>, <span class="number">5</span>:<span class="string">&quot;B&quot;</span>, <span class="number">4</span>:<span class="string">&quot;E&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sorted</span>(d)  <span class="comment"># [1, 2, 3, 4, 5]，只对key值进行排序</span></span><br></pre></td></tr></table></figure><h3 id="列表内存存储及列表的算法效率"><a class="headerlink" href="#列表内存存储及列表的算法效率"></a>列表内存存储及列表的算法效率</h3><table><thead><tr><th>列表的操作</th><th>时间复杂度</th></tr></thead><tbody><tr><td>index()</td><td><code>O(1)</code></td></tr><tr><td>append</td><td><code>O(1)</code></td></tr><tr><td>pop()</td><td><code>O(1)</code></td></tr><tr><td>pop(i)</td><td><code>O(n)</code></td></tr><tr><td>insert(i,item)</td><td><code>O(n)</code></td></tr><tr><td>del operator</td><td><code>O(n)</code></td></tr><tr><td>iteration</td><td><code>O(n)</code></td></tr><tr><td>contains(in)</td><td><code>O(n)</code></td></tr><tr><td>get slice[x:y]</td><td><code>O(k)</code></td></tr><tr><td>del slice</td><td><code>O(n)</code></td></tr><tr><td>set slice</td><td><code>O(n+k)</code></td></tr><tr><td>reverse</td><td><code>O(n)</code></td></tr><tr><td>concatenate</td><td><code>O(k)</code></td></tr><tr><td>sort</td><td><code>O(nlogn)</code></td></tr><tr><td>multiply (eg：[1, 2, 3] * 2，一般初始化用的比较多)</td><td><code>O(nk)</code></td></tr></tbody></table><h3 id="key-函数-Key-Functions"><a class="headerlink" href="#key-函数-Key-Functions"></a>key 函数 Key Functions</h3><ol><li><pre><code class="language-python">def sort_str():    l = &quot;This is the first line in the Bible from Andrew&quot;.split()        print(l)      # ['This', 'is', 'the', 'first', 'line', 'in', 'the', 'Bible', 'from', 'Andrew']        print(sorted(l, key=str.lower))    # ['Andrew', 'Bible', 'first', 'from', 'in', 'is', 'line', 'the', 'the', 'This']<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```python</span><br><span class="line">   def sort_list_tuple():</span><br><span class="line">       student_tuples = [</span><br><span class="line">           (&#x27;john&#x27;, &#x27;A&#x27;, 15),</span><br><span class="line">           (&#x27;jane&#x27;, &#x27;B&#x27;, 12),</span><br><span class="line">           (&#x27;dave&#x27;, &#x27;B&#x27;, 10),</span><br><span class="line">       ]</span><br><span class="line">   </span><br><span class="line">       print(sorted(student_tuples, key=lambda i: i[2]))</span><br><span class="line">       # 后面这个lambda中i是可以随便命名的</span><br><span class="line">       # i:i[2] 表示 i是每一个元组，i[2] 表示每一个元组的第二个元素</span><br><span class="line">       # [(&#x27;dave&#x27;, &#x27;B&#x27;, 10), (&#x27;jane&#x27;, &#x27;B&#x27;, 12), (&#x27;john&#x27;, &#x27;A&#x27;, 15)]</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-python">class Student:    def __init__(self, name, grade, age):        self.name = name        self.grade = grade        self.age = age    # 功能和之前的__str__差不多，但是比__str__更加灵活    # 但是__repr__可以返回任何类型    def __repr__(self):        return repr((self.name, self.grade, self.age))student_objects = [    Student('john', 'A', 15),    Student('jane', 'B', 12),    Student('dave', 'B', 10), ]# 排序的列表是自定义的objectdef sort_list_object():    print(sorted(student_objects, key=lambda stu: stu.age))sort_list_object()# [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### operator 库函数自定义排序</span><br><span class="line"></span><br><span class="line">- operator 库提供了 itemgetter(), attrgetter(), and a methodcaller()三个函数</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">from operator import itemgetter, attrgetter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student_objects = [</span><br><span class="line"></span><br><span class="line">    Student(&#x27;john&#x27;, &#x27;A&#x27;, 15),</span><br><span class="line"></span><br><span class="line">    Student(&#x27;jane&#x27;, &#x27;B&#x27;, 12),</span><br><span class="line"></span><br><span class="line">    Student(&#x27;dave&#x27;, &#x27;B&#x27;, 10), ]</span><br><span class="line"></span><br><span class="line">def use_operator():</span><br><span class="line">    student_tuples = [</span><br><span class="line">        (&#x27;john&#x27;, &#x27;A&#x27;, 15),</span><br><span class="line">        (&#x27;jane&#x27;, &#x27;B&#x27;, 12),</span><br><span class="line">        (&#x27;dave&#x27;, &#x27;B&#x27;, 10),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    print(sorted(student_tuples, key=itemgetter(2)))</span><br><span class="line">    # [(&#x27;dave&#x27;, &#x27;B&#x27;, 10), (&#x27;jane&#x27;, &#x27;B&#x27;, 12), (&#x27;john&#x27;, &#x27;A&#x27;, 15)]</span><br><span class="line"></span><br><span class="line">    print(sorted(student_objects, key=attrgetter(&quot;age&quot;)))</span><br><span class="line">    # [(&#x27;dave&#x27;, &#x27;B&#x27;, 10), (&#x27;jane&#x27;, &#x27;B&#x27;, 12), (&#x27;john&#x27;, &#x27;A&#x27;, 15)]</span><br><span class="line">    </span><br><span class="line">    print(sorted(student_tuples, key=itemgetter(1, 2)))  </span><br><span class="line">    # itemgetter(1, 2)：先按第一个元素排，然后再按第二个元素排</span><br><span class="line">    </span><br><span class="line">    # [(&#x27;john&#x27;, &#x27;A&#x27;, 15), (&#x27;dave&#x27;, &#x27;B&#x27;, 10), (&#x27;jane&#x27;, &#x27;B&#x27;, 12)]</span><br></pre></td></tr></table></figure></code></pre></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">use_stability</span>():</span><br><span class="line">    l = [(<span class="string">&#x27;red&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;red&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">2</span>)]</span><br><span class="line">    l.sort(key=itemgetter(<span class="number">0</span>))</span><br><span class="line">    <span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line">use_stability()</span><br><span class="line"></span><br><span class="line"><span class="comment"># [(&#x27;blue&#x27;, 1), (&#x27;blue&#x27;, 2), (&#x27;red&#x27;, 1), (&#x27;red&#x27;, 2)]</span></span><br><span class="line"><span class="comment"># sort是稳定的</span></span><br></pre></td></tr></table></figure><h3 id="字典中混合-list-排序"><a class="headerlink" href="#字典中混合-list-排序"></a>字典中混合 list 排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dict_list</span>():</span><br><span class="line">    mydict = &#123;<span class="string">&#x27;Li&#x27;</span>: [<span class="string">&#x27;M&#x27;</span>, <span class="number">7</span>],</span><br><span class="line">              <span class="string">&#x27;Zhang&#x27;</span>: [<span class="string">&#x27;E&#x27;</span>, <span class="number">2</span>],</span><br><span class="line">              <span class="string">&#x27;Wang&#x27;</span>: [<span class="string">&#x27;P&#x27;</span>, <span class="number">3</span>],</span><br><span class="line">              <span class="string">&#x27;Du&#x27;</span>: [<span class="string">&#x27;C&#x27;</span>, <span class="number">2</span>],</span><br><span class="line">              <span class="string">&#x27;Ma&#x27;</span>: [<span class="string">&#x27;C&#x27;</span>, <span class="number">9</span>],</span><br><span class="line">              <span class="string">&#x27;Zhe&#x27;</span>: [<span class="string">&#x27;H&#x27;</span>, <span class="number">7</span>]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># mydict.items() 会把字典序变成一个个元组，然后将元组进行排序</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sorted</span>(mydict.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>][<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">dict_list()</span><br><span class="line"><span class="comment"># [(&#x27;Zhang&#x27;, [&#x27;E&#x27;, 2]), (&#x27;Du&#x27;, [&#x27;C&#x27;, 2]), (&#x27;Wang&#x27;, [&#x27;P&#x27;, 3]), </span></span><br><span class="line"><span class="comment"># (&#x27;Li&#x27;, [&#x27;M&#x27;, 7]), (&#x27;Zhe&#x27;, [&#x27;H&#x27;, 7]), (&#x27;Ma&#x27;, [&#x27;C&#x27;, 9])]</span></span><br></pre></td></tr></table></figure><h3 id="List-中混合字典排序"><a class="headerlink" href="#List-中混合字典排序"></a>List 中混合字典排序</h3><p><strong>针对 list 中的字典元素按照 rating 和 name 进行排序的实现方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"></span><br><span class="line">gameresult = [</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;wins&quot;</span>: <span class="number">10</span>, <span class="string">&quot;losses&quot;</span>: <span class="number">3</span>, <span class="string">&quot;rating&quot;</span>: <span class="number">75.00</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;David&quot;</span>, <span class="string">&quot;wins&quot;</span>: <span class="number">3</span>, <span class="string">&quot;losses&quot;</span>: <span class="number">5</span>, <span class="string">&quot;rating&quot;</span>: <span class="number">57.00</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Carol&quot;</span>, <span class="string">&quot;wins&quot;</span>: <span class="number">4</span>, <span class="string">&quot;losses&quot;</span>: <span class="number">5</span>, <span class="string">&quot;rating&quot;</span>: <span class="number">57.00</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Patty&quot;</span>, <span class="string">&quot;wins&quot;</span>: <span class="number">9</span>, <span class="string">&quot;losses&quot;</span>: <span class="number">3</span>, <span class="string">&quot;rating&quot;</span>: <span class="number">71.48</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(gameresult, key=itemgetter(<span class="string">&quot;rating&quot;</span>, <span class="string">&quot;name&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#123;&#x27;name&#x27;: &#x27;Carol&#x27;, &#x27;wins&#x27;: 4, &#x27;losses&#x27;: 5, &#x27;rating&#x27;: 57.0&#125;, &#123;&#x27;name&#x27;: &#x27;David&#x27;, &#x27;wins&#x27;: 3, &#x27;losses&#x27;: 5, &#x27;rating&#x27;: 57.0&#125;, </span></span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;Patty&#x27;, &#x27;wins&#x27;: 9, &#x27;losses&#x27;: 3, &#x27;rating&#x27;: 71.48&#125;, &#123;&#x27;name&#x27;: &#x27;Bob&#x27;, &#x27;wins&#x27;: 10, &#x27;losses&#x27;: 3, &#x27;rating&#x27;: 75.0&#125;]</span></span><br></pre></td></tr></table></figure><hr><h2 id="红黑树"><a class="headerlink" href="#红黑树"></a>红黑树</h2><ul><li>红黑树（英语：Red–black tree）是一种自平衡二叉查找树</li><li><strong>红黑树相对于</strong> <strong>AVL</strong> <strong>树的时间复杂度是一样的，但是优势是当插入或者删除节点时，红黑树实际的调整次数更少，旋转次数更少，因此红黑树插入删除的效率高于</strong> <strong>AVL</strong> <strong>树，大量中间件产品中使用了红黑树</strong></li></ul><h3 id="红黑树的特点"><a class="headerlink" href="#红黑树的特点"></a>红黑树的特点</h3><ol><li><strong>节点</strong>是红色或黑色</li><li><strong>根</strong>是<strong>黑色</strong></li><li><strong>所有叶子节点</strong>都是<strong>黑色</strong>（叶子是 NIL 节点）</li><li><strong>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点）</strong></li><li><strong>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点</strong><ul><li>从根节点出发到任意一个节点的黑色节点数相同</li><li>口诀：左根右，根叶黑，黑路同，不红红</li></ul></li></ol><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240607214210433.png" alt="红黑树举例" loading="lazy"></p><hr><h3 id="红黑树的插入"><a class="headerlink" href="#红黑树的插入"></a>红黑树的插入</h3><ul><li><p><strong>情形</strong> <strong>1：</strong> 新节点 N 位于树的根上，没有父节点，这种情况就是红黑树没有其他节点，<strong>只有根节点</strong>，那就直接标记会黑色，或者时经过调整后，红黑树的根节点被变为红色了，那就直接把它图为黑色。</p></li><li><p><strong>情形</strong> **2：**新节点的父节点 P 是黑色，所以性质 4 没有失效（新节点是红色的）。在这种情形下，树仍是有效的。性质 5 也未受到威胁，尽管新节点 N 有两个黑色叶子子节点；但由于新节点 N 是红色，通过它的每个子节点的路径就都有同通过它所取代的黑色的叶子的路径同样数目的黑色节点，所以依然满足这个性质</p></li><li><p><strong>情形</strong> <strong>3:<strong>如果</strong>父节点</strong> <strong>P</strong> <strong>和叔父节点</strong> <strong>U</strong> 二者都是红色</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240607215731996.png" alt="情形3" loading="lazy"></p></li><li><p><strong>情形</strong> **4:**父节点 P 是红色而叔父节点 U 是黑色或缺少，<strong>并且新节点</strong> <strong>N</strong> <strong>是其父节点</strong> <strong>P</strong> <strong>的右子节点而父节点</strong> <strong>P</strong> <strong>又是其父节点的左子节点</strong></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240607215839039.png" alt="情形4" loading="lazy"></p></li><li><p><strong>情形 5</strong>：父节点 P 是红色而叔父节点 U 是黑色或缺少，新节点 N 是其父节点的左子节点，而父节点 P 又是其父节点 G 的左子节点</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240607215927729.png" alt="情形5" loading="lazy"></p></li><li><p><strong>图形总结</strong></p></li></ul><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240607215457187.png" alt="情形3、4、5" loading="lazy"></p><ul><li><p>针对<strong>情形四</strong>，叔叔不存在或者是黑色，就需要对父亲 P 进行相应的旋转，<strong>旋转后刚好变成了对应自己下方情形五</strong>的样子，然后再对爷爷 G 进行相应的旋转即可</p></li><li><p><strong>代码演示</strong></p><ul><li><p>红黑树的插入主要分成两步：</p><ol><li>先找到位置放入</li><li>调整</li></ol></li><li><p>定义红黑树节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个红黑树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedBlackTreeNode</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = <span class="literal">None</span>  <span class="comment"># 当前节点的左孩子</span></span><br><span class="line">        self.right = <span class="literal">None</span>  <span class="comment"># 当前节点的右孩子</span></span><br><span class="line">        self.p = <span class="literal">None</span>  <span class="comment"># 当前节点的父亲</span></span><br><span class="line">        self.color = RED</span><br></pre></td></tr></table></figure></li><li><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240611150625248.png" alt="红黑树的左旋" style="zoom:80%;"><ul><li><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 红黑树的左旋</span></span><br><span class="line"><span class="comment"># node：要旋转的节点，对应图里的x</span></span><br><span class="line"><span class="comment"># tree：树根</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left_rotate</span>(<span class="params">tree, node</span>):</span><br><span class="line">    <span class="comment"># 没有右孩子，就不用左旋了</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.right:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    node_right = node.right</span><br><span class="line">    node_right.p = node.p</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.p:  <span class="comment"># 如果node没有父亲，node就是根，右旋之后node_right是根</span></span><br><span class="line">        tree.root = node_right</span><br><span class="line">    <span class="keyword">elif</span> node == node.p.left:  <span class="comment"># node是在父亲的左边</span></span><br><span class="line">        node.p.left = node_right</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        node.p.right = node_right</span><br><span class="line">    <span class="keyword">if</span> node_right.left:</span><br><span class="line">        node_right.left.p = node</span><br><span class="line">    node.right = node_right.left</span><br><span class="line">    node.p = node_right</span><br><span class="line">    node_right.left = node</span><br></pre></td></tr></table></figure></li></ul></li><li><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240611150654985.png" alt="红黑树的右旋" style="zoom:70%;"><ul><li><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 红黑树的右旋</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">right_rotate</span>(<span class="params">tree, node</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.left:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    node_left = node.left</span><br><span class="line">    node_left.p = node.p</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.p:</span><br><span class="line">        tree.root = node_left  <span class="comment"># 改变树根</span></span><br><span class="line">    <span class="keyword">elif</span> node == node.p.left:  <span class="comment"># node是父亲的左孩子</span></span><br><span class="line">        node.p.left = node_left</span><br><span class="line">    <span class="keyword">elif</span> node == node.p.right:  <span class="comment"># node是父亲的右孩子</span></span><br><span class="line">        node.p.right = node_left</span><br><span class="line">    <span class="keyword">if</span> node_left.right:</span><br><span class="line">        node_left.right.p = node</span><br><span class="line">    node.left = node_left.right</span><br><span class="line">    node.p = node_left</span><br><span class="line">    node_left.right = node</span><br></pre></td></tr></table></figure></li></ul></li><li><p>红黑树的调整 及插入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RedBlackTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.root: RedBlackTreeNode = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 放入二叉排序树</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, node: RedBlackTreeNode</span>):</span><br><span class="line">        <span class="comment"># 如果树根为空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">            self.root = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x = self.root</span><br><span class="line">            <span class="keyword">while</span> x:  <span class="comment"># 当x为None时，y恰好是要放入的父亲</span></span><br><span class="line">                y = x</span><br><span class="line">                <span class="keyword">if</span> node.value &gt; x.value:</span><br><span class="line">                    x = x.right</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    x = x.left</span><br><span class="line">            node.p = y</span><br><span class="line">            <span class="keyword">if</span> node.value &gt; y.value:</span><br><span class="line">                y.right = node</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                y.left = node</span><br><span class="line">        self.insert_fixup(node)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 颜色调整以及 插入后的旋转</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_fixup</span>(<span class="params">self, node</span>):</span><br><span class="line">        parent: RedBlackTreeNode = node.p</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 父亲存在，且父亲是红色</span></span><br><span class="line">        <span class="keyword">while</span> parent <span class="keyword">and</span> parent.color == RED:</span><br><span class="line">            grandpa: RedBlackTreeNode = parent.p</span><br><span class="line">            <span class="keyword">if</span> parent == grandpa.left:</span><br><span class="line">                uncle: RedBlackTreeNode = grandpa.right</span><br><span class="line">                <span class="comment"># 判断情形3</span></span><br><span class="line">                <span class="keyword">if</span> uncle <span class="keyword">and</span> uncle.color == RED:</span><br><span class="line">                    parent.color = BLACK</span><br><span class="line">                    uncle.color = BLACK</span><br><span class="line">                    grandpa.color = RED</span><br><span class="line">                    node = grandpa  <span class="comment"># 爷爷重新作为孩子进行调整</span></span><br><span class="line">                    parent = node.p</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 判断情形4</span></span><br><span class="line">                <span class="keyword">if</span> node == parent.right:</span><br><span class="line">                    left_rotate(self, parent)</span><br><span class="line">                    node, parent = parent, node</span><br><span class="line">                <span class="comment"># 情形4之后必做情形5</span></span><br><span class="line">                right_rotate(self, grandpa)</span><br><span class="line">                parent.color = BLACK</span><br><span class="line">                grandpa.color = RED</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                uncle: RedBlackTreeNode = grandpa.left</span><br><span class="line">                <span class="comment"># 判断情形3</span></span><br><span class="line">                <span class="keyword">if</span> uncle <span class="keyword">and</span> uncle.color == RED:</span><br><span class="line">                    parent.color = BLACK</span><br><span class="line">                    uncle.color = BLACK</span><br><span class="line">                    grandpa.color = RED</span><br><span class="line">                    node = grandpa  <span class="comment"># 爷爷重新作为孩子进行调整</span></span><br><span class="line">                    parent = node.p</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 判断情形4</span></span><br><span class="line">                <span class="keyword">if</span> node == parent.left:</span><br><span class="line">                    right_rotate(self, parent)</span><br><span class="line">                    node, parent = parent, node</span><br><span class="line">                <span class="comment"># 情形4之后必做情形5</span></span><br><span class="line">                left_rotate(self, grandpa)</span><br><span class="line">                parent.color = BLACK</span><br><span class="line">                grandpa.color = RED</span><br><span class="line"></span><br><span class="line">        self.root.color = BLACK</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>整体代码汇总：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 红黑树 Python 实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 颜色常量</span></span><br><span class="line">RED = <span class="number">0</span></span><br><span class="line">BLACK = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个红黑树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedBlackTreeNode</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = <span class="literal">None</span>  <span class="comment"># 当前节点的左孩子</span></span><br><span class="line">        self.right = <span class="literal">None</span>  <span class="comment"># 当前节点的右孩子</span></span><br><span class="line">        self.p = <span class="literal">None</span>  <span class="comment"># 当前节点的父亲</span></span><br><span class="line">        self.color = RED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 红黑树的左旋</span></span><br><span class="line"><span class="comment"># node：要旋转的节点，对应图里的x</span></span><br><span class="line"><span class="comment"># tree：树根</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left_rotate</span>(<span class="params">tree, node</span>):</span><br><span class="line">    <span class="comment"># 没有右孩子，就不用左旋了</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.right:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    node_right = node.right</span><br><span class="line">    node_right.p = node.p</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.p:  <span class="comment"># 如果node没有父亲，node就是根，右旋之后node_right是根</span></span><br><span class="line">        tree.root = node_right</span><br><span class="line">    <span class="keyword">elif</span> node == node.p.left:  <span class="comment"># node是在父亲的左边</span></span><br><span class="line">        node.p.left = node_right</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        node.p.right = node_right</span><br><span class="line">    <span class="keyword">if</span> node_right.left:</span><br><span class="line">        node_right.left.p = node</span><br><span class="line">    node.right = node_right.left</span><br><span class="line">    node.p = node_right</span><br><span class="line">    node_right.left = node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 红黑树的右旋</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">right_rotate</span>(<span class="params">tree, node</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.left:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    node_left = node.left</span><br><span class="line">    node_left.p = node.p</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.p:</span><br><span class="line">        tree.root = node_left  <span class="comment"># 改变树根</span></span><br><span class="line">    <span class="keyword">elif</span> node == node.p.left:  <span class="comment"># node是父亲的左孩子</span></span><br><span class="line">        node.p.left = node_left</span><br><span class="line">    <span class="keyword">elif</span> node == node.p.right:  <span class="comment"># node是父亲的右孩子</span></span><br><span class="line">        node.p.right = node_left</span><br><span class="line">    <span class="keyword">if</span> node_left.right:</span><br><span class="line">        node_left.right.p = node</span><br><span class="line">    node.left = node_left.right</span><br><span class="line">    node.p = node_left</span><br><span class="line">    node_left.right = node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedBlackTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.root: RedBlackTreeNode = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 放入二叉排序树</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, node: RedBlackTreeNode</span>):</span><br><span class="line">        <span class="comment"># 如果树根为空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">            self.root = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x = self.root</span><br><span class="line">            <span class="keyword">while</span> x:  <span class="comment"># 当x为None时，y恰好是要放入的父亲</span></span><br><span class="line">                y = x</span><br><span class="line">                <span class="keyword">if</span> node.value &gt; x.value:</span><br><span class="line">                    x = x.right</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    x = x.left</span><br><span class="line">            node.p = y</span><br><span class="line">            <span class="keyword">if</span> node.value &gt; y.value:</span><br><span class="line">                y.right = node</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                y.left = node</span><br><span class="line">        self.insert_fixup(node)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 颜色调整以及 插入后的旋转</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_fixup</span>(<span class="params">self, node</span>):</span><br><span class="line">        parent: RedBlackTreeNode = node.p</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 父亲存在，且父亲是红色</span></span><br><span class="line">        <span class="keyword">while</span> parent <span class="keyword">and</span> parent.color == RED:</span><br><span class="line">            grandpa: RedBlackTreeNode = parent.p</span><br><span class="line">            <span class="keyword">if</span> parent == grandpa.left:</span><br><span class="line">                uncle: RedBlackTreeNode = grandpa.right</span><br><span class="line">                <span class="comment"># 判断情形3</span></span><br><span class="line">                <span class="keyword">if</span> uncle <span class="keyword">and</span> uncle.color == RED:</span><br><span class="line">                    parent.color = BLACK</span><br><span class="line">                    uncle.color = BLACK</span><br><span class="line">                    grandpa.color = RED</span><br><span class="line">                    node = grandpa  <span class="comment"># 爷爷重新作为孩子进行调整</span></span><br><span class="line">                    parent = node.p</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 判断情形4</span></span><br><span class="line">                <span class="keyword">if</span> node == parent.right:</span><br><span class="line">                    left_rotate(self, parent)</span><br><span class="line">                    node, parent = parent, node</span><br><span class="line">                <span class="comment"># 情形4之后必做情形5</span></span><br><span class="line">                right_rotate(self, grandpa)</span><br><span class="line">                parent.color = BLACK</span><br><span class="line">                grandpa.color = RED</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                uncle: RedBlackTreeNode = grandpa.left</span><br><span class="line">                <span class="comment"># 判断情形3</span></span><br><span class="line">                <span class="keyword">if</span> uncle <span class="keyword">and</span> uncle.color == RED:</span><br><span class="line">                    parent.color = BLACK</span><br><span class="line">                    uncle.color = BLACK</span><br><span class="line">                    grandpa.color = RED</span><br><span class="line">                    node = grandpa  <span class="comment"># 爷爷重新作为孩子进行调整</span></span><br><span class="line">                    parent = node.p</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 判断情形4</span></span><br><span class="line">                <span class="keyword">if</span> node == parent.left:</span><br><span class="line">                    right_rotate(self, parent)</span><br><span class="line">                    node, parent = parent, node</span><br><span class="line">                <span class="comment"># 情形4之后必做情形5</span></span><br><span class="line">                left_rotate(self, grandpa)</span><br><span class="line">                parent.color = BLACK</span><br><span class="line">                grandpa.color = RED</span><br><span class="line"></span><br><span class="line">        self.root.color = BLACK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rbtree_print</span>(<span class="params">node, key, direction</span>):</span><br><span class="line">    <span class="keyword">if</span> node:</span><br><span class="line">        <span class="keyword">if</span> direction == <span class="number">0</span>:  <span class="comment"># tree 是根节点</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%2d(B) is root&quot;</span> % node.value)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># tree 是分支节点</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%2d(%s) is %2d&#x27;s %6s child&quot;</span> % (</span><br><span class="line">                node.value, (<span class="string">&quot;B&quot;</span> <span class="keyword">if</span> node.color == <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;R&quot;</span>), key, (<span class="string">&quot;right&quot;</span> <span class="keyword">if</span> direction == <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;left&quot;</span>)))</span><br><span class="line">        rbtree_print(node.left, node.value, -<span class="number">1</span>)</span><br><span class="line">        rbtree_print(node.right, node.value, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    number_list = (<span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>)</span><br><span class="line">    tree = RedBlackTree()</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> number_list:</span><br><span class="line">        node = RedBlackTreeNode(number)</span><br><span class="line">        tree.insert(node)</span><br><span class="line">    rbtree_print(tree.root, tree.root.value, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 4(B) is root</span></span><br><span class="line"><span class="string"> 2(B) is  4&#x27;s   left child</span></span><br><span class="line"><span class="string"> 1(R) is  2&#x27;s   left child</span></span><br><span class="line"><span class="string"> 3(R) is  2&#x27;s  right child</span></span><br><span class="line"><span class="string"> 7(R) is  4&#x27;s  right child</span></span><br><span class="line"><span class="string"> 5(B) is  7&#x27;s   left child</span></span><br><span class="line"><span class="string"> 6(R) is  5&#x27;s  right child</span></span><br><span class="line"><span class="string"> 8(B) is  7&#x27;s  right child</span></span><br><span class="line"><span class="string"> 9(R) is  8&#x27;s  right child</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="红黑树的删除"><a class="headerlink" href="#红黑树的删除"></a>红黑树的删除</h3><ul><li><p><strong>情形</strong> <strong>1:</strong> N 是新的根。在这种情形下，我们就做完了。我们从所有路径去除了一个黑色节点，而新根是黑色的，所以性质都保持着。</p></li><li><p><strong>情形 2：<strong>S 是红色。在这种情形下我们在 N 的父亲上做左旋转，把红色兄弟转换成 N 的祖父，我们接着对调 N 的父亲和祖父的颜色。完成这两个操作后，尽管所有路径上黑色节点的数目没有改变，但现在 N 有了一个黑色的兄弟和一个红色的父亲（它的新兄弟是黑色因为它是红色 S 的一个儿子），所以我们可接下去按</strong>情形 4</strong>、<strong>情形 5</strong> 或<strong>情形 6</strong>来处理</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240607221638971.png" alt="情形2" loading="lazy"></p></li><li><p>**情形 3：**N 的父亲、S 和 S 的儿子都是黑色的，如图 4.1.4.2-3 所示。在这种情形下，我们简单的重绘 S 为红色</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240607221744982.png" alt="情形3" loading="lazy"></p></li><li><p>**情形 4：**S 和 S 的儿子都是黑色，但是 N 的父亲是红色，如图 4.1.4.2-4 所示，在这种情形下，我们简单的交换 N 的兄弟和父亲的颜色</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240607223750942.png" alt="情形4" loading="lazy"></p></li><li><p><strong>情形 5：<strong>S 是黑色，S 的左儿子是红色，S 的右儿子是黑色，而 N 是它父亲的左儿子，如图4.1.4.2-5 所示。在这种情形下我们在 S 上做右旋转，这样 S 的左儿子成为 S 的父亲和 N 的新兄弟。我们接着交换 S 和它的新父亲的颜色。所有路径仍有同样数目的黑色节点，但是现在N 有了一个黑色兄弟，他的右儿子是红色的，所以我们进入了</strong>情形 6</strong>。N 和它的父亲都不受这个变换的影响</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240607223930184.png" alt="情形5" loading="lazy"></p></li><li><p><strong>情形 6：</strong> S 是黑色，S 的右儿子是红色，而 N 是它父亲的左儿子，如图 4.1.4.2-6 所示。在这种情形下我们在 N 的父亲上做左旋转，这样 S 成为 N 的父亲（P）和 S 的右儿子的父亲。我们接着交换 N 的父亲 P（无论 P 是黑色还是红色都可以，所以图 4.1.4.2-6 中标注 R/B,即 red或者 black 都可以）和 S 的颜色，并使 S 的右儿子为黑色</p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240607224223590.png" alt="情形6" loading="lazy"></p></li></ul><p><strong>图形总结：</strong></p><p><img src="https://coo1heisenberg-blog.oss-cn-shanghai.aliyuncs.com/image-20240607224329501.png" alt="图形总结" loading="lazy"></p><ul><li><strong>N 就是 NIL</strong></li><li>总结：<ul><li><strong>p 黑， s 红</strong>， p 左旋</li><li><strong>p 黑， s 黑</strong>， s 变红</li><li><strong>p 红， s 黑</strong>， 颜色互换</li><li><strong>s 黑， SL 红</strong>， s 右旋， s、SL 颜色互换</li><li><strong>s 黑， SR 红</strong>， p 左旋， p、s 颜色互换</li></ul></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00 MyBatis-Plus 笔记</title>
      <link href="/2024/05/15/MyBatisPlus/"/>
      <url>/2024/05/15/MyBatisPlus/</url>
      
        <content type="html"><![CDATA[<h1>MyBatis-Plus</h1><hr><ul><li>MyBatis-Plus（简称 MP）是一个 MyBatis的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生(<a>http://mp.baomidou.com</a>)</li><li>特征：<ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的</strong> <strong>CRUD</strong> <strong>操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分，CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持</strong> <strong>Lambda</strong> <strong>形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li></ul></li></ul><hr><h2 id="MyBatis-Plus的使用"><a class="headerlink" href="#MyBatis-Plus的使用"></a>MyBatis-Plus的使用</h2><hr><ul><li>导入父依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test_20240511<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mybatis-plus-demo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- spring-boot --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--spring cloud alibaba--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--spring cloud--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>导入子依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- springboot --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在<code>application.yml</code>中添加如下配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment"># 在日志中显示实际执行的sql语句</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.coo1heisenberg.mybatis.plus.mapper:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><ul><li>在启动类上加<code>@MapperScan</code>注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.coo1heisenberg.mybatis.plus.mapper&quot;)</span> <span class="comment">// 扫描Mapper接口文件的包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MybatisPlusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义user表对应的映射实体类User</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String name;</span><br><span class="line">    Integer age;</span><br><span class="line">    String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义Mapper<ul><li>BaseMapper是MyBatis-Plus提供的模板mapper，其中包含了基本的CRUD方法，泛型为操作的实体类型</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基本CRUD</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = MybatisPlusApplication.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span> <span class="comment">// junit 4.x 版本要加RUNWITH</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CRUDTest</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1001</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;马超&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">30</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;machao@163.com&quot;</span>);</span><br><span class="line">        <span class="comment">// 输出受影响的行数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">affectRows</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;affectRows = &quot;</span> + affectRows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">affectRows1</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1001</span>);</span><br><span class="line">        <span class="comment">// 输出受影响的行数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;affectRows1 = &quot;</span> + affectRows1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteBatchIds</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; idList = Arrays.asList(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">affectRows</span> <span class="operator">=</span> userMapper.deleteBatchIds(idList);</span><br><span class="line">        System.out.println(<span class="string">&quot;affectRows = &quot;</span> + affectRows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * DELETE FROM user WHERE name = ? AND age = ? AND email = ?</span></span><br><span class="line"><span class="comment">         * hashMap传入的条件是通过and来并列的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        hashMap.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;test1@baomidou.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">affectRows</span> <span class="operator">=</span> userMapper.deleteByMap(hashMap);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;affectRows = &quot;</span> + affectRows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果值为null，不会修改原来列中的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">affectRows</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;affectRows = &quot;</span> + affectRows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 通过单个id</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过id的集合查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByIds</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; idList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectBatchIds(idList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过map来查询</span></span><br><span class="line">    <span class="comment">// map传入的条件通过and来连接</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByMap</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectByMap(hashMap);</span><br><span class="line"></span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="常用注解"><a class="headerlink" href="#常用注解"></a>常用注解</h2><hr><p><strong>@TableName注解</strong></p><ul><li>在数据库中是同时存在多张表的，控制使用Mapper操作某一张表的</li><li>可以使用<code>@TableName</code>注解，定义数据库表和实体类的关系(默认情况下，会根据实体类的类名访问数据库中的表，所以如果当表名和类名相同时，不加<code>@TableName</code>注解，也不会报错)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span> <span class="comment">// 和数据库的哪张表去映射，如果没有写，那么表示对象名和表名一致，忽略首字母大小写</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String name;</span><br><span class="line">    Integer age;</span><br><span class="line">    String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@TableId注解</strong></p><ul><li>可以使用<code>@TableId</code>注解，<strong>定义数据库中的主键字段和实体类中的主键属性之间的映射关系</strong>。(默认情况下，MyBatis-Plus会根据主键名来映射，映射到同名实体类属性)</li><li>其中，value属性指的是数据库主键字段的名称，IdType表示主键的类型。在MyBatis-Plus中主键类型有以下几种：</li></ul><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">AUTO</td><td style="text-align:left">数据库 ID 自增</td></tr><tr><td style="text-align:left">NONE</td><td style="text-align:left">无状态，该类型为未设置主键类型（注解里等于跟随全局，全局里约等于 INPUT）</td></tr><tr><td style="text-align:left">INPUT</td><td style="text-align:left">insert 前自行 set 主键值</td></tr><tr><td style="text-align:left">ASSIGN_ID</td><td style="text-align:left">分配 ID(主键类型为 Number(Long 和 Integer)或 String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td></tr><tr><td style="text-align:left">ASSIGN_UUID</td><td style="text-align:left">分配 UUID,主键类型为 String(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextUUID</code>(默认 default 方法)</td></tr></tbody></table><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.ASSIGN_ID)</span> <span class="comment">// 主键字段</span></span><br><span class="line">            <span class="comment">// 使用MybatisPlus雪花算法生成id</span></span><br><span class="line">    Integer id; <span class="comment">// 这里要写Long，要是用ASSIGN_UUID</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span> <span class="comment">// 普通字段</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span> <span class="comment">// 普通字段</span></span><br><span class="line">    Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span> <span class="comment">// 普通字段</span></span><br><span class="line">    String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@TableField注解</strong></p><ul><li>类似于<code>@TableId</code>注解，<code>@TableField</code>注解在实体类中用来<strong>定义实体类中的普通属性和数据库字段的映射</strong>(默认情况下，MyBatis-Plus会根据字段名来映射，映射到同名实体类属性)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.ASSIGN_ID)</span> <span class="comment">// 主键字段</span></span><br><span class="line">            <span class="comment">// 使用MybatisPlus雪花算法生成id</span></span><br><span class="line">    Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;name&quot;)</span> <span class="comment">// 普通字段</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;age&quot;)</span> <span class="comment">// 普通字段</span></span><br><span class="line">    Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;email&quot;)</span> <span class="comment">// 普通字段</span></span><br><span class="line">    String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@TableField</code>注解需要注意：</p><ul><li>若实体类中的属性使用的是驼峰命名风格，而表中的字段使用的是下划线命名风格（例如实体类属性userName，表中字段user_name），此时MyBatis-Plus会自动<strong>将驼峰命名风格转化为下划线命名风格</strong></li><li>若实体类中的属性和表中的字段不满足上述情况，例如实体类属性name，表中字段username，此时需要在实体类属性上使用<code>@TableField(&quot;username&quot;)</code>设置属性所对应的字段名</li></ul><p><strong>@TableLogic注解</strong></p><ul><li>为了实现逻辑删除，我们可以在表示删除状态的实体类属性上添加<code>@TableLogic</code>注解，从而实现逻辑删除的功能。</li><li>在使用之前，我们要先给数据库user表增加is_deleted属性并给该字段赋默认初值0表示未删除，以及在实体类中添加isDeleted属性。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User表</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.ASSIGN_ID)</span> <span class="comment">// 主键字段</span></span><br><span class="line">            <span class="comment">// 使用MybatisPlus雪花算法生成id</span></span><br><span class="line">    Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;name&quot;)</span> <span class="comment">// 普通字段</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;age&quot;)</span> <span class="comment">// 普通字段</span></span><br><span class="line">    Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;email&quot;)</span> <span class="comment">// 普通字段</span></span><br><span class="line">    String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="comment">// 0 表示未删除</span></span><br><span class="line">    <span class="comment">// 1 表示已删除</span></span><br><span class="line">    Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = MybatisPlusApplication.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIsDeleted</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// UPDATE user SET is_deleted=1 WHERE id=? AND is_deleted=0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">affectRows</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;affectRows = &quot;</span> + affectRows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="条件构造器Wrapper"><a class="headerlink" href="#条件构造器Wrapper"></a>条件构造器Wrapper</h2><hr><ul><li>在我们对数据库做增删改查操作的时候，往往<strong>需要附带一些条件即<code>where</code>条件</strong>，这些条件就是用条件构造器Wrapper来构造和表示的</li></ul><p><img src="/images/MyBatisPlus/image-20240514190755411.png" alt="Wapper分类" loading="lazy"></p><ul><li>Wrapper ： 条件构造抽象类，最顶端父类</li><li>AbstractWrapper ： 用于查询条件的封装，生成 sql 的 where 条件</li><li>QueryWrapper ： 查询条件的封装</li><li>UpdateWrapper ： Update 条件封装(除了包含更新条件，还可以指定更新的字段和对应的新值)</li><li>AbstractLambdaWrapper ： Lambda 语法使用的Wrapper，统一处理解析 lambda 获取 column</li><li>LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper</li><li>LambdaUpdateWrapper ： 用于Lambda语法使用的更新Wrapper(除了包含更新条件，还可以指定更新的字段和对应的新值)</li></ul><hr><h3 id="QueryWrapper"><a class="headerlink" href="#QueryWrapper"></a>QueryWrapper</h3><ul><li>QueryWrapper中提供了多个方法，每个方法都代表了一种条件。可以在Wrapper对象上调用多个方法，从而组装多个具体的查询条件，这些条件可以AND关系，也可以是OR关系。</li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// and用法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueueWrapperTest</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询用户名包含a，年龄在20到30之间，邮箱不为null的用户信息，并且按照年龄的升序排序</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * select * from user where name like &quot;%a%&quot;</span></span><br><span class="line"><span class="comment">     * and age between 20 and 30 and email is not null order by age asc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUser</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper</span><br><span class="line">                .like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">                .between(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">                .isNotNull(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">                .orderByAsc(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Or用法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrTest</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询用户名包含a 或者 年龄大于20，并且按照年龄的升序排序</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * select * from user where name like &quot;%a%&quot; or age &gt; 20 order by age asc;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOr</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        queryWrapper</span><br><span class="line">                .like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">                .or()</span><br><span class="line">                .gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>)</span><br><span class="line">                .orderByAsc(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// and + or 用法</span></span><br><span class="line"><span class="comment">// and中包含or 以及 or中包含and都是同理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrAndTest</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span> &#123;</span><br><span class="line">    <span class="comment">// 查询用户名包含a 且 (年龄大于20 或者 id &gt; 3)的用户</span></span><br><span class="line">    <span class="comment">// select * from user where name like &quot;%a%&quot; and (age &gt; 20 or id &gt; 3)</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">orAndTest1</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        queryWrapper</span><br><span class="line">                .like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">                .and(subrQueryWrapper -&gt; &#123;</span><br><span class="line">                    subrQueryWrapper</span><br><span class="line">                            .gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">                            .or()</span><br><span class="line">                            .gt(<span class="string">&quot;id&quot;</span>, <span class="number">3</span>);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定select中查询的字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectTest</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询用户id &gt; 3 且 年龄在18-30之间的用户的名字</span></span><br><span class="line">    <span class="comment">// select name from user where id &gt; 3 and age between 18 and 30;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectTest</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        queryWrapper</span><br><span class="line">                .gt(<span class="string">&quot;id&quot;</span>,<span class="number">3</span>)</span><br><span class="line">                .between(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>,<span class="number">30</span>)</span><br><span class="line">                .select(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除指定条件的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteTest</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除age &lt; 20的用户</span></span><br><span class="line">    <span class="comment">// delete from user where age &lt; 20</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTest</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        queryWrapper</span><br><span class="line">                .lt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">affectRows</span> <span class="operator">=</span> userMapper.delete(queryWrapper);</span><br><span class="line">        System.out.println(affectRows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="UpdateWrapper"><a class="headerlink" href="#UpdateWrapper"></a>UpdateWrapper</h3><ul><li>可以使用UpdateWrapper来实现数据的修改，在使用UpdateWrapper修改的时候，我们可以使用User对象的非空属性值，表示通过set 语句修改的目标字段及其新值 set 字段1 = 新值1，…</li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateWrapperTest</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// update user set name = &quot;zf&quot;, age = 100 where id &gt; 1 and id &lt;= 3;</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;zf&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper</span><br><span class="line">                .gt(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)</span><br><span class="line">                .le(<span class="string">&quot;id&quot;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一个参数表示修改的字段，第二参数表示修改的条件 </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">affectRows</span> <span class="operator">=</span> userMapper.update(user, updateWrapper);</span><br><span class="line"></span><br><span class="line">        System.out.println(affectRows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外一种写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateWrapperTest</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// update user set name = &quot;zf&quot;, age = 100 where id &gt; 1 and id &lt;= 3;</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        User user = new User();</span></span><br><span class="line"><span class="comment">//        user.setName(&quot;zf&quot;);</span></span><br><span class="line"><span class="comment">//        user.setAge(100);</span></span><br><span class="line"></span><br><span class="line">        UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper</span><br><span class="line">                .gt(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)</span><br><span class="line">                .le(<span class="string">&quot;id&quot;</span>, <span class="number">3</span>)</span><br><span class="line">                .set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zf&quot;</span>)</span><br><span class="line">                .set(<span class="string">&quot;age&quot;</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一个参数表示修改的字段，第二参数表示修改的条件</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">affectRows</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line"></span><br><span class="line">        System.out.println(affectRows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Condition"><a class="headerlink" href="#Condition"></a>Condition</h3><ul><li>有时需要根据条件来决定是否在SQL语句中添加条件，即需要实现动态SQL的功能，此时我们可以使用带condition参数的重载方法来实现。该condition参数是一个<code>boolean</code>值，表示是否在SQL语句中拼接条件。</li><li>Condition不管是QueryWrapper还是UpdateWrapper都是可用的<ul><li>每一个条件，都可以调用其有condition参数的重载方法(<strong>都是第一个参数</strong>)</li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionTest</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">conditionTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询id等于1</span></span><br><span class="line">        queryWrapper</span><br><span class="line">                .eq(flag, <span class="string">&quot;id&quot;</span>, <span class="number">1</span>) <span class="comment">// 如果是false，这个条件就不生效的，与后面的语句无关</span></span><br><span class="line">                .like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="LambdaQueryWrapper"><a class="headerlink" href="#LambdaQueryWrapper"></a>LambdaQueryWrapper</h3><ul><li>LambdaQueryWrapper 以及 LambdaUpdateWrapper 的本质和QueryWrapper是相同的，都主要表示where中的条件，唯一不同的是，<strong>在指定条件字段的时候，不是直接指定字段的名称，而是通过Lambda表达式(实体类中对应属性的getXxx方法或者isXxx方法)来指定</strong></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LambdaQueryWrapper举例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaWrapperTest</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询name为zs，年龄在18-25岁的用户</span></span><br><span class="line">        <span class="comment">// select * from user where name = &quot;zs&quot; and age between 18 and 25;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 与QueryWrapper不同点：在条件构造器中，把列名换成了方法引用，避免列明写错的情况</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        lambdaQueryWrapper</span><br><span class="line">                .eq(User::getName,<span class="string">&quot;zs&quot;</span>)</span><br><span class="line">                .between(User::getAge,<span class="number">18</span>,<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(lambdaQueryWrapper);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LambdaUpdateWrapper举例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambdaUpdateTest</span><span class="params">()</span> &#123;</span><br><span class="line">        LambdaUpdateWrapper&lt;User&gt; lambdaUpdateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将Bob的年龄改为29，邮箱改为 Bob@163.com</span></span><br><span class="line">        <span class="comment">// update user set age = 29, email = &quot;Bob@163.com&quot; where name = &quot;Bob&quot;;</span></span><br><span class="line">        lambdaUpdateWrapper</span><br><span class="line">                .eq(User::getName, <span class="string">&quot;Bob&quot;</span>)</span><br><span class="line">                .set(User::getAge, <span class="number">29</span>)</span><br><span class="line">                .set(User::getEmail, <span class="string">&quot;Bob@163.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">affectRows</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>, lambdaUpdateWrapper);</span><br><span class="line">        System.out.println(affectRows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="分页插件"><a class="headerlink" href="#分页插件"></a>分页插件</h2><hr><ul><li>MyBatis-Plus自带分页插件，只要简单的配置即可实现分页功能</li></ul><p><strong>配置流程</strong>：</p><ul><li>添加配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加分页插件</span></span><br><span class="line">        <span class="comment">// DbType.MYSQL：数据库类型</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageTest</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectPage</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下面两行 等价于 Page&lt;User&gt; page = new Page&lt;&gt;(1,2);</span></span><br><span class="line">        <span class="comment">// 设置当前查询页码</span></span><br><span class="line">        page.setCurrent(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置页面大小</span></span><br><span class="line">        page.setSize(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Page&lt;User&gt; userPage = userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前页的数据</span></span><br><span class="line">        List&lt;User&gt; userList = userPage.getRecords();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取总页数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">pages</span> <span class="operator">=</span> userPage.getPages();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取总记录数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">pageTotal</span> <span class="operator">=</span> userPage.getTotal();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 是否有下一页</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasNext</span> <span class="operator">=</span> userPage.hasNext();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 是否有上一页</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasPrevious</span> <span class="operator">=</span> userPage.hasPrevious();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00 设计模式 笔记</title>
      <link href="/2024/05/13/DesignPattern/"/>
      <url>/2024/05/13/DesignPattern/</url>
      
        <content type="html"><![CDATA[<h1>设计模式</h1><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。设计模式代表了最佳的实践，通常被有经验的软件开发人员所使用。</p><ul><li>借助于设计模式可以编写出非常高效的代码，可复用性以及稳健性都会比较强</li><li>有助于阅读源码框架</li></ul><hr><h2 id="设计模式分类"><a class="headerlink" href="#设计模式分类"></a>设计模式分类</h2><p>GoF（4人组）设计模式共有23种，根据用途的不同，设计模式可以分为：创建型、结构型、行为型三种。</p><ul><li><strong>创建型模式</strong><ul><li>由无到有的设计模式，是为了创建应用程序的实例</li><li>例如：单例模式、工厂模式、建造者模式</li></ul></li><li><strong>结构型模式</strong><ul><li>在已有的实例的基础上，做了一些额外的事情</li><li>例如：代理模式</li></ul></li><li><strong>行为型模式</strong><ul><li>多个类或者实例存在的一定的关系</li><li>例如：责任链模式</li></ul></li></ul><p><img src="/images/DesignPattern/4566b8f93fef47c18a772c8a0125fdf8.png" alt="在这里插入图片描述" loading="lazy"></p><hr><h2 id="UML类图"><a class="headerlink" href="#UML类图"></a>UML类图</h2><p><code>UML</code>全称<code>Unified Modeling Language</code>，是用来进行软件设计的可视化建模工具。</p><p>见知乎链接：<a>https://zhuanlan.zhihu.com/p/109655171</a></p><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">public</span> String password;</span><br><span class="line">    Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">bye</span><span class="params">(String name1, Integer days)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/DesignPattern/3d2f7fc6fd654efc9372f1a02b0645da.png" alt="在这里插入图片描述" loading="lazy"></p><hr><h2 id="设计模式的原则"><a class="headerlink" href="#设计模式的原则"></a>设计模式的原则</h2><p>设计原则按照字母手写简写可以概括为<code>SOLID</code>原则。</p><ul><li><strong>单一职责</strong>原则（<strong><code>S</code>ingle Responsibility Principle</strong>）<ul><li>让每个类的功能单一 ，尽量使得<strong>每个类只负责整个软件的功能模块中的一个</strong></li></ul></li><li><strong>开放封闭</strong>原则（<strong><code>O</code>pen Close Principle</strong>）<ul><li><strong>对新增开发，对修改封闭</strong></li><li>已有的代码直接进行修改是有很大风险的，如果有新需求，可以在已有的代码进行进一步扩展</li></ul></li><li><strong>里氏替换</strong>原则（<strong><code>L</code>iskov Substitution Principle</strong>）<ul><li><strong>凡是父类出现的地方，都可以替换为其子类；子类继承父类，尽量不要重写父类的方法</strong></li><li>eg：<img src="/images/DesignPattern/0bf2dd5cb09744888ee47c942039ff42.png" alt="在这里插入图片描述" loading="lazy"></li></ul></li><li><strong>迪米特</strong>法则（<strong><code>L</code>east Knowledge Principle</strong>）<ul><li>又叫作<strong>最少知道</strong>原则，指的是<strong>一个类/模块对于其他的类/模块有越少的了解越好</strong></li></ul></li><li><strong>接口分离</strong>原则（<strong><code>I</code>nterface Segregation Principle</strong>）<ul><li><strong>不要写大接口（大：接口中的方法多）</strong>，否则会给实现类带来负担</li></ul></li><li><strong>依赖倒置</strong>原则（<strong><code>D</code>ependency Inversion Principle</strong>）<ul><li>开发过程中，<strong>先开发接口，在开发实现类</strong><ul><li>具体：实现类（抽象类的子类）</li><li>抽象：接口和抽象类</li></ul></li></ul></li></ul><hr><h1>常用设计模式</h1><hr><h2 id="创建型设计模式"><a class="headerlink" href="#创建型设计模式"></a>创建型设计模式</h2><h3 id="单例设计模式"><a class="headerlink" href="#单例设计模式"></a>单例设计模式</h3><ul><li>保证一个类只有一个实例对象，并提供了一个访问该实例对象的全局节点</li><li>eg：在整个应用程序中，如果要获得MySingleton实例，<strong>始终获得的都是同一个</strong></li><li>单例设计模式分为<strong>懒汉模式</strong>（<strong>懒加载</strong>）和<strong>饿汉模式</strong>（<strong>立即加载</strong>）<ul><li>懒加载：使用的时候才获得实例</li><li>立即加载：使用之前已经获得实例</li></ul></li><li>单例设计模式的设计原则：<ul><li><ol><li><strong>构造方法私有</strong></li></ol></li><li><ol start="2"><li>定义一个成员变量（<strong>私有静态的成员变量</strong>），用来<strong>接收私有构造方法构造的实例</strong></li></ol></li><li><ol start="3"><li>提供一个<strong>静态方法供外部类调用这个实例</strong></li></ol></li></ul></li></ul><h4 id="饿汉模式"><a class="headerlink" href="#饿汉模式"></a>饿汉模式</h4><ul><li>特点：不支持延时加载（懒加载），获取对象速度比较快；但是如果对象比较大，或者一直没有去使用，那么比较浪费内存空间。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例设计模式：在整个应用程序中，如果要获得MySingleton实例，始终获得的都是同一个</span></span><br><span class="line"><span class="comment">// 单例手写：是面试过程中常见的问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 1. 构造方法私有</span></span><br><span class="line"><span class="comment"> *  2. 定义一个成员变量（私有静态的成员变量），用来接收私有构造方法构造的实例</span></span><br><span class="line"><span class="comment"> *  3. 提供一个静态方法供外部类调用这个实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySingleton</span> &#123;</span><br><span class="line">    <span class="comment">// new MySingleton();</span></span><br><span class="line">    <span class="comment">// 定义了一个实例，要初始化这个实例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// final是不让你去额外修饰它</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">MySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySingleton</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">MySingleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用getInstance方法之前已经完成了实例化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MySingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="懒汉模式（线程不安全）"><a class="headerlink" href="#懒汉模式（线程不安全）"></a>懒汉模式（线程不安全）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒加载（线程不安全）：在完成instance == null这句判断之后，做了线程的切换，导致线程不安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySingleton2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MySingleton2 instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">MySingleton2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MySingleton2 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 第一次使用getInstance方法的时候初始化instance</span></span><br><span class="line">        <span class="comment">// 如何识别是不是第一次使用instance</span></span><br><span class="line">        <span class="comment">// 第一次使用instance的时候是null</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">MySingleton2</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="懒汉模式（线程安全）-Synchronized"><a class="headerlink" href="#懒汉模式（线程安全）-Synchronized"></a>懒汉模式（线程安全）- Synchronized</h4><ul><li>效率低<ul><li>因为执行这个方法需要排队</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySingleton3</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MySingleton3 instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">MySingleton3</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用synchornized关键字即可</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> MySingleton3 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">MySingleton3</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="懒汉模式（线程安全）-Double-Check"><a class="headerlink" href="#懒汉模式（线程安全）-Double-Check"></a>懒汉模式（线程安全）- Double Check</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySingleton4</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MySingleton4 instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">MySingleton4</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MySingleton4 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// double check：做了两次非空的判断</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (MySingleton4.class) &#123;</span><br><span class="line">                <span class="comment">// 如果这里的instance == null不判断的话，仍然有线程切换导致创建多次实例的风险</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">MySingleton4</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="懒汉模式（线程安全）-静态内部类"><a class="headerlink" href="#懒汉模式（线程安全）-静态内部类"></a>懒汉模式（线程安全）- 静态内部类</h4><ul><li>静态内部类的静态代码块的加载时机，使用静态内部类的时候才执行里面的静态代码块<ul><li>可以把实例化的这部分代码放到静态代码块的内部中</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式：静态内部类的方式进行加载</span></span><br><span class="line"><span class="comment"> * 静态代码块中的内容只会执行一次，所以是线程安全的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySingleton5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">MySingleton5</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> MySingleton5 instance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">MySingleton5</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> MySingleton5 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用该方法，才会触发静态内部类的静态代码块的初始化 -&gt; 懒加载</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MySingleton5 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Inner.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="枚举"><a class="headerlink" href="#枚举"></a>枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton6</span> &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a class="headerlink" href="#总结"></a>总结</h4><ul><li>饿汉式：在类加载时期，便已经将<code>instance</code>实例对象创建了；所以这种方式是线程安全的方式，但是不支持懒加载。</li><li>懒汉式：该种方式支持懒加载，但是要么不是线程安全，要么虽然是线程安全，但是需要频繁释放锁、抢夺锁，并发量较低。</li><li>双重检查：既可以实现懒加载，又可以实现高并发的需求。这种方式比较完美，但是代码有一些复杂。</li><li>静态内部类：使用该种方式也可以解决懒加载以及高并发的问题，代码实现起来比双重检查也是比较简洁。</li><li>枚举：最简单、最完美的实现方式。</li></ul><hr><h3 id="工厂设计模式"><a class="headerlink" href="#工厂设计模式"></a>工厂设计模式</h3><ul><li>工厂中一定<strong>会提供一个返回实例的方法</strong>。其中核心的好处是<strong>封装（隐藏）生产的具体细节</strong></li><li><strong>工厂类或接口的命名方式，通常为XXXFactory</strong></li></ul><h4 id="简单工厂模式"><a class="headerlink" href="#简单工厂模式"></a>简单工厂模式</h4><ul><li>只要一个工厂（函数）就可以了，<strong>那么只需要传入不同的参数，就可以返回不同的产品（实例</strong>），这种模式就叫<strong>简单工厂模式</strong>。</li><li>未满足开闭原则</li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactoryExecution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 非简单工厂模式</span></span><br><span class="line">        withoutFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简单工厂模式</span></span><br><span class="line">        withFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">withFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleAodiFactory</span> <span class="variable">simpleAodiFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAodiFactory</span>();</span><br><span class="line">        <span class="type">Aodi</span> <span class="variable">aodi</span> <span class="operator">=</span> simpleAodiFactory.create(s);</span><br><span class="line">        aodi.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">withoutFactory</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        Aodi aodi = new A4();</span></span><br><span class="line"><span class="comment">//        aodi.run();</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="type">Aodi</span> <span class="variable">aodi</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面这部分属于生产的细节，要把生产细节隐藏起来</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;A4&quot;</span>.equals(s))&#123;</span><br><span class="line">            aodi = <span class="keyword">new</span> <span class="title class_">A4</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;A5&quot;</span>.equals(s))&#123;</span><br><span class="line">            aodi = <span class="keyword">new</span> <span class="title class_">A5</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            aodi = <span class="keyword">new</span> <span class="title class_">Q5</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        aodi.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleAodiFactory</span> &#123;</span><br><span class="line">    <span class="comment">// static 增不增加都是可以的</span></span><br><span class="line">    <span class="keyword">public</span> Aodi <span class="title function_">create</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">Aodi</span> <span class="variable">aodi</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;A4&quot;</span>.equals(s))&#123;</span><br><span class="line">            aodi = <span class="keyword">new</span> <span class="title class_">A4</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;A5&quot;</span>.equals(s))&#123;</span><br><span class="line">            aodi = <span class="keyword">new</span> <span class="title class_">A5</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            aodi = <span class="keyword">new</span> <span class="title class_">Q5</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> aodi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="工厂方法模式"><a class="headerlink" href="#工厂方法模式"></a>工厂方法模式</h4><ul><li>核心思想：创建工厂接口，增加不同的实现类之后，它里面的工厂方法就是不用的实现</li><li><strong>要求：把工厂定义为接口或抽象类，通过不同的实现类实现不同实例的生产</strong><ul><li><code>FactoryBean</code></li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AodiFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Aodi <span class="title function_">create</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A4Factory</span> <span class="keyword">implements</span> <span class="title class_">AodiFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Aodi <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">A4</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryMethodExecution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AodiFactory</span> <span class="variable">aodiFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A4Factory</span>();</span><br><span class="line">        aodiFactory.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象工厂模式"><a class="headerlink" href="#抽象工厂模式"></a>抽象工厂模式</h4><ul><li><strong>抽象工厂生产的一系列的产品</strong></li><li>上面两种工厂模式生产的产品比较单一</li></ul><p>eg：</p><p><img src="/images/DesignPattern/8b9aa0b4e5d445a38944363239fbf48b.png" alt="在这里插入图片描述" loading="lazy"></p><hr><h3 id="建造者设计模式（Builder）"><a class="headerlink" href="#建造者设计模式（Builder）"></a>建造者设计模式（Builder）</h3><ul><li>开发过程中会遇到这样一个场景，它的名字不叫<code>XXXBuilder</code>，但是它是采用建造者设计模式的思想来完成</li><li>eg：<code>StringBuilder</code>是建造者设计模式</li><li>建造者模式也叫作生成器模式，就是<strong>分步骤创建复杂对象</strong></li><li>建造者设计模式的代码风格：<ul><li><ol><li>首先要创建要生产的实例（仅仅是执行了构造方法）</li></ol></li><li><ol start="2"><li>会提供很多设置属性值的方法</li></ol></li><li><ol start="3"><li>会提供返回实例的方法（方法名通常是<code>build</code>）</li></ol></li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String battery;</span><br><span class="line">    <span class="keyword">private</span> String screen;</span><br><span class="line">    <span class="keyword">private</span> String os;</span><br><span class="line">    <span class="keyword">private</span> String camera;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="comment">// 通过@Data提供了getter/setter方法，以及我们打印的时候用的toString方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneBuilder</span> &#123;</span><br><span class="line">    <span class="comment">// 当我创建PhoneBuilder实例的时候，同时会创建一个Phone的实例</span></span><br><span class="line">    <span class="comment">// 定义一个全局变量，意味着使用一个Builder实例的方法，其实对同一个Phone做参数设置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PhoneBuilder <span class="title function_">color</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone.setColor(color);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PhoneBuilder <span class="title function_">battery</span><span class="params">(String battery)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone.setBattery(battery);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PhoneBuilder <span class="title function_">screen</span><span class="params">(String screen)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone.setScreen(screen);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PhoneBuilder <span class="title function_">os</span><span class="params">(String os)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone.setOs(os);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PhoneBuilder <span class="title function_">camera</span><span class="params">(String camera)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone.setCamera(camera);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回实例的方法</span></span><br><span class="line"><span class="comment">// 虽然这个方法叫建造，但其实在创建Builder实例的时候，要建造的实例已经实例化了</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UseBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PhoneBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PhoneBuilder</span>();</span><br><span class="line">        <span class="comment">// 方法的连续调用</span></span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> builder.battery(<span class="string">&quot;4000mha&quot;</span>)</span><br><span class="line">                .camera(<span class="string">&quot;1080P&quot;</span>)</span><br><span class="line">                .color(<span class="string">&quot;尊贵黑&quot;</span>)</span><br><span class="line">                .screen(<span class="string">&quot;4K高清&quot;</span>)</span><br><span class="line">                .os(<span class="string">&quot;Android&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(<span class="string">&quot;phone = &quot;</span> + phone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eg：参考StringBuilder的代码风格：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">builder1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(<span class="string">&quot;hello&quot;</span>).append(<span class="string">&quot; world&quot;</span>).append(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="结构型设计模式"><a class="headerlink" href="#结构型设计模式"></a>结构型设计模式</h2><h3 id="代理设计模式（Proxy）"><a class="headerlink" href="#代理设计模式（Proxy）"></a>代理设计模式（Proxy）</h3><ul><li><strong>增强：满足基本的需求之外，还做了额外的事情（通用的事情）</strong></li><li><strong>核心特点：</strong><ul><li><ol><li><strong>代理类存在和委托类一样的方法（这个一样指的是外观上）</strong></li></ol></li><li><ol start="2"><li><strong>代理类执行方法的过程中，一定会执行委托类的方法</strong></li></ol></li></ul></li><li><strong>代理模式最大的优点</strong>：<ul><li><strong>可以不更改目标类代码的前提下，扩展目标类代码的功能。</strong></li></ul></li></ul><h4 id="静态代理"><a class="headerlink" href="#静态代理"></a>静态代理</h4><ul><li>委托类、目标类（target）：<code>UserServiceImpl</code></li><li>代理类：<code>UserServiceProxy</code></li><li>要保证代理类和委托类提供的方法的外观完全一样：<ul><li><ol><li>实现和委托类相同的接口</li></ol></li><li><ol start="2"><li>继承委托类，重写委托类中的方法</li></ol></li></ul></li><li>代理类中要调用委托类的方法</li><li><strong>静态代理最大的缺点</strong>：<ul><li><strong>代码较为冗余，每代理一个类，便要手动编写一个代理类</strong></li><li><strong>代理对象和目标类对象均实现了接口，如果接口发生了修改，不仅目标类需要更改，代理类也需要同步发生修改，维护成本变高了很多</strong></li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insert</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insert</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行UserServiceImpl的insert方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行UserServiceImpl的remove方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1：代理类实现了和委托类相同的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insert</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="comment">// 应该执行UserServiceImpl的insert方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> userService.insert(name);</span><br><span class="line">        <span class="keyword">return</span> insert;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 应该执行UserServiceImpl的remove方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">remove</span> <span class="operator">=</span> userService.remove(id);</span><br><span class="line">        <span class="keyword">return</span> remove;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2：代理类继承了委托类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceProxy1</span> <span class="keyword">extends</span> <span class="title class_">UserServiceImpl</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insert</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用父类的方法 -&gt; 调用了委托类的方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.insert(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Execution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        withoutProxy();</span><br><span class="line"></span><br><span class="line">        withProxy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">withProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获得代理对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceProxy</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 使用代理对象调用方法，它的外观跟委托类是一模一样的</span></span><br><span class="line">        userService.insert(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">withoutProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserServiceImpl</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        userService.insert(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态代理"><a class="headerlink" href="#动态代理"></a>动态代理</h4><ul><li>静态代理的代理类需要自己手动去写，动态代理的代理类不用自己手动去写</li><li>分类：<ul><li><code>JDK</code>动态代理<ul><li>会自动生成代理类，与<code>UserServiceProxy</code>类似（代理类和委托类实现了相同的接口）</li><li>效率比较高</li><li><strong>委托类必须实现接口</strong></li></ul></li><li><code>cglib</code>动态代理<ul><li>会自动生成代理类，与<code>UserServiceProxy1</code>类似（代理类继承自委托类）</li><li><strong>委托类可以不实现接口</strong></li></ul></li></ul></li></ul><p><img src="/images/DesignPattern/ff9f0366712d42dc85c2427485c23f04.png" alt="在这里插入图片描述" loading="lazy"></p><p><strong>JDK动态代理</strong></p><ul><li><strong><code>JDK</code>动态代理，即<code>JDK</code>给我们提供的动态生成代理类的方式，无需引入第三方<code>jar</code>包，但是使用<code>JDK</code>动态代理有一个先决条件，那就是目标类对象必须实现了某个接口；如果目标类对象没有实现任何接口，则<code>JDK</code>动态代理无法使用</strong>。</li><li><strong>生成的代理类中的所有的方法都会指向同一个方法：InvocationHandler的invoke方法，需要程序员来实现InvocationHandler（可以直接写实现类、也可以使用匿名内部类）的invoke方法</strong></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目标类，委托类对象</span></span><br><span class="line">    Object target;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回代理对象</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">generator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// JDK动态代理的代理对象生成</span></span><br><span class="line">        <span class="comment">// 新增一个代理的对象</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Proxy.newProxyInstance( 1 , 2 , 3);</span></span><br><span class="line"><span class="comment">         * 1. 类加载器</span></span><br><span class="line"><span class="comment">         * 2. 委托类接口的数组</span></span><br><span class="line"><span class="comment">         * 3. InvocationHandler 指导代理对象中的方法做何种增强</span></span><br><span class="line"><span class="comment">         * 返回值：代理对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService) Proxy.newProxyInstance</span><br><span class="line">                (ProxyGenerator.class.getClassLoader(),</span><br><span class="line">                        UserServiceImpl.class.getInterfaces(), </span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">CustomInvocationHandle</span>(target));</span><br><span class="line">        proxy.sayHello(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匿名内部类实现</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">generator2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService) Proxy.newProxyInstance</span><br><span class="line">                (ProxyGenerator.class.getClassLoader(),</span><br><span class="line">                        UserServiceImpl.class.getInterfaces(), </span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> </span><br><span class="line">                            <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                                <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">                                <span class="keyword">return</span> invoke;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomInvocationHandle</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    Object instance;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(instance, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭事务&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxyExecution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        <span class="type">ProxyGenerator</span> <span class="variable">proxyGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyGenerator</span>();</span><br><span class="line">        proxyGenerator.setTarget(userService);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService) proxyGenerator.generator();</span><br><span class="line"></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy2</span> <span class="operator">=</span> (UserService) proxyGenerator.generator2();</span><br><span class="line"></span><br><span class="line">        proxy.sayHello(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">开启事务</span><br><span class="line">hello zs</span><br><span class="line">关闭事务</span><br><span class="line">开启事务</span><br><span class="line">hello zs</span><br><span class="line">关闭事务</span><br></pre></td></tr></table></figure><p><strong>cglib动态代理</strong></p><ul><li><strong>生成的代理类中的所有的方法都会指向同一个方法：InvocationHandler的invoke方法，需要程序员来实现InvocationHandler（可以直接写实现类、也可以使用匿名内部类）的invoke方法</strong></li><li><strong>主要原因在于<code>Cglib</code>扩展的代理类会继承自目标类</strong>。<strong>所以这也要求我们的目标类不能是<code>final</code>修饰</strong>。</li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyGenerator</span> &#123;</span><br><span class="line">    Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">generator</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 第一个参数传委托类的class</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> Enhancer.create(UserServiceImpl.class, <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object o, Method method, Object[] objects)</span> </span><br><span class="line">            <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;开始事务&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(target, objects);</span><br><span class="line">                System.out.println(<span class="string">&quot;结束事务&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyExecution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CglibProxyGenerator</span> <span class="variable">generator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibProxyGenerator</span>();</span><br><span class="line">        generator.setTarget(<span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService) generator.generator();</span><br><span class="line">        proxy.sayHello(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">开始事务</span><br><span class="line">hello zs</span><br><span class="line">结束事务</span><br></pre></td></tr></table></figure><p><strong>动态代理小结</strong>：</p><ul><li>代理类中一定会包含和委托类外观一致的方法，该方法中一定会有委托类方法的调用<ul><li>静态代理：（<code>instance</code>、<code>super调用</code>）</li><li>动态代理：<code>method.invoke</code></li></ul></li><li>JDK动态代理的委托类一定要实现接口，JDK代理对象只能使用接口来接收（猫不能接收狗）<ul><li>代理类实现了和委托类相同的接口</li></ul></li><li>Cglib动态代理，接口和实现类都可以接收<ul><li>代理类继承委托类</li></ul></li><li>使用动态代理，所有的方法都会指向<code>InvocationHandler</code>的<code>invoke</code>方法<ul><li>真正需要程序员开发的内容：提供InvocationHandler的实现类（定义实现类或匿名内部类），实现其中的invoke方法</li></ul></li><li>动态代理的优势在于：实现方法的通用的增强，把委托类中出现的相同的内容给提取出来</li></ul><p>面试问题：代理类和委托类之间的关系是什么？   分JDK动态代理和Cglib动态代理两方面回答</p><hr><h2 id="行为型设计模式"><a class="headerlink" href="#行为型设计模式"></a>行为型设计模式</h2><h3 id="责任链"><a class="headerlink" href="#责任链"></a>责任链</h3><p>责任链是一种行为设计模式，允许请求沿着链进行发送。收到请求后，每个处理者均可对请求进行处理或者将其传递给链上的下一个处理者。</p><p>eg：</p><p>将一些共性的部分放置在一个基类中，其中提供的成员变量<code>next</code>能够维护顺序关系，通过调用其提供的<code>setNext</code>方法完成顺序关系的维护，<code>handle</code>方法能够提供不同的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractHandler</span> &#123;</span><br><span class="line">    AbstractHandler next;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span>&#123;</span><br><span class="line">        handleCore();</span><br><span class="line">        <span class="keyword">if</span> (next != <span class="literal">null</span>) &#123;</span><br><span class="line">            next.handle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">handleCore</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 包含处理方法</span></span><br><span class="line"><span class="comment"> * 2. 执行完当前处理方法，要执行下一个处理器的处理方法</span></span><br><span class="line"><span class="comment"> * 3. 内部可以通过成员变量指向下一个处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Handler1</span> <span class="keyword">extends</span> <span class="title class_">AbstractHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AbstractHandler next;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*public void handle()&#123;</span></span><br><span class="line"><span class="comment">        handleCore();</span></span><br><span class="line"><span class="comment">        if (next != null) &#123;</span></span><br><span class="line"><span class="comment">            next.handle();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Handler1的handle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Handler2</span> <span class="keyword">extends</span> <span class="title class_">AbstractHandler</span> &#123;</span><br><span class="line">    <span class="comment">//AbstractHandler next;</span></span><br><span class="line">    <span class="comment">/*public void handle()&#123;</span></span><br><span class="line"><span class="comment">        handleCore();</span></span><br><span class="line"><span class="comment">        if (next != null) &#123;</span></span><br><span class="line"><span class="comment">            next.handle();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Handler2的handle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Handler3</span> <span class="keyword">extends</span> <span class="title class_">AbstractHandler</span> &#123;</span><br><span class="line">    <span class="comment">//AbstractHandler next;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*public void handle()&#123;</span></span><br><span class="line"><span class="comment">        handleCore();</span></span><br><span class="line"><span class="comment">        if (next != null) &#123;</span></span><br><span class="line"><span class="comment">            next.handle();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Handler3的handle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainExecution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Handler1</span> <span class="variable">handler1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler1</span>();</span><br><span class="line">        <span class="type">Handler2</span> <span class="variable">handler2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler2</span>();</span><br><span class="line">        <span class="type">Handler3</span> <span class="variable">handler3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler3</span>();</span><br><span class="line">        <span class="type">Handler4</span> <span class="variable">handler4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler4</span>();</span><br><span class="line"></span><br><span class="line">        handler1.setNext(handler2);</span><br><span class="line">        handler2.setNext(handler3);</span><br><span class="line">        handler3.setNext(handler4);</span><br><span class="line">        <span class="comment">// handler1 -&gt; handler2 -&gt; handler3</span></span><br><span class="line">        <span class="comment">// handler1.handle -&gt; handler2.handle -&gt; handler3.handle</span></span><br><span class="line"></span><br><span class="line">        handler1.handle();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>小结</strong>：</p><ul><li>责任链模式<strong>降低了系统之间的耦合性，提升了系统的可扩展性</strong>。</li><li>在很多中间件、框架的内部大量地使用了该种设计模式，比如Filter的执行过程等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00 Docker 笔记</title>
      <link href="/2024/05/13/Docker/"/>
      <url>/2024/05/13/Docker/</url>
      
        <content type="html"><![CDATA[<h1>Docker</h1><p><img src="/images/Docker/image-20240523204626529.png" alt loading="lazy"></p><p><img src="/images/Docker/2b18dfce7e4d469287630990a4f029fe.png" alt="在这里插入图片描述" loading="lazy"><br><img src="/images/Docker/4504e1fd02b24ab09979740c8cc45ebc.png" alt="在这里插入图片描述" loading="lazy"><br>有了容器引擎的存在：</p><ul><li>容器与容器之间可以互相隔离</li><li>容器内应用程序的运行也可以通过容器引擎调度宿主机的系统资源</li></ul><p>而Docker只是容器引擎的一种实现，除了Docker之外，容器引擎还有很多，比如podman（开源），pouch(阿里)</p><hr><h2 id="Docker介绍"><a class="headerlink" href="#Docker介绍"></a>Docker介绍</h2><ul><li>Docker是一个开源的应用容器引擎，基于Go语言并且遵从Apache2.0协议开源</li><li>Docker将程序以及程序所有的依赖都打包在一起，运行在一个Docker容器中，这样你的程序可以在任何环境都会有一致的表现</li></ul><h2 id="Docker核心概念"><a class="headerlink" href="#Docker核心概念"></a>Docker核心概念</h2><ul><li>镜像（Image）<ul><li>Docker镜像就类似于操作系统的镜像（比如之前安装虚拟机使用到的Ubuntu18），是一个只读的模版。一个镜像中包含了一个或多个特定的应用程序以及运行他们所依赖的应用程序。</li></ul></li><li>容器（Container)<ul><li>把镜像下载到本地，容器就是从镜像创建的应用运行实例。它可以启动、开始、停止、删除，而这些容器都是彼此相互隔离、互不可见的。</li></ul></li><li>仓库（Repository）<ul><li>仓库是集中存放镜像文件的场所。推荐使用的是<a href="https://hub.docker.com/">官方仓库地址</a>，<a href="https://c.163yun.com/hub#/home">网易云仓库</a>。当然，企业也可以搭建自己的仓库。</li></ul></li></ul><hr><h2 id="Docker的使用"><a class="headerlink" href="#Docker的使用"></a>Docker的使用</h2><h3 id="镜像相关的命令"><a class="headerlink" href="#镜像相关的命令"></a>镜像相关的命令</h3><p>想要启动一个容器，首先需要找到它的镜像的。镜像相关的命令如下：</p><ul><li><p>列出本机的所有镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="/images/Docker/2fdc1f52d0d64ea99ab26f15a189929d.png" alt="在这里插入图片描述" loading="lazy"></p><p>这个命令会展示镜像的信息：包括镜像的仓库源(REPOSITORY)、标签(TAG)、镜像ID(IMAGE ID)、 创建时间和大小。</p></li><li><p>从仓库当中拉取镜像到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx:1.21.6</span><br></pre></td></tr></table></figure><p><img src="/images/Docker/4e77ca5a85c64d44ac96350828bf5ce7.png" alt="在这里插入图片描述" loading="lazy"><br>拉取镜像的来源地是仓库——一般使用的是公共仓库，比如默认的<a>hub.docker.com</a>，团队自己也可以建立私有仓库。</p></li><li><p>删除本地镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi nginx:1.21.6</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="容器相关的命令"><a class="headerlink" href="#容器相关的命令"></a>容器相关的命令</h3><h4 id="创建并启动容器"><a class="headerlink" href="#创建并启动容器"></a>创建并启动容器</h4><ul><li><p>通过docker run命令可以从镜像当中启动容器。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run nginx</span><br></pre></td></tr></table></figure><ul><li>默认情况，执行docker run的效果会寻找镜像，<strong>如果相应的镜像不存在，那么会自动从公开仓库当中拉取</strong>；然后启动运行容器；随后附加的命令，在本例中附加命令为空。</li><li>对应nginx容器，就会进入容器内部nginx的交互终端，可以使用<code>ctrl+c</code>从容器当中退出，但是同时也会<strong>停止容器</strong>。<br><img src="/images/Docker/42768525ea93498b8ed6cc196f72660b.png" alt="在这里插入图片描述" loading="lazy"></li></ul></li><li><p>如果给容器指定附加指令，对于nginx容器而言，会直接执行该指令，随后容器就停止了。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run nginx <span class="built_in">echo</span> hello</span><br><span class="line">hello</span><br></pre></td></tr></table></figure></li><li><p>使用<code>--help</code>选项可以获取命令的简明帮助：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># -i, 以交互模式运行容器，通常与 -t 同时使用</span></span><br><span class="line"><span class="comment"># -t, 为容器重新分配一个伪输入终端，通常与 -i 同时使用</span></span><br><span class="line"><span class="comment"># -d, 后台运行容器，并返回容器ID</span></span><br><span class="line"><span class="comment"># --name=&quot;nginx-coo1heisenberg&quot;: 为容器指定一个名称</span></span><br><span class="line"><span class="comment"># -e username=&quot;coo1heisenberg&quot;: 设置环境变量参数</span></span><br></pre></td></tr></table></figure>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span></span><br><span class="line"><span class="comment"># -v: 文件挂载，映射文件</span></span><br></pre></td></tr></table></figure><ul><li>假如需要<strong>进入容器内部，通过shell命令和容器交互</strong></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it nginx /bin/bash</span><br></pre></td></tr></table></figure><p><img src="/images/Docker/8695badf971849779c7c7e0a28e68aad.png" alt="在这里插入图片描述" loading="lazy"></p><p>上述命令执行之后，<strong>用户就可以进入容器内部，像使用一个普通的shell操作容器内部文件系统</strong>。使用<code>ctrl+d</code>可以退出容器并停止容器。</p><ul><li>使用<code>-d</code>选项可以以守护进程的形式运行容器：</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d nginx</span><br></pre></td></tr></table></figure><p><img src="/images/Docker/bd32d3b5d0be4d1f92c92a95ea5f6960.png" alt="在这里插入图片描述" loading="lazy"></p></li></ul><hr><h4 id="查看容器"><a class="headerlink" href="#查看容器"></a>查看容器</h4><ul><li><p>我们还可以<strong>查看容器</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps  <span class="comment"># 列出运行当中的容器</span></span><br><span class="line">docker ps -a  <span class="comment"># 列出所有的容器</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">rm</span> 容器名|ID  <span class="comment"># 删除停止状态的容器</span></span><br></pre></td></tr></table></figure><p><img src="/images/Docker/f1955bf93d9a467fa7725281dc6ac16d.png" alt="在这里插入图片描述" loading="lazy"></p></li></ul><hr><h4 id="进入运行中的容器"><a class="headerlink" href="#进入运行中的容器"></a>进入运行中的容器</h4><ul><li><p>假若一个容器已经存在并且正在运行，使用<code>docker exec</code> 进入容器</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器名 /bin/bash</span><br></pre></td></tr></table></figure><p><img src="/images/Docker/7a5c0fe265924fef8e2be1cc6edca19e.png" alt="在这里插入图片描述" loading="lazy"></p></li></ul><hr><h4 id="查看容器日志"><a class="headerlink" href="#查看容器日志"></a>查看容器日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器日志查看</span></span><br><span class="line">docker logs [-f] 容器ID|容器名</span><br></pre></td></tr></table></figure><p><img src="/images/Docker/b93b930dbe0142559361640f48b51263.png" alt="在这里插入图片描述" loading="lazy"></p><hr><h4 id="容器的启停命令"><a class="headerlink" href="#容器的启停命令"></a>容器的启停命令</h4><ul><li><p>当然也可以<strong>停止、启动、重启或者是删除容器</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker stop 容器ID|容器名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker start 容器ID|容器名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart 容器ID|容器名</span><br></pre></td></tr></table></figure><p><img src="/images/Docker/bd3671c2f9164c0fb3055a83004709d2.png" alt="在这里插入图片描述" loading="lazy"></p></li></ul><hr><h4 id="容器的删除命令"><a class="headerlink" href="#容器的删除命令"></a>容器的删除命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> 容器ID|容器名</span><br></pre></td></tr></table></figure><p><img src="/images/Docker/e5229fd1305945f393b8bd88c504b483.png" alt="在这里插入图片描述" loading="lazy"></p><hr><h3 id="端口映射"><a class="headerlink" href="#端口映射"></a>端口映射</h3><ul><li>容器天生具有隔离的特性，所以不同的容器拥有独立的网络系统</li><li><strong>两个不同的容器在容器内部完全可以使用相同的端口</strong>，并且可以使用宿主机当中已经使用的端口——这些相同的端口号实际上是毫无关联的，彼此之间也无法进行网络通信</li></ul><p>使用docker run的<code>-p</code>选项可以实现端口映射：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将宿主机的8080端口映射到容器的80</span></span><br><span class="line"><span class="comment"># -p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span></span><br><span class="line">docker run -d -p 8080:80 nginx</span><br></pre></td></tr></table></figure><p><img src="/images/Docker/3a66a148e96e431a85bf2851ee6f5d1a.png" alt="在这里插入图片描述" loading="lazy"><br><img src="/images/Docker/e848bfe1fc5748ecac2419798d9f43c6.png" alt="在这里插入图片描述" loading="lazy"></p><hr><h3 id="文件映射"><a class="headerlink" href="#文件映射"></a>文件映射</h3><ul><li>容器天生具有隔离的特性，所以不同的容器拥有独立的文件系统。</li><li><strong>在容器内部做任何的修改，都不会影响到宿主机或者其他容器</strong>。</li></ul><p>使用docker run 的<code>-v</code>可以实现数据持久化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 0.0.0.0:8081:80 -v /tmp/test:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure><p><img src="/images/Docker/5b09bb8f1858458bbafbf4fd3b81dcf2.png" alt="在这里插入图片描述" loading="lazy"><br><img src="/images/Docker/b850eae1dff24a6da011de55ab79a877.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li>容器中访问的<code>/usr/share/nginx/html</code>和宿主系统的<code>/tmp/test</code>的<strong>内容是一致</strong>，<strong>并且任何形式的修改都会在宿主系统和容器当中共享</strong>。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00 Nginx 笔记</title>
      <link href="/2024/05/13/Nginx/"/>
      <url>/2024/05/13/Nginx/</url>
      
        <content type="html"><![CDATA[<h1>Nginx</h1><ul><li>Nginx (engine x) 是一个高性能的<a href="https://baike.baidu.com/item/HTTP">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488">反向代理</a>web服务器，同时也提供了IMAP/POP3/SMTP<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1/100571">服务</a>。</li><li>Nginx是一款轻量级的<a href="https://baike.baidu.com/item/Web/150564">Web</a> 服务器/<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488">反向代理</a>服务器及<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/111106">电子邮件</a>（IMAP/POP3）代理服务器，在BSD-like（开源协议）协议下发行</li><li>其特点是占有内存少，<a href="https://baike.baidu.com/item/%E5%B9%B6%E5%8F%91/11024806">并发</a>能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好</li></ul><hr><h2 id="Nginx的核心功能"><a class="headerlink" href="#Nginx的核心功能"></a>Nginx的核心功能</h2><ol><li>高性能的静态web服务器<ul><li>高性能：并发能力强，大概是5w左右</li><li>静态web服务器：可以存储静态资源</li></ul></li><li>反向代理</li></ol><p><strong>Tomcat与Nginx的异同</strong>：</p><ul><li>相同点：<ul><li>都是web服务器</li><li>都可以处理HTTP请求，返回HTTP响应报文</li></ul></li><li>不同点：<ul><li>Tomcat是使用Java语言开发，而Nginx使用C开发</li><li>Tomcat支持servlet-jsp规范，可以部署java应用，而Nginx不支持servlet-jsp规范，不能部署java应用</li></ul></li></ul><p><strong>正向代理 vs 反向代理</strong>：</p><ul><li>DNS服务器：域名解析服务器，可以把域名解析成对应的IP地址<ul><li>谷歌提供的DNS服务器地址：8.8.8.8</li><li>国内常用的电信和联通搭建的DNS服务器：114.114.114.114</li><li>“墙”：就说国内的DNS服务器把一些国外的域名给屏蔽了，没有这些域名的ip地址信息</li><li>”翻墙“（正向代理）：<ul><li>先与VPN服务器建立连接，这个VPN服务器一般位于国外</li><li>再把这个访问的请求发给VPN服务器，再由这个VPN服务器去DNS域名解析器</li><li>找到对应站点的服务器，由VPN把请求发给目标服务器，然后目标服务器把响应数据返回给VPN服务器</li><li>VPN服务器再把数据返回给我的电脑</li></ul></li></ul></li><li>正向代理：代理服务器是代表用户客户端去访问后端服务器，代理的对象是前面的用户<ul><li>代理服务器代理的是客户端<br><img src="/images/Nginx/07bbcc2a00304366a16a44cfdc4c0bae.png" alt="在这里插入图片描述" loading="lazy"></li></ul></li><li>反向代理：代理服务器是代表后端服务器供客户端去访问，对于前面的用户来说是无感知的，代理的对象是后面的后台服务器<ul><li>代理服务器代理的是目标服务器，客户端感知不到代理服务器的存在</li><li>Nginx就说一种反向代理服务器<br><img src="/images/Nginx/b50758bf557742d89bb23aea7a719f32.png" alt="在这里插入图片描述" loading="lazy"></li></ul></li></ul><hr><h2 id="Nginx的优势"><a class="headerlink" href="#Nginx的优势"></a>Nginx的优势</h2><ol><li>高并发、高性能</li><li>扩展性好（模块化设计）</li><li>异步非阻塞（NIO）的事件驱动模型</li><li>高可靠性（热部署（不用重启，直接生效）、7*24）</li></ol><hr><h2 id="Nginx常用指令"><a class="headerlink" href="#Nginx常用指令"></a>Nginx常用指令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动命令</span></span><br><span class="line">sudo nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭命令</span></span><br><span class="line">sudo snginx -s stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启命令</span></span><br><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><hr><h2 id="Nginx配置文件"><a class="headerlink" href="#Nginx配置文件"></a>Nginx配置文件</h2><ul><li>核心配置文件就是<code>nginx.conf</code>，打开这个核心配置文件</li><li>配置文件中有很多<code>#</code>， 开头的表示注释内容<br><img src="/images/Nginx/903f650b59e64637adb077a9813aa11d.png" alt="在这里插入图片描述" loading="lazy"></li><li>很明显，<code>nginx.conf</code>配置文件分为三部分：<br><img src="/images/Nginx/9b9475d9dbae4c309d874be559affdfd.png" alt="在这里插入图片描述" loading="lazy"></li></ul><hr><h2 id="Nginx的核心功能：反向代理"><a class="headerlink" href="#Nginx的核心功能：反向代理"></a>Nginx的核心功能：反向代理</h2><p><img src="/images/Nginx/33388c1d013a40029f8fd9db90b47a2d.png" alt="在这里插入图片描述" loading="lazy"></p><p><strong>反向代理配置</strong>：</p><ul><li>修改配置文件<ul><li><code>sudo vim /etc/nginx/nginx.conf</code></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">  <span class="comment">#这部分是nginx作为反向代理服务器的配置</span></span><br><span class="line">  server&#123;</span><br><span class="line">  <span class="comment">#nginx监听的端口</span></span><br><span class="line">      listen 8080;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">#虚拟服务器的识别标记，一般配置为本机ip</span></span><br><span class="line">      <span class="comment"># 这部分是虚拟机/xshell的ip地址</span></span><br><span class="line">      server_name 192.168.45.151;</span><br><span class="line">      </span><br><span class="line"><span class="comment">#代理设置地址</span></span><br><span class="line">      location / &#123;</span><br><span class="line">      <span class="comment"># 这部分是路由器给你分配的ip地址</span></span><br><span class="line">          proxy_pass http://192.168.45.151:8888;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>集群及负载均衡配置</strong>：</p><ul><li><strong>集群</strong>：集群中服务器部署在不同的IP和端口号，对外暴露同样的接口，提供同样的功能，我们往集群中的任意节点发送同样的请求，总是得到相同的响应</li><li><strong>集群的意义</strong>：主要为了解决单个Tomcat并发能力有限的问题，因为单个Tomcat的并发能力受到硬件等资源的限制，处理请求的能力是有限的，不能满足企业的需要，所以产生了集群。</li><li><strong>负载均衡策略</strong>：<ul><li><ol><li>轮询（默认）</li></ol></li><li><ol start="2"><li>weight（加权）</li></ol><ul><li>应对硬件资源可能不同</li><li>代表权重,默认为 1,权重越高被分配的客户端越多</li></ul></li><li><ol start="3"><li>ip_hash</li></ol><ul><li>ip_hash 每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题</li></ul></li><li><ol start="4"><li>least_conn （最少连接方式）</li></ol></li><li><ol start="5"><li>fair(第三方) （最短响应时间）</li></ol></li><li><ol start="6"><li>url_hash (第三方)</li></ol></li></ul></li></ul><p>eg：</p><ol><li><p>先配置多个Tomcat服务器<br><img src="/images/Nginx/2b38e55801f74e50a35f89edfd5ef5e0.png" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>在配置文件中声明一个集群<br><img src="/images/Nginx/1d96587cdfa545f7ace6879d853e729d.png" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>访问网址：<a>192.168.88.129:8080</a>按照负载均衡策略分配Tomcat</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00 Linux 笔记</title>
      <link href="/2024/05/13/Linux/"/>
      <url>/2024/05/13/Linux/</url>
      
        <content type="html"><![CDATA[<h1>Linux</h1><h2 id="Linux操作系统的组成"><a class="headerlink" href="#Linux操作系统的组成"></a>Linux操作系统的组成</h2><p>UNIX或者Linux系统⼤致可以分为以下⼏个部分</p><ul><li>硬件交互的操作系统内核</li><li>中间层是shell层</li><li>最外层是应⽤层</li></ul><p><img src="/images/Linux/83f6691f47454144afe07145051bcbbe.png" alt loading="lazy"></p><ul><li>内核层: 内核层是 UNIX/Linux 系统的核⼼和基础，它直接附着在硬件平台之上，控制和管理系统内各种资源 （硬件资源和软件资源），有效地组织进程的运⾏，从⽽扩展硬件的功能，提⾼资源的利⽤效率，为⽤户提供⽅便、⾼效、安全、可靠的应⽤环境。</li><li>Shell层: Shell 层是与⽤户直接交互的界⾯。⽤户可以在提示符下输⼊命令⾏，由 Shell 解释执⾏并输出相应结果或者有关信息，所以我们也把 Shell 称作命令解释器，利⽤系统提供的丰富命令可以快捷⽽简便地完成许多⼯作。</li></ul><hr><h2 id="Linux的文件系统"><a class="headerlink" href="#Linux的文件系统"></a>Linux的文件系统</h2><h3 id="Linux操作系统中的文件类型"><a class="headerlink" href="#Linux操作系统中的文件类型"></a>Linux操作系统中的文件类型</h3><p>在linux中，<strong>⼀切皆为⽂件</strong>。</p><ul><li>⽂件分为下⾯的⼀些类型：<ul><li>普通文件(<code>-</code>)</li><li>目录文件(<code>d</code>)</li><li>链接文件(<code>l</code>)</li><li>设备文件(<code>b/c</code>)</li><li>管道文件(<code>p</code>)</li></ul></li></ul><h3 id="Linux操作系统的组织结构"><a class="headerlink" href="#Linux操作系统的组织结构"></a>Linux操作系统的组织结构</h3><ul><li>没有各种盘符的概念</li><li>根⽬录只有⼀个<code>/</code>，采⽤层级式的树状⽬录结构<br><img src="/images/Linux/fb5ab048a9824cfeaf9f2baeaa9d972c.png" alt loading="lazy"></li><li><code>/</code>：根⽬录，所有的⽬录、⽂件、设备都在/之下，/就是Linux⽂件系统的组织者，也是最上级的领导者。</li><li><code>/bin</code>：bin 就是⼆进制（binary）英⽂缩写。在⼀般的系统当中，都可以在这个⽬录下找到linux常⽤的命令。系统所需要的那些命令位于此⽬录。</li><li><code>/boot</code>：Linux的内核及引导系统程序所需要的⽂件⽬录。</li><li><code>/dev</code>：dev 是设备（device)的英⽂缩写。这个⽬录对所有的⽤户都⼗分重要。因为在这个⽬录中包含了所有linux系统中使⽤的外部设备。但是这⾥并不是放的外部设备的驱动程序。这⼀点和常⽤的windows,dos操作系统不⼀样。它实际上是⼀个访问这些外部设备的端⼝。可以⾮常⽅便地去访问这些外部设备，和访问⼀个⽂件，⼀个⽬录没有任何区别。</li><li><code>/home</code>：如果建⽴⼀个⽤户，⽤户名是&quot;xx&quot;,那么在/home⽬录下就有⼀个对应的/home/xx路径，⽤来存放⽤户的主⽬录。</li><li><code>/lib</code>：lib是库（library）英⽂缩写。这个⽬录是⽤来存放系统动态连接共享库的。⼏乎所有的应⽤程序都会⽤到这个⽬录下的共享库。因此，千万不要轻易对这个⽬录进⾏什么操作，⼀旦发⽣问题，系统就不能⼯作了。</li><li><code>/proc</code>：存储的是当前内核运⾏状态的⼀系列特殊⽂件，⽤户可以通过这些⽂件查看有关系统硬件及当前正在运⾏进程的信息，甚⾄可以通过更改其中某些⽂件来改变内核的运⾏状态。此外还有/srv /sys三个⽬录，内核相关⽬录，不要动。</li><li><code>/root</code>：Linux超级权限⽤户root的家⽬录。</li><li><code>/sbin</code>：这个⽬录是⽤来存放系统管理员的系统管理程序。⼤多是涉及系统管理的命令的存放，是超级权限⽤户root的可执⾏命令存放地，普通⽤户⽆权限执⾏这个⽬录下的命令，sbin中包含的都是root权限才能执⾏的。</li><li><code>/usr</code>：这是linux系统中占⽤硬盘空间最⼤的⽬录。⽤户的很多应⽤程序和⽂件都存放在这个⽬录下。 Unix software resource usr。类似windows系统的program files</li><li><code>/usr/local</code>：这⾥主要存放那些⼿动安装的软件，即不是通过或apt-get安装的软件。它和/usr⽬录具有相类似的⽬录结构。</li><li><code>/usr/share</code> ：系统共⽤的东⻄存放地，⽐如 /usr/share/fonts 是字体⽬录，/usr/share/doc和/usr/share/man帮助⽂件。</li><li><code>/etc</code>：管理所有的配置⽂件的⽬录，⽐如安装mysql的配置⽂件my.conf</li><li><code>/mnt</code>：可供系统管理员使⽤，⼿动挂载⼀些临时设备媒体设备的⽬录。</li><li><code>/media</code>：是⾃动挂载的⽬录。当把U盘插⼊到系统中，会⾃动挂载到该⽬录下。⽐如插⼊⼀个U盘，会⾃动到/media⽬录中挂载。</li><li><code>/opt</code>：额外安装软件存放的⽬录。⽐如mysql的安装包就可以放在该⽬录</li></ul><hr><h2 id="Linux-vs-Windows"><a class="headerlink" href="#Linux-vs-Windows"></a>Linux vs Windows</h2><p><img src="/images/Linux/202af2ab032b47b0be67e6b77ca57a41.png" alt loading="lazy"></p><hr><h2 id="NAT-vs-桥接模式-vs-仅主机"><a class="headerlink" href="#NAT-vs-桥接模式-vs-仅主机"></a>NAT vs 桥接模式 vs 仅主机</h2><ul><li><p>NAT模式默认情况下是DHCP模式，是自动获取IP的，导致每次虚拟机开启之后获取的IP可能会变化</p></li><li><p>假如项目中后续连接的是虚拟机上面的MySQL，那么MySQL的HOST地址可能会经常改变，这就需要我们经常去改项目中的MySQL的连接地址，比较麻烦</p><ul><li>桥接模式是共享的物理网卡，可以ping通</li></ul></li><li><p>所以需要改为静态IP，也就是每次开机之后IP不会变，这样才能方便我们后面项目的开发。<br><img src="/images/Linux/626a50e5890445be9d2bc08c31eecce7.png" alt loading="lazy"></p><p><img src="/images/Linux/aca8351143cd41c2b3b8294d96ac1c86.png" alt loading="lazy"></p><p><img src="/images/Linux/a593f9f5d33e4c6b8d12c94ad69b002c.png" alt loading="lazy"></p></li></ul><hr><h2 id="Linux-常用命令"><a class="headerlink" href="#Linux-常用命令"></a>Linux 常用命令</h2><ul><li><p>sudo 是代表root的权限去执行</p></li><li><p>修改root的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure></li><li><p>添加一个用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useradd –m test –s /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-s 的作用是指定使用的脚本解析器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-m 会创建目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/bin/bash 是脚本解析器</span></span><br></pre></td></tr></table></figure></li><li><p>查看当前系统的用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd </span><br></pre></td></tr></table></figure></li><li><p>切换用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su [用户名]</span><br></pre></td></tr></table></figure></li><li><p><code>ctrl + a</code>：光标回到行首</p></li><li><p><code>ctrl + e</code>：光标回到尾部</p></li><li><p>Linux下基本上所有的命令成功没有提示，失败是会有提示的</p></li><li><p>出现登录后只有一个<code>$</code>符号的原因：useradd没有执行<code>-s</code>指令</p></li><li><p>删除用户后，要删除该用户的家目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userdel -r [用户名]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-r 删除用户名对应的目录</span></span><br></pre></td></tr></table></figure></li><li><p>删除用户出现如下原因：</p><p><img src="/images/Linux/image-20240523184604438.png" alt loading="lazy"></p><ul><li>删除的用户不能是正在运行的用户<ul><li>解决方案：多次<code>exit</code>或者直接关闭xshell</li></ul></li></ul></li><li><p>Xshell中输入退格健出现乱码 的解决方案</p><p><img src="/images/Linux/image-20240523190637749.png" alt loading="lazy"></p></li><li><p>查看之前的记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将后面的75行历史记录导出到xxx.txt</span></span><br><span class="line">history | tail -75 &gt; xxx.txt</span><br></pre></td></tr></table></figure></li><li><p><code>scp</code>  远程copy文件命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scp filename username@ip:path</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">filename：文件名称</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">username：copy到的目标主机的用户名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ip：目标主机IP</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path：目标主机路径</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分为两种情况：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从本机copy到远程机器</span></span><br><span class="line">scp file1 coo1heisenberg@xxx.xxx.xxx.xxx:~/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从远程机器copy到本机</span></span><br><span class="line">scp coo1heisenberg@xxx.xxx.xxx.xxx:~/file1 .</span><br></pre></td></tr></table></figure></li><li><p>如何让xshell中名字变色（$PS1）</p><ul><li>直接在命令行执行即可</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PS1=&quot;\[\e[37;40m\][\[\e[32;40m\]\u\[\e[37;40m\]@ \[\e[36;40m\]\w\[\e[0m\]]\\$ &quot;</span><br></pre></td></tr></table></figure></li><li><p>查看对应命令的帮助</p><ul><li><code>man 命令</code>，通过<code>/</code>来进行搜索</li></ul></li><li><p>文件查找</p><ul><li><p><code>find</code>命令：<strong>find 起始目录 查找条件 操作</strong></p><ul><li><p><code>*</code> 代表零个或者任意多个字符</p></li><li><p><code>?</code> 代表有且只有一个字符</p></li><li><p><code>[]</code> 连续的一部分字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;file*&quot;</span><br><span class="line">find . -name &quot;file?&quot;</span><br><span class="line">find . -name &quot;file[1-3]&quot;</span><br></pre></td></tr></table></figure></li><li><p><code>-empty</code>：查找大小为 0 的目录或文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -empty</span><br></pre></td></tr></table></figure></li><li><p><code>-perm</code> ：查找具有指定权限的文件和目录，权限的表示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -perm 777</span><br></pre></td></tr></table></figure></li><li><p><code>-size n[bckMG]</code>：查找指定文件大小的文件，n 后面的字符表示单位，缺省为 b，代表 512 字节的块。后面要带加号或者减号，表示大于或者小于多大的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -size +1G</span><br></pre></td></tr></table></figure></li><li><p><code>-type x</code>：查找类型为 x 的文件</p><ul><li><p><code>f</code> 普通文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f</span><br></pre></td></tr></table></figure></li><li><p><code>l</code> 符号链接文件（symbolic links）</p><ul><li><p><code>ln -s</code> 建立软连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch file1</span><br><span class="line">touch file2</span><br><span class="line">ln -s file1 file2</span><br></pre></td></tr></table></figure></li><li><p><code>ln</code> 建立硬链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln file1 file2</span><br></pre></td></tr></table></figure><ul><li>硬链接数：就是file1和file2的inode值是一样的，说明这两个文件都可以访问磁盘上inode对应的数据<ul><li>当硬链接数为0时，文件所对应的block就会被操作系统回收，分配给其他文件</li></ul></li></ul></li></ul></li></ul></li><li><p><code>-exec 命令名称 &#123;&#125;</code>：可以让find指令与其他指令一起操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;file*&quot; -exec ls -l &#123;&#125; \</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这后面的 &#123;&#125; \ 是必须加上的，就是把 find 命令找出的文件放到了&#123;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比如说 ： 把 file* 文件都复制到<span class="built_in">dir</span>对应的目录下</span></span><br><span class="line"></span><br><span class="line">find . -name &quot;file*&quot; -exec cp &#123;&#125; dir \</span><br></pre></td></tr></table></figure></li><li><p><code>|</code>：就是管道，是上面命令的另外一种写法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;file*&quot;|xargs ls -l</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">xargs：是分别进行的意思，find命令在执行管道的时候必须加上xargs</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比如说 ： 把 file* 文件都复制到<span class="built_in">dir</span>对应的目录下</span></span><br><span class="line"></span><br><span class="line">find . -name &quot;file*&quot; | xargs -i cp &#123;&#125; dir</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>df -h</code>：查看磁盘空间剩余大小</p></li><li><p>对文件内容进行排序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort 文件名</span><br></pre></td></tr></table></figure></li><li><p>查看文件内容类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file 文件名 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据文件内容，判别文件类型</span></span><br></pre></td></tr></table></figure></li><li><p>报告或删除文件中重复的行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">uniq 文件名</span><br><span class="line"></span><br><span class="line">-c 在输出行前面加上每行在输入文件中出现的次数</span><br><span class="line">-d 仅显示重复行</span><br><span class="line">-u 仅显示不重复的行</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">sort file4|uniq</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先排序再去重</span></span><br></pre></td></tr></table></figure></li><li><p>统计指定文件中的行数、字数、字节数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wc 文件名</span><br><span class="line"></span><br><span class="line">-c 统计字节数</span><br><span class="line">-l 统计行数</span><br><span class="line">-m 统计字符数。这个标志不能与 -c 标志一起使用</span><br><span class="line">-w 统计字数。一个字被定义为由空白、跳格（tab）或换行字</span><br></pre></td></tr></table></figure></li><li><p>搜索文件内容 <code>grep</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep [选项] [查找模式] [文件名 1，文件名 2，…]</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">grep world file1</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Linux-其他命令"><a class="headerlink" href="#Linux-其他命令"></a>Linux 其他命令</h2><ul><li>绝对路径： 路径的写法，由根⽬录<code>/</code>写起<ul><li>例如： /usr/share/doc 这个⽬录。</li></ul></li><li>相对路径：路径的写法，不是由 / 写起<ul><li>例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成：<code>cd ../man</code>或<code>cd man</code></li></ul></li></ul><ol><li><p>设置静态IP</p><ul><li>查看虚拟机本地的IP地址，执行命令</li></ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看本地IP地址</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果提示没有找到这个命令，那么首先需要安装工具</span></span><br><span class="line">sudo apt install net-tools</span><br></pre></td></tr></table></figure></li><li><p><strong>pwd</strong> ：显示当前⽬录路径</p></li><li><p><strong>ls</strong>：（list directory contents）显示当前⽂件夹下的⽬录或⽂件</p><ul><li><p>常⽤选项：</p><ul><li><code>-a</code> 显示所有的⽂件夹和⽂件，包括隐藏⽂件</li><li><code>-l</code> 以详细的形式显示</li><li><code>-i</code> 加 i 显示inode值</li></ul></li><li><p>文件的大小会显示单位，可读性比较好</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -ah</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">h : human readable（人类可读的）</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>cd</strong> : 进⼊⼀个路径或者⽬录，绝对路径或者相对路径都可以</p><ul><li><code>cd [路径]</code>：⽐如 cd ~(代表进⼊家⽬录)</li><li><code>cd . </code>：进入当前⽬录</li><li><code>cd ..</code>：进⼊上⼀级⽬录</li><li><code>cd /home</code>：进⼊根目录下的home⽬录</li><li><code>~</code>：代表当前用户的家目录</li><li><code>cd -</code>：到上一次目录</li></ul></li></ol><h3 id="Linux⽂件与⽬录管理相关指令"><a class="headerlink" href="#Linux⽂件与⽬录管理相关指令"></a>Linux⽂件与⽬录管理相关指令</h3><h4 id="目录文件"><a class="headerlink" href="#目录文件"></a>目录文件</h4><ul><li><p><strong>mkdir</strong>:  创建新目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir 目录的相对路径或绝对路径</span><br></pre></td></tr></table></figure></li><li><p><strong>rmdir</strong>:  删除<strong>空</strong>目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir 目标目录的相对路径或绝对路径</span><br></pre></td></tr></table></figure></li><li><p><strong>rm</strong>: 移除⽂件或⽬录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f ：就是 force 的意思，忽略不存在的⽂件，不会出现警告信息；</span><br><span class="line">-i ：互动模式，在删除前会询问使⽤者是否动作</span><br><span class="line">-r ：递归删除啊！最常⽤在⽬录的删除了！这是⾮常危险的选项！！！</span><br></pre></td></tr></table></figure><ul><li><p>危险的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>cp</strong>：复制文件或目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp [-adfilprsu] 来源档(source) ⽬标档(destination)</span><br><span class="line">-a：相当于 -pdr 的意思，⾄于 pdr 请参考下列说明；(常⽤)</span><br><span class="line">-d：若来源档为连结档的属性(link file)，则复制连结档属性⽽⾮⽂件本身</span><br><span class="line">-p：连同⽂件的属性⼀起复制过去，⽽⾮使⽤默认属性(备份常⽤)</span><br><span class="line">-r：递归持续复制，⽤於⽬录的复制⾏为；(常⽤)</span><br></pre></td></tr></table></figure></li><li><p><strong>mv</strong>：移动⽂件与⽬录，或修改⽂件与⽬录的名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mv [-fiu] source destination</span><br><span class="line">-f ：force 强制的意思，如果⽬标⽂件已经存在，不会询问⽽直接覆盖；</span><br><span class="line">-i ：若⽬标⽂件 (destination) 已经存在时，就会询问是否覆盖！</span><br><span class="line">-u ：若⽬标⽂件已经存在，且 source ⽐较新，才会覆盖 (update)</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line">mv file1 dir1 # 移动</span><br><span class="line">mv file1 file2 # 改名</span><br></pre></td></tr></table></figure><p>我们可以使⽤ <code>man [命令]</code> 来查看各个命令的使⽤⽂档，如 ：<code>man cp</code>。</p></li><li><p><strong>tree</strong>：查看文件的树状结构</p><ul><li><p>查看文件的大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -h</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="普通文件"><a class="headerlink" href="#普通文件"></a>普通文件</h4><ul><li><p><strong>touch</strong>：创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch 目标文件的相对路径或绝对路径</span><br></pre></td></tr></table></figure></li><li><p>查看文件内容</p><ol><li><p><strong>cat</strong>命令： 以只读的⽅式打开⼀个⽂件。可以加 -n 表示带上⾏号(适合查看⽂件内容⽐较少的)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">命令： cat [选项] [文件]</span><br><span class="line">功能： 查看目标文件的内容</span><br><span class="line"></span><br><span class="line">-b 对非空输出行编号</span><br><span class="line">-E 在每行结束处显示$</span><br><span class="line">-n 对输出的所有行编号</span><br><span class="line">-s 不输出多行空行</span><br></pre></td></tr></table></figure></li><li><p><strong>more</strong>命令：和cat功能类似，不过是以分⻚的形式⼀⻚⼀⻚显示数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat [选项]  目标文件</span><br><span class="line">选项:</span><br><span class="line">    +n: 从笫n⾏开始显示</span><br><span class="line">    -c: 从顶部清屏，然后显示</span><br><span class="line">分页查看命令:</span><br><span class="line">空格: 向后翻一页</span><br><span class="line">   b: 键就会往回（back）⼀⻚显示</span><br></pre></td></tr></table></figure></li><li><p><strong>less</strong>：也⽤来分⻚显示数据，但是功能⽐more强⼤。并不会⼀次性将全部⽂件读取才显示，⽽是根据显示的需要加载对应的数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">less [选项] 目标文件</span><br><span class="line">选项:</span><br><span class="line">    -f ：强迫打开特殊⽂件，例如外围设备代号、⽬录和⼆进制⽂件</span><br><span class="line">    -m ：显示类似more命令的百分⽐</span><br><span class="line">    -N ：显示每⾏的⾏号</span><br><span class="line">分页查看命令:</span><br><span class="line">    f 向后翻⼀⻚</span><br><span class="line">    d 向后翻半⻚</span><br><span class="line">    h 显示帮助界⾯</span><br><span class="line">    q 退出less 命令</span><br><span class="line">    u 向前滚动半⻚</span><br><span class="line">    y 向前滚动⼀⾏</span><br></pre></td></tr></table></figure></li><li><p><strong>head</strong>：查看⼀个⽂件，取开头的⼀部分内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -n 目标文件，表示查看目标文件的前n行内容，比如 head -5 a.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>tail</strong>：查看⼀个⽂件的尾部内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tail -n 目标文件，查看⽂件的最后n行内容，比如 tail -5 a.txt</span><br><span class="line">tail -f filename,尾部持续不断地输出内容。Control + c退出</span><br><span class="line">例如：tail -5f filename</span><br></pre></td></tr></table></figure></li></ol></li><li><p>重定向和追加</p><ol><li><p><strong>echo</strong>: 输出内容到控制台。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH 输出Linux的环境变量到控制台</span><br></pre></td></tr></table></figure></li><li><p><strong>&gt; 命令</strong>：输出重定向（会将原来的内容覆盖）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo hello &gt; a.txt 将字符串hello, 写入a.txt文件</span><br><span class="line">ls -l &gt; a.txt 将目录信息，写入a.txt文件</span><br><span class="line">cat a.txt &gt; b.txt(⽂件可以存在，可以不存在) 将a.txt文件内容写入b.txt文件中</span><br></pre></td></tr></table></figure></li><li><p><strong>&gt;&gt; 命令</strong>：追加（不会覆盖原⽂件的内容，追加到底部）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo hello &gt;&gt; a.txt 将字符串hello, 追加 写入到a.txt文件</span><br><span class="line">ls -l &gt;&gt; a.txt  将目录信息，追加 写入a.txt文件</span><br><span class="line">cat a.txt &gt;&gt; b.txt(⽂件可以存在，可以不存在) 将a.txt文件内容写入b.txt文件中</span><br></pre></td></tr></table></figure></li></ol></li><li><p>压缩与解压缩</p><ul><li><p><code>tar</code> 是⽤来建⽴，还原备份⽂件的⼯具程序，它可以加⼊，解开备份⽂件内的⽂件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">tar</span><br><span class="line">-c:产⽣.tar⽂件</span><br><span class="line">-v:显示详细信息</span><br><span class="line">-z:打包同时压缩</span><br><span class="line">-f:指定压缩后的⽂件名</span><br><span class="line">-x:解压.tar⽂件</span><br><span class="line"></span><br><span class="line">压缩: tar -zcvf combine.tar.gz 1.txt</span><br><span class="line">解压: tar -zxvf combine.tar.gz -C java/</span><br><span class="line"></span><br><span class="line">-C 表示解压到指定⽬录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果需要解压和压缩为 `.zip` 格式的⽂件，那么需要安装zip和unzip命令</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把所有文件打包并压缩到test.tar.gz下</span></span><br><span class="line">tar -zcvf test.tar.gz *</span><br><span class="line">tar -zxvf test.tar.gz -C xxx/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.tar.gz 一般表示打包并压缩</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="文本编辑"><a class="headerlink" href="#文本编辑"></a>文本编辑</h4><p>Ubuntu默认没有安装vim，需要先安装vim⼯具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vim</span><br></pre></td></tr></table></figure><p>更改vim配置：</p><ul><li><p>在家目录下创建一个vimrc文件，并写入以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set nu                                                                                    set cursorline</span><br><span class="line">set hlsearch</span><br><span class="line">set tabstop=4</span><br></pre></td></tr></table></figure></li><li><p>然后执行下面的命令生效配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp vimrc .vimrc</span><br></pre></td></tr></table></figure><p><img src="/images/Linux/image-20240525102733517.png" alt="效果图" loading="lazy"></p></li></ul><p>vim有三种模式：命令模式（Command mode）、插⼊模式（Insert mode）、末⾏模式（Last Linemode）。</p><ul><li><p>命令模式</p><blockquote><p>通过指令  <code>vim filename</code> 进⼊命令模式。除此之外，还有⼀些其他的参数，⽐如：<br><code>-R</code>：把指定的⽂件以只读的⽅式放⼊vim编辑器中<br><code>+</code>：打开⽂件，并把光标置于最后⼀⾏的⾸部<br><code>+n</code>：打开⽂件，并把光标置于第n⾏的⾸部</p><p>命令模式快捷键：</p><ul><li><p>删除：<br><code>x</code>：删除光标处的字符<br><code>dd</code>：删除光标所在的整行</p><p>​eg：3dd  删除光标所在行以及下面的两行（删除 3 行）</p><p>​    <code>ndd</code>：删除当前⾏后n⾏⽂本（包括此⾏）<br>​    <code>dG</code>：删除光标所在⾏⼀直到⽂件末尾的所有内容<br>​    <code>D</code>：删除光标位置到⾏尾的所有内容</p><p>​<code>yy</code>：复制光标所在的整行</p><p>​eg：3yy  yy从光标开始往下复制 3 行</p><p>​ <code>p</code>：将复制后的文本粘贴到光标处</p><p>​剪切的效果：先 dd 再去 p</p><p>​ <code>u</code>：撤销上次操作</p></li><li><p>光标移动:<br><code>w</code>: 光标移动⾄下⼀个单词⾸<br><code>e</code>: 光标移动⾄下⼀个单词尾<br><code>b</code>: 光标移动⾄上⼀个单词⾸<br><code>gg</code>: 光标移动到⽂件开头<br><code>G</code>: 光标移动⾄⽂件末尾<br><code>nG</code>: 光标移动到第n⾏，n为数字<br><code>0</code>或<code>^</code>:光标移动⾄当前⾏的⾏⾸<br><code>$</code>: 光标移动⾄当前⾏的⾏尾</p><p>​eg：<code>:50</code> 到达文件的第 50 行</p></li><li><p>查找与替换</p><p>​<code>/[str] </code>：查找字符串 str，[str]表示要查找的字符串</p><p>​</p><p>​<code>:s/[src]/[dst]</code>：部分替换 (只能替换光标之所在的行)，将本行出现的字符串 src 替换为 dst</p><p>​<code>/i</code>：忽略大小写</p><p>​<code>/g</code>：全部匹配</p><p>​eg：:s/hello/world/ig  替换一行</p><p>​</p><p>​<code>:%s/[src]/[dst]/g</code>：全部替换，将文档中所有 src 的字符串替换为 dst 字符串</p><p><code>Ctrl +v</code> 竖向选择模式，主要用于批量注释代码，输入步骤如下：</p><p>​1、首先按 <code>ctrl+v</code>，竖选选中要注释的行</p><p>​2、输入 <code>I</code>（注意是大写的 I），然后输入<code>//</code></p><p>​3、再输入 <code>esc</code>，就会看到选中的行被注释了</p><p>在命令模式下输入<code>:new 2.c </code>，表示再打开一个 vim，是横向的</p><p>用 <code>vnew 2.c</code> 表示纵向的</p><p><code>sed</code>：管道查找替换程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;s/aa/bb/&#x27; a.txt &gt; b.txt </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 a.txt 中的 aa 替换成 bb 并重，定向输出到 b.txt 中。</span></span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>插入模式</p><blockquote><p>在命令模式下，通过按下i、I、a、A、o、O这6个字⺟进⼊插⼊模式，不同的字⺟代表不同的进⼊⽅式。</p><p>​<code>i</code>:  在当前光标位置前⾯插⼊随后输⼊的⽂本，光标后的⽂本相应向右移动<br>​<code>I</code>:  在光标所在⾏的⾏首插⼊随后输⼊的⽂本<br>​<code>o</code>:  在光标所在⾏下⾯插⼊新的⼀⾏，然后光标停在空⾏⾸，等待输⼊⽂本<br>​<code>O</code>:  在光标所在⾏上⾯插⼊新的⼀⾏，然后光标停在空⾏⾸，等待输⼊⽂本<br>​<code>a</code>:  在当前光标位置后⾯插⼊随后输⼊的⽂本，光标后的⽂本相应向右移动<br>​<code>A</code>:  在光标所在⾏的⾏尾插⼊随后输⼊的⽂本</p></blockquote><p>按下ESC键离开插⼊模式，进⼊命令模式</p></li><li><p>末行模式</p><blockquote><p>在命令模式下，按下: 键进⼊末⾏模式。<br>在该模式下，可以使⽤⼀系列的指令，完成保存、离开vim编辑器等功能。</p><p><code>:wq</code>：保存并退出vim编辑器<br><code>:wq!</code>：保存并强制退出vim编辑器<br><code>:q</code>：不保存退出<br><code>:q!</code>：不保存强制退出<br><code>:w</code>：保存不退出<br><code>:w!</code>：强制保存不退出<br><code>:w filename</code>：另存到filename⽂件<br><code>ZZ</code>：直接退出</p><p><code>:%!xxd</code>：十六进制模式</p><p><code>:%!xxd -r</code>：返回文本模式，中间有一个空格的</p></blockquote></li></ul><p>三种模式之间的关系：</p><p><img src="/images/Linux/47ca4ab5c1984484802cfebe534193fc.png" alt loading="lazy"></p><hr><h3 id="用户管理"><a class="headerlink" href="#用户管理"></a>用户管理</h3><p>Linux系统是⼀个多⽤户、多任务的操作系统。多⽤户是指在linux操作系统中可以创建多个⽤户，⽽这些多⽤户⼜可以同时执⾏各⾃不同的任务，⽽互不影响</p><p>在Linux系统中，会存在着以下⼏个概念:</p><ul><li>用户名: 每个用户在操作系统中，都具有唯一用户名</li><li>⽤户所属的组：多个用户可以属于同一个用户组。</li><li>⽤户的家⽬录：在/home目录下，与该用户的用户名一致的目录。</li></ul><h4 id="添加用户"><a class="headerlink" href="#添加用户"></a>添加用户</h4><ul><li><p><strong>sudo useradd [选项] ⽤户名</strong></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd test</span><br><span class="line">注意这种⽅式创建出来的没有家⽬录，我们创建的时候需要带参数</span><br><span class="line">sudo useradd -m test: -m 表示在 /home⽬录下创建⼀个家⽬录</span><br><span class="line">sudo useradd -m -s /bin/bash test: 表示指定shell版本是我们熟悉的bash</span><br></pre></td></tr></table></figure></li><li><p>设置用户密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd [⽤户名]</span><br></pre></td></tr></table></figure></li><li><p>切换用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su [⽤户名]</span><br></pre></td></tr></table></figure></li></ul><h4 id="删除用户"><a class="headerlink" href="#删除用户"></a>删除用户</h4><ul><li><p><strong>sudo userdel [⽤户名]</strong></p><ul><li><code>-r</code>: 不仅会删除该⽤户，还会删除该⽤户对应的家⽬录</li></ul></li></ul><h4 id="用户组管理"><a class="headerlink" href="#用户组管理"></a>用户组管理</h4><ul><li>添加组  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  groupadd [groupname]</span><br><span class="line">  </span><br><span class="line">  创建⽤户的时候加⼊组： useradd -m -s /bin/bash -g [groupname] [username]</span><br><span class="line"></span><br><span class="line">- 查看⽤户及组信息</span><br><span class="line">```shell</span><br><span class="line">  id ⽤户名</span><br></pre></td></tr></table></figure></li><li>修改用户所属组  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g [groupname] [username]</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="文件权限管理"><a class="headerlink" href="#文件权限管理"></a>文件权限管理</h3><h4 id="权限及命令"><a class="headerlink" href="#权限及命令"></a>权限及命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br><span class="line">total 40</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">⽂件信息 ⽂件数 ⽤户      组名   ⼤⼩  ⽉份 ⽇期 时间 ⽂件名</span></span><br><span class="line">drwxr-xr-x 2   xxxxxxxx xxxxxxxx 4096  Aug  2  23:52 coo1heisenberg</span><br><span class="line">prw-r--r-- 1   xxxxxxxx xxxxxxxx 0     Aug  2  23:43 fifo_file</span><br><span class="line">-rw-r--r-- 1   xxxxxxxx xxxxxxxx 26825 Aug  3  00:25 main.txt</span><br><span class="line">-rw-r--r-- 1   xxxxxxxx xxxxxxxx 33    Aug  3  00:37 test.txt</span><br><span class="line">drwxr-xr-x 3   xxxxxxxx xxxxxxxx 4096  Aug  3  01:27 xxx</span><br></pre></td></tr></table></figure><p>前10位字符的说明：</p><ul><li>第1位：<code>-</code>表示是⼀个普通的⽂件；<code>d</code>表示是⼀个⽬录；</li><li><code>rwx</code>：分别代表Read、Write、Execute即读、写、执⾏权限，这个顺序不会变，如果没有权限的话就⽤-代替</li><li>第2-4位：表示⽂件所有者的对于文件所具有的权限</li><li>第5-7位：表示和文件所有者同组的其他用户对文件所具有的权限</li><li>第8-10位：⽂件其他组⽤户拥有的权限</li></ul><p>我们可以使用chmod命令，手动修改文件权限</p><ul><li><p>第一种方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod u=rwx,g=rw,o=r filename</span><br><span class="line">u:所有者 g:所有组 o:其他组,a代表全部，没有就用空格替代</span><br></pre></td></tr></table></figure></li><li><p>第二种方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r=4,w=2,x=1 rwx = 4 + 2 + 1 = 7</span><br><span class="line">chmod 751 等价于 u=rwx,g=rx,o=x</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="进程管理"><a class="headerlink" href="#进程管理"></a>进程管理</h3><h4 id="查看进程"><a class="headerlink" href="#查看进程"></a>查看进程</h4><ul><li>Linux系统中查看进程使⽤情况的命令是<code>ps</code>命令，但是<code>ps</code>命令一般都不会单独使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常⻅选项：</span><br><span class="line">-e：显示所有进程</span><br><span class="line">-f：全格式</span><br><span class="line">a:显示终端上的所有进程</span><br><span class="line">u:以⽤户的格式来显示进程信息</span><br><span class="line">x:显示后台运⾏的进程</span><br></pre></td></tr></table></figure><p>⼀般常⽤格式为<code>ps -ef</code>或者<code>ps aux</code>两种。显示的信息⼤体⼀致，略有区别</p><p>eg：</p><p><img src="/images/Linux/848bacfb75334a288c6f54ccaef816d9.png" alt="在这里插入图片描述" loading="lazy"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UID：⽤户ID</span><br><span class="line">PID：进程ID</span><br><span class="line">PPID：⽗进程ID</span><br><span class="line">C：CPU⽤于计算执⾏优先级的因⼦。数值越⼤，表明进程是CPU密集型运算，执⾏优先级会降低；数值越</span><br><span class="line">   ⼩，表明进程是I/O密集型运算，执⾏优先级会提⾼</span><br><span class="line">STIME：进程启动的时间</span><br><span class="line">TTY：完整的终端名称</span><br><span class="line">TIME：CPU时间</span><br><span class="line">CMD：完整的启动进程所⽤的命令和参数</span><br></pre></td></tr></table></figure><p><img src="/images/Linux/fd26e13f0dcb49eeb84637c9cb50e973.png" alt="在这里插入图片描述" loading="lazy"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">USER：⽤户名称</span><br><span class="line">PID：程号</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">CPU：进程占⽤CPU的百分⽐</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">MEM：进程占⽤物理内存的百分⽐</span></span><br><span class="line">VSZ：进程占⽤的虚拟内存⼤⼩（单位：KB）</span><br><span class="line">RSS：进程占⽤的物理内存⼤⼩（单位：KB）</span><br><span class="line">TT：终端名称（缩写），若为？，则代表此进程与终端⽆关，因为它们是由系统启动的</span><br><span class="line">STAT：进程状态，其中S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有⽐普通优先级更低的</span><br><span class="line">优先级，R-正在运⾏，D-短期等待，Z-僵死进程，T-被跟踪或者被停⽌等</span><br><span class="line">STARTED：进程的启动时间</span><br><span class="line">TIME：CPU时间，即进程使⽤CPU的总时间</span><br><span class="line">COMMAND：启动进程所⽤的命令和参数，如果过⻓会被截断显示</span><br></pre></td></tr></table></figure><p><strong>ps -ef 与 ps -aux的区别</strong>：</p><ul><li>如果想查看<strong>进程的⽗进程ID和完整的CMD命令</strong>，可以使⽤<code>ef</code></li><li>如果想查看<strong>进程的CPU占⽤率和内存占⽤率</strong>，可以使⽤<code>aux</code></li></ul><p>进一步筛选想要查询的目标进程信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">搜索匹配进程</span></span><br><span class="line">ps -ef | grep [搜索内容]</span><br></pre></td></tr></table></figure><h4 id="终止进程"><a class="headerlink" href="#终止进程"></a>终止进程</h4><ul><li><strong>kill [选项] 进程号</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选项：</span><br><span class="line">-9：操作系统从内核级别强制杀死⼀个进程</span><br><span class="line">-15：可以理解为操作系统发送⼀个通知告诉应⽤主动关闭</span><br></pre></td></tr></table></figure><hr><h4 id="服务管理"><a class="headerlink" href="#服务管理"></a>服务管理</h4><ul><li><p>服务本质上来说也是⼀个进程，只不过是在后台运⾏。监听着某⼀端⼝，等待该端⼝的请求到来，⽐如ssh服务监听着22端⼝，mysql服务监听着3306端⼝；</p></li><li><p><strong>systemctl start/stop/restart/status/reload 服务名称</strong></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">⽐如关闭ssh服务</span></span><br><span class="line">systemctl stop sshd</span><br></pre></td></tr></table></figure></li></ul><h3 id="网络管理"><a class="headerlink" href="#网络管理"></a>网络管理</h3><h4 id="查看网络设置"><a class="headerlink" href="#查看网络设置"></a>查看网络设置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><h4 id="查看⽹络端⼝占⽤"><a class="headerlink" href="#查看⽹络端⼝占⽤"></a>查看⽹络端⼝占⽤</h4><ul><li><strong>netstat</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-a:显示全部</span><br><span class="line">-n:以数字的形式显示</span><br><span class="line">-p:显示该连接被哪个应⽤程序占⽤PID</span><br><span class="line">eg:</span><br><span class="line">netstat -anp | grep 3306</span><br></pre></td></tr></table></figure><ul><li><strong>lsof -i: 端⼝号</strong></li></ul><h4 id="测试网络是否正常"><a class="headerlink" href="#测试网络是否正常"></a>测试网络是否正常</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping [⽬的ip或者域名]</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05 SpringCloud（转载自之前的CSDN）</title>
      <link href="/2024/05/13/Spring-Cloud/"/>
      <url>/2024/05/13/Spring-Cloud/</url>
      
        <content type="html"><![CDATA[<h1>单体架构与微服务架构的介绍</h1><hr><h2 id="单体架构"><a class="headerlink" href="#单体架构"></a>单体架构</h2><ul><li><strong>单体架构</strong><ul><li>所有的代码最终打包成一个文件(<code>jar</code>包)，整个系统的所有功能单元整体部署到同一个进程<br><img src="/images/Spring-Cloud/00e8f93d8b1a4ae7bb1dbb82158ef41b.png" alt="在这里插入图片描述" loading="lazy"></li></ul></li><li><strong>单体架构的扩容</strong><ul><li>一个单体应用在运行时，会部署在一台云服务器上，但是随着用户体量的增长，一台云服务器上运行的一个单体应用，已经无法承载日益增长的请求量。</li><li>我们可以对单体应用实现扩容，即使用单体应用集群，通过使用单体应用的集群，可以一定程度上，很好的应对日益增长的用户请求。但这个方案不是很完美<br><img src="/images/Spring-Cloud/cfd6d42e6b3e4217b0f2b332d6e97d07.png" alt="在这里插入图片描述" loading="lazy"></li></ul></li><li><strong>单体架构的优势</strong><ul><li>应用的开发很简单</li><li>易于对应用程序进行大规模的更改</li><li>测试相对直观简单</li><li>部署简单明了</li><li>横向扩容不费吹灰之力</li></ul></li><li><strong>单体架构的弊端</strong><ul><li><strong>代码过度复杂且严重耦合，导致难以维护</strong><ol><li>由于系统本身过于庞大和复杂，以至于任何一个开发者都很难理解它的全部，因此，修复软件中的问题和正确实现新功能就变得困难且耗时</li><li>更糟糕的是，这种极度的复杂性，可能会形成一个恶性循环: 由于代码难以理解，因此开发者在更改时更容易出错，每一次更改都会让代码库变得更复杂，更难懂</li></ol></li><li><strong>从代码提交到实际部署的周期很长</strong><ol><li>众多开发人员都向同一个代码库提交代码，常常使得代码库的构建结构处于无法交付的状态。当采用了分支来解决这个问题，又必须忍受漫长且痛苦的合并过程</li><li>因为代码库中的代码十分复杂，以至于任何一个更改可能引起的影响是未知的，为了避免牵一发而动全身的后果，即使是一个微小的更改，也必须执行全部的测试</li></ol></li><li><strong>扩展性受限</strong><ol><li>如果单体应用中的某一个功能点存在性能问题，那么就需要多部署几个单体应用的实例，再加上负载均衡的设备(比如nginx)，才能保证整个应用的性能能够支撑用户的使用（资源浪费）</li><li>在某些情况下，应用的不同模块对资源的需求是相互冲突的，比如某些模块需要高效的IO，某些模块需要高性能的CPU, 而这些模块都在一个单体应用之内，因此其所部署的服务器必须满足所有的需求（成本过高）</li></ol></li><li><strong>开发慢，启动慢，严重影响开发效率</strong></li><li><strong>交付可靠的单体应用困难</strong><ol><li>单体应用体积庞大，难以进行全面和彻底的测试，而缺乏可靠的测试意味着代码中的错误会进入生产环境</li><li>缺乏故障隔离，因为所有的模块都在同一个进程中运行，每隔一段时间，在一个模块中的代码错误，将会导致整个应用程序的崩溃</li></ol></li></ul></li></ul><hr><h2 id="微服务架构"><a class="headerlink" href="#微服务架构"></a>微服务架构</h2><ul><li><strong>微服务架构</strong><ul><li>本质就是<strong>按照单一职责原则实现了特定的一组功能</strong></li><li>因为每个微服务的本质都可以是一个应用程序，这就要求，微服务可以独立部署，独立运行，独立对外提供服务(运行在一个独立的进程中)</li><li>微服务架构是模块化开发的一种形式<ul><li>在单体架构中，模块通常由一组编程语言所提供的的结构(例如Java中的包，或者jar文件)来定义，但是通过这种方式得到的模块，不同模块的代码还是可以相互引用，导致模块中对象依赖关系的混乱</li><li>在微服务架构中，使用微服务作为模块化的单元，要访问服务，只能通过服务对外提供的API，于是服务的API为它自身构筑了一个不可逾越的边界，你无法越过API去访问服务内部的类。<br><img src="/images/Spring-Cloud/256ce854206d4a5ea8b6f520bf3bf027.png" alt="在这里插入图片描述" loading="lazy"></li></ul></li></ul></li><li><strong>微服务架构的优势</strong><ul><li><strong>每个服务都相对较小，容易维护</strong></li><li><strong>使得大型的应用程序实现快速的持续交付和持续部署</strong><ol><li>每一个服务相对较小，编写全面的测试代码和执行自动化测试都变得相对容易</li><li>每个服务都独立于其他服务部署，如果负责服务的开发人员，需要部署对该服务的更改，不需要与其他开发人员协商，因此将更改频繁部署到生产中要容易的多</li></ol></li><li><strong>应用扩展灵活</strong><ol><li>应用被拆分为不同的微服务，而微服务可以独立部署，因此，扩容就不在针对整个应用了，哪里出现性能瓶颈，对哪个服务扩容即可</li><li>即使不同的的服务需要资源存在冲突，也没有关系，把它们分别部署到具有拥有各自所需要资源的机器上即可</li></ol></li><li><strong>更好的容错</strong><ol><li>相比于单体架构中，一个故障拖垮整个系统的情况，一个服务的故障，并不会影响想到其他服务的正常运行</li></ol></li></ul></li><li><strong>微服务架构的弊端</strong><ul><li>分布式系统可能复杂难以管理</li><li>分布式部署追踪问题难<ul><li>目前主流的解决方案<ol><li>把所有服务的日志收集到同一个文件中（ELK）</li><li>给每一个调用生成一个唯一的ID标识，如果出现调用失败，输出这个ID标识（鹰眼系统）</li></ol></li></ul></li><li>分布式事务比较难处理</li><li>服务数量增加，管理复杂性增加</li></ul></li><li><strong>微服务的拆分</strong><br><img src="/images/Spring-Cloud/f16f39916fe74d02a268ca420d26c4f0.png" alt="在这里插入图片描述" loading="lazy"></li></ul><hr><h1>微服务的实现</h1><p><img src="/images/Spring-Cloud/46f51446182e450ba97cf22d16299c76.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li><strong>CDN网络</strong><ul><li>Content Delivery Network（内容分发网络），主要是为了提高静态资源的访问速度</li></ul></li><li>SpringCloud 基于SpringBoot提供了一套微服务架构实现的解决方案，包括服务的注册与自动发现，面向接口的服务调用，服务调用的负载均衡，服务网关，服务熔断等等组件，它利用SpringBoot开发的便利性，巧妙的简化了分布式系统的基础设施搭建，使开发者可以基于SpringBoot的开发风格做到快速启动和部署。</li></ul><hr><h2 id="服务之间的调用"><a class="headerlink" href="#服务之间的调用"></a>服务之间的调用</h2><ul><li><strong>服务调用之间的理论</strong><ul><li>基于SpringCloud实现的微服务，其本质是Tomcat中的一个应用，它们都支持基于Http协议的通信，因此我们可以<strong>通过Http协议实现服务进程(实例)间的通信</strong></li><li>于是服务间的通信过程就变成了，调用者发送Http请求，被调用这返回Http响应，一次请求响应过程，就等价于一次服务调用过程</li><li>在一次服务调用过程中，我们称调用者为服务消费者(使用或者消费另一个服务的功能)，我们称被调用者为服务提供者(提供被消费的功能)，服务消费者和服务提供者的概念仅仅是在单次调用中的概念，一个服务既可以是服务消费者，也可以是服务提供者</li><li>因此，<strong>服务提供者只要对外暴露了接口，那么服务消费者就能通过调用服务提供者对外提供的接口，从而实现对服务提供者的调用，使用服务提供者的功能</strong></li></ul></li><li><strong>实现服务调用的准备</strong><ul><li>通过代码发送Http请求——使用<code>RestTemplate</code><ul><li><code>RestTemplate</code>是一个专门用来发送Http请求的工具，通过封装JDK中的<code>HttpURLConnection</code>类库，提供简单易用的模板方法API，它所提供的模板方法几乎覆盖了常用的所有Http请求类型的场景</li></ul></li></ul></li><li>导入SpringCloud的配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-boot --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring cloud alibaba--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring cloud--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>eg：</p><p>服务提供者实现</p><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8090</span><br></pre></td></tr></table></figure><ul><li>代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseProviderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/base/provider/demo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">baseDemo</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="string">&quot;base-provider-demo&quot;</span> + name;</span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务提供者实现</p><ul><li>依赖同上</li><li>配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8091</span><br></pre></td></tr></table></figure><ul><li>代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseConsumerController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/base/consumer/demo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">baseDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 调用provider对外暴露的接口</span></span><br><span class="line">        <span class="comment">// 通过发起Http请求</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 请求的地址</span></span><br><span class="line">        <span class="comment">// http://localhost:8090/base/provider/demo?name=xxx</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 通过RestTemplate发起Http请求</span></span><br><span class="line">        <span class="comment">// RestTemplate restTemplate = new RestTemplate();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 请求的参数自己定义</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建RestTemplate的对象</span></span><br><span class="line">        <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 传可变长度的参数</span></span><br><span class="line">        <span class="comment">// 使用1，2，3，4来占位，表示是第几个参数</span></span><br><span class="line">        <span class="comment">// String resp = getVariblesParams(restTemplate);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 使用hashMap</span></span><br><span class="line">        <span class="comment">// 使用HashMap中的Key来占位</span></span><br><span class="line">        <span class="comment">// String resp = getHashMapParams(restTemplate);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 使用getForEntity</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> getForEntityUseHashMap(restTemplate);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getForEntityUseHashMap</span><span class="params">(RestTemplate restTemplate)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8090/base/provider/demo?name=&#123;name&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Class&lt;String&gt; respType = String.class;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ww&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(url, respType, hashMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应码 200 500 404 302 304</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">codeValue</span> <span class="operator">=</span> responseEntity.getStatusCodeValue();</span><br><span class="line">        System.out.println(<span class="string">&quot;codeValue = &quot;</span> + codeValue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应对象</span></span><br><span class="line">        <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> responseEntity.getStatusCode();</span><br><span class="line">        System.out.println(<span class="string">&quot;statusCode = &quot;</span> + statusCode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应体</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> responseEntity.getBody();</span><br><span class="line">        System.out.println(<span class="string">&quot;response = &quot;</span> + response);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getHashMapParams</span><span class="params">(RestTemplate restTemplate)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8090/base/provider/demo?name=&#123;name&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">respType</span> <span class="operator">=</span> String.class;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zs&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">resp</span> <span class="operator">=</span> (String) restTemplate.getForObject(url, respType, hashMap);</span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getVariblesParams</span><span class="params">(RestTemplate restTemplate)</span> &#123;</span><br><span class="line">        <span class="comment">// &#123;1&#125;是用来占位的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8090/base/provider/demo?name=&#123;1&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">responseType</span> <span class="operator">=</span> String.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resp</span> <span class="operator">=</span> (String) restTemplate.getForObject(url, responseType, <span class="string">&quot;ls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="服务注册中心"><a class="headerlink" href="#服务注册中心"></a>服务注册中心</h2><ul><li>服务注册中心，由服务注册中心来统一管理服务的状态和信息<br><img src="/images/Spring-Cloud/f0b9b8d8b9514988b855d6d9802e492b.png" alt="在这里插入图片描述" loading="lazy"></li></ul><h3 id="Eureka-注册中心"><a class="headerlink" href="#Eureka-注册中心"></a>Eureka 注册中心</h3><ul><li>Eureka是SpringCloud Netflix中包含的注册中心的组件，它扮演注册中心的角色，实现服务的注册与自动发现</li><li>Eureka采用了C-S的架构设计<ul><li>EurekaServer作为服务器端，它具体就实现了服务注册中心的功能</li><li>EurekaClient作为客户端，服务提供者可通过它实现和EurekaServer的通信完成服务的注册，服务消费者可通过它与EurekaServer通信完成服务的自动发现<br><img src="/images/Spring-Cloud/73d05f9cb06c49a5ba3e8d5c27e094d1.png" alt="在这里插入图片描述" loading="lazy"></li></ul></li></ul><p>eg：</p><p><strong>配置并启动EurekaServer</strong></p><ol><li>新建一个子Maven工程，这个工程仅仅只是为了启动一个EurekaServer进程<br><img src="/images/Spring-Cloud/179af1503fb649b29b1e48e6d12db743.png" alt="在这里插入图片描述" loading="lazy"></li><li>在子工程中添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在子工程的resources目录下添加配置信息</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="comment"># Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># Eureka服务端的实例名字</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># fetch-registry如果为false,则表示自己为注册中心,客户端的化为 ture</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br></pre></td></tr></table></figure><ol start="4"><li>配置启动类，并在启动类上添加注解<code>@EnableEurekaServer</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 开启Eureka的注册中心</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务提供者整合Eureka</strong></p><ol><li>在服务提供者的Maven工程中，添加如下依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- springboot --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- eureka-client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在子工程的resources目录下添加配置信息</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">registry-provider</span>  <span class="comment"># 服务集群的名字</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7101</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span>  <span class="comment"># 注册中心的地址</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">eureka-provider-7101</span>  <span class="comment"># 服务实例的名字</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置启动类，并在主启动类添加注解<code>@EnableEurekaClient</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaProviderApplication1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaProviderApplication1.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>controller的实现代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaDemoController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/eureka/provider/demo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">eurekaDemo</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eureka-provider1 调用到了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务消费者整合Eureka</strong></p><ol><li>添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在resources文件目录下添加配置</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">registry-consumer</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7102</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">eureka-consumer-7102</span> <span class="comment">#修改Eureka上的默认描述信息</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br></pre></td></tr></table></figure><ol start="3"><li>主启动类，添加注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaConsumerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>controller目录下添加代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaConsumerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/eureka/consumer/demo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">consumerDemo</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发起Http请求，调用服务提供者</span></span><br><span class="line">        <span class="comment">// 需要注意的事情：不要把服务提供者的地址写死，引入注册中心的目的就是不写死地址</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建一个RestTemplate对象</span></span><br><span class="line">        <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 从注册中心获取服务提供者的地址</span></span><br><span class="line">        <span class="comment">// 写集群的名字</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instanceList = discoveryClient.getInstances(<span class="string">&quot;registry-provider&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance serviceInstance : instanceList) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> serviceInstance.getUri().toString();</span><br><span class="line">            System.out.println(<span class="string">&quot;uri = &quot;</span> + uri);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">instanceId</span> <span class="operator">=</span> serviceInstance.getInstanceId();</span><br><span class="line">            System.out.println(<span class="string">&quot;instanceId = &quot;</span> + instanceId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 发起调用</span></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> instanceList.get(<span class="number">0</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> serviceInstance.getUri().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> uri + <span class="string">&quot;/eureka/provider/demo?name=&#123;1&#125;&quot;</span>;</span><br><span class="line">        Class&lt;String&gt; respType = String.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">resp</span> <span class="operator">=</span> restTemplate.getForObject(url, respType, <span class="string">&quot;ls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Eureka的自我保护机制"><a class="headerlink" href="#Eureka的自我保护机制"></a>Eureka的自我保护机制</h3><p>自我保护机制触发的场景如下:</p><ul><li>默认情况下，当eureka server在一定时间内没有收到实例的心跳，便会把该实例从注册表中删除（<strong>默认是90秒</strong>）</li><li>但是，如果短时间内丢失大量的实例心跳，这意味着短时间内大量的服务连接丢失了，此时就会触发Eureka的自我保护机制</li><li>触发自我保护机制的结果就是，Eureka认为虽然收不到实例的心跳，但它认为实例还是健康的，eureka会保护这些实例，不会把它们从注册表中删掉。</li></ul><p><strong>Eureka的自我保护机制的意义</strong>：</p><ul><li>该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的</li><li>此时，为了避免注册中心同时删除大量本来是正常运行(健康的)的服务实例，于是就会自动触发自我保护机制</li><li>该自我保护机制开启之后，Eureka会保护注册表中的信息，不在注销任何微服务，当网络故障恢复后，Eureka会自动退出保护模式，从而使集群更加健壮。</li></ul><p>在开发测试阶段应当把Eureka的自我保护机制禁用掉：</p><ul><li>原因：在开发测试阶段，需要频繁地重启发布，如果触发了保护机制，则旧的服务实例没有被删除，这时服务消费者按照注册表中的服务提供者信息，发出服务调用请求，会因为该实例关闭而失败，这就导致请求错误，影响开发测试</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭Eureka的自我保护机制</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><h3 id="Nacos注册中心"><a class="headerlink" href="#Nacos注册中心"></a>Nacos注册中心</h3><ul><li>Nacos(Dynamic Naming and Configuration Service)是服务中心的另外一种实现。从注册中心的功能实现角度，与Eureka等价，只是实现方式有所差异。</li><li>与Eureka不同的是，Nacos注册中心类似于Tomcat，是独立启动的服务器</li></ul><p>eg：</p><ol><li>启动nacos服务器<br><img src="/images/Spring-Cloud/3f7e6254c6e3417aa91a8cdad7437091.png" alt="在这里插入图片描述" loading="lazy"></li><li>进入bin目录，打开命令行</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">windows: startup.cmd -m standalone</span><br><span class="line">linux: startup.sh -m standalone</span><br></pre></td></tr></table></figure><p><img src="/images/Spring-Cloud/7e8b2a347dca456092b1aec9d10ca86c.png" alt="在这里插入图片描述" loading="lazy"></p><ol start="3"><li>可以通过 <a>localhost:8848/nacos</a> 访问nacos<br><img src="/images/Spring-Cloud/c878af1dddaa462cb9100bb0a4e41226.png" alt="在这里插入图片描述" loading="lazy"></li><li>在nacos-provider-8002模块中导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- nacos注册中心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>在nacos-provider-8002模块中新增配置</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span>  <span class="comment"># 服务提供者的端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-provider</span>  <span class="comment"># 集群的名字 </span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># nacos服务器地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> </span><br></pre></td></tr></table></figure><ol start="6"><li>在nacos-provider-8002模块中添加主启动类，添加注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosProviderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(NacosProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>在nacos-provider-8002模块中的controller目录下添加代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosProviderController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/nacos/provider/demo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">nacosDemo</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;nacos provider&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>nacos-consumer-9001模块的依赖、配置、主启动类同nacos-provider-8002</li><li>nacos-consumer-9001模块controller下的代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosConsumerController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/nacos/consumer/demo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">nacosDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 发起Http请求，调用服务提供者</span></span><br><span class="line">        <span class="comment">// 需要注意的事情：不要把服务提供者的地址写死，引入注册中心的目的就是不写死地址</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建一个RestTemplate对象</span></span><br><span class="line">        <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 从注册中心获取服务提供者的地址</span></span><br><span class="line">        <span class="comment">// 写集群的名字</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instanceList = discoveryClient.getInstances(<span class="string">&quot;nacos-provider&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance serviceInstance : instanceList) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> serviceInstance.getUri().toString();</span><br><span class="line">            System.out.println(<span class="string">&quot;uri = &quot;</span> + uri);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">instanceId</span> <span class="operator">=</span> serviceInstance.getInstanceId();</span><br><span class="line">            System.out.println(<span class="string">&quot;instanceId = &quot;</span> + instanceId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 发起调用</span></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> instanceList.get(<span class="number">0</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> serviceInstance.getUri().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> uri + <span class="string">&quot;/nacos/provider/demo?name=&#123;1&#125;&quot;</span>;</span><br><span class="line">        Class&lt;String&gt; respType = String.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">resp</span> <span class="operator">=</span> restTemplate.getForObject(url, respType, <span class="string">&quot;ls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="服务调用的负载均衡"><a class="headerlink" href="#服务调用的负载均衡"></a>服务调用的负载均衡</h2><ul><li><strong>问题引出</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务发现</span></span><br><span class="line">List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;服务名&quot;</span>);</span><br><span class="line"><span class="comment">// 选择一个服务提供者</span></span><br><span class="line"><span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> instances.get(<span class="number">0</span>).getUri();</span><br><span class="line"><span class="comment">// 向选择的服务提供者发起请求</span></span><br><span class="line">ResponseEntity&lt;String&gt; response = template.getForEntity(uri.toString() + <span class="string">&quot;/nacos/registry/hello?name=&#123;1&#125;&quot;</span>, String.class, name);</span><br></pre></td></tr></table></figure><blockquote><p>服务是可以有集群的，在发现了一个服务所有的实例之后，<strong>在一次服务调用过程中，我们还需要选择其中一个服务实例，发起调用请求</strong>，所以发起调用之前还存在着一个选择过程，这就涉及到了选择的策略问题，该按照何种策略选择出集群中的一个实例呢？</p></blockquote><h3 id="Ribbon负载均衡"><a class="headerlink" href="#Ribbon负载均衡"></a>Ribbon负载均衡</h3><ul><li>Ribbon是一个<strong>客户端负载均衡器</strong>，能够给HTTP客户端带来灵活的控制</li><li>实现的核心功能：就是一组<strong>选择策略</strong>，帮助我们在一个服务集群中，选择一个服务实例，并向该实例发起调用请求</li><li>在<code>Irule</code>这个接口类下面是所有的负载均衡选择策略</li></ul><table><thead><tr><th>策略</th><th>实现类</th><th>描述</th></tr></thead><tbody><tr><td>随机策略</td><td>RandomRule</td><td>随机选择server</td></tr><tr><td>轮训策略</td><td>RoundRobinRule</td><td>轮询选择</td></tr><tr><td>重试策略</td><td>RetryRule</td><td>对选定的负载均衡策略(轮训)之上重试机制，在一个配置时间段内当选择服务不成功，则一直尝试使用该策略选择一个可用的服务；</td></tr><tr><td>最低并发策略</td><td>BestAvailableRule</td><td>逐个考察服务，如果服务断路器打开，则忽略，再选择其中并发连接最低的服务</td></tr><tr><td>可用过滤策略</td><td>AvailabilityFilteringRule</td><td>过滤掉因一直失败并被标记为circuit tripped的服务，过滤掉那些高并发链接的服务（active connections超过配置的阈值)</td></tr><tr><td>响应时间加权重策略</td><td>WeightedResponseTimeRule</td><td>根据server的响应时间分配权重，响应时间越长，权重越低，被选择到的概率也就越低。响应时间越短，权重越高，被选中的概率越高，这个策略很贴切，综合了各种因素，比如：网络，磁盘，io等，都直接影响响应时间</td></tr><tr><td>区域权重策略</td><td>ZoneAvoidanceRule</td><td>综合判断服务所在区域的性能，和服务的，轮询选择server并且判断一个AWS Zone的运行性能是否可用，剔除不可用的Zone中的所有server（<strong>默认策略</strong>）</td></tr></tbody></table><ul><li><strong>RestTemplate整合Ribbon</strong><ul><li>首先，理论上需要在服务消费者（ribbon-consumer）工程中，添加依赖</li></ul>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>但是，因为<strong>nacos-discovery已经自己整合了ribbon依赖</strong>，所以实际上我们并不需要去添加该依赖</li><li>接着，需要增加Config配置类，并且需要修改RestTemplate的配置类，添加<code>@LoadBalance</code>注解</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">   </span><br><span class="line">       <span class="meta">@Bean</span></span><br><span class="line">       <span class="comment">// 开启ribbon的负载均衡</span></span><br><span class="line">       <span class="meta">@LoadBalanced</span></span><br><span class="line">       <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>然后在使用RestTemplate发起调用的时候，直接使用服务名进行调用即可</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerController</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//    @Autowired</span></span><br><span class="line">   <span class="comment">//    DiscoveryClient discoveryClient;</span></span><br><span class="line">       <span class="meta">@Autowired</span></span><br><span class="line">       RestTemplate restTemplate;</span><br><span class="line">   </span><br><span class="line">       <span class="meta">@GetMapping(&quot;/ribbon/consumer&quot;)</span></span><br><span class="line">       <span class="keyword">public</span> String <span class="title function_">ribbonDemo</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">           <span class="comment">// 1. 创建restTemplate对象</span></span><br><span class="line">           <span class="comment">// RestTemplate restTemplate = new RestTemplate();</span></span><br><span class="line">           <span class="comment">// 从容器中去取RestTemplate对象</span></span><br><span class="line">   </span><br><span class="line">           <span class="comment">// 2. 发起请求</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://ribbon-provider/ribbon/provider?name=&#123;1&#125;&quot;</span>;</span><br><span class="line">   </span><br><span class="line">           <span class="comment">// 3. 接收响应，打印结果</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">resp</span> <span class="operator">=</span> restTemplate.getForObject(url, String.class, <span class="string">&quot;zs&quot;</span>);</span><br><span class="line">   </span><br><span class="line">           <span class="keyword">return</span> resp;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>服务消费者的配置项</li></ul>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用的端口号</span></span><br><span class="line"> <span class="attr">server:</span></span><br><span class="line">   <span class="attr">port:</span> <span class="number">8005</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 服务集群的名字 spring.application.name</span></span><br><span class="line"> <span class="attr">spring:</span></span><br><span class="line">   <span class="attr">application:</span></span><br><span class="line">     <span class="attr">name:</span> <span class="string">ribbon-consumer</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment"># 注册中心的地址</span></span><br><span class="line">   <span class="attr">cloud:</span></span><br><span class="line">     <span class="attr">nacos:</span></span><br><span class="line">       <span class="attr">discovery:</span></span><br><span class="line">         <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><ul><li>服务提供者同之前的</li></ul></li></ul><hr><ul><li><strong>指定Ribbon负载均衡策略</strong></li></ul><ol><li>方式一：通过<strong>配置文件</strong>来指定</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里的users是我们的服务名称</span></span><br><span class="line"><span class="attr">ribbon-provider:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="comment"># 这一行配置的就是实现具体负载均衡策略实现类的全类名</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span>    <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><ol start="2"><li>方式二：通过<strong>配置类</strong>来指定<ul><li>定义配置类</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonConfig</span> &#123;</span><br><span class="line">       </span><br><span class="line">       <span class="meta">@Bean</span></span><br><span class="line">       <span class="keyword">public</span> IRule <span class="title function_">ribbonRule</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="comment">// 比如说采用随即策略，它就会对所有的服务集群生效</span></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>定义Ribbon客户端配置</li><li>我们自己定义的配置类(比如上面的RibbonConfig配置类)，不能被<code>@ComponentScan</code>扫描</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;ribbon-provider&quot;, configuration = RibbonConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderClientConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>自定义Ribbon的负载均衡策略</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRibbonRule</span> <span class="keyword">extends</span> <span class="title class_">AbstractLoadBalancerRule</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化配置的方法，可以忽略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initWithNiwsConfig</span><span class="params">(IClientConfig iClientConfig)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(Object o)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 获取服务实例列表</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * getReachableServers()：获取可达的服务列表</span></span><br><span class="line"><span class="comment">         * getAllServers()：获取所有的服务列表</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Server&gt; serverList = getLoadBalancer().getReachableServers();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 根据自定义策略选择其中的一个服务实例</span></span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> serverList.get(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">ribbonRule</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 采用自定义的负载均衡策略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyRibbonRule</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="面向接口的服务调用"><a class="headerlink" href="#面向接口的服务调用"></a>面向接口的服务调用</h2><ul><li><strong>问题引出</strong><ul><li>代码同上</li><li>我们会发现，因为我们是使用RestTemplate这个Http客户端发起的Http协议的服务调用请求，因此在发起请求的时候，我们得自己构建请求url，请求参数，获取响应体数据等等，导致我们的代码和Restful风格的Http请求紧密耦合。</li><li>那么有没有办法，<strong>让我们在服务调用的时候与Restful的请求“解耦”，直接以Java代码中接口调用的方式，来完成服务的调用</strong>呢？</li></ul></li></ul><h3 id="OpenFeign-客户端"><a class="headerlink" href="#OpenFeign-客户端"></a>OpenFeign 客户端</h3><ul><li>功能：OpenFeign就可以帮助我们实现，让服务调用代码与Restful风格的Http请求解耦的功能。</li><li>openFeign其实是一个翻译的角色，帮助我们将方法翻译为http请求</li><li>主要流程：（以<code>http://feign-provider/feign/provider?name=xxx</code>为例）<ul><li>以openFeign调用feignDemo这个方法为例<ol><li>获取类上面的FeignClient中的注解的值，这个值就是服务的名字</li><li>获取方法上的注解以及注解的值，注解的类型决定了http的请求类型，注解中的值决定了请求的路径</li><li>获取方法中参数的名字，其实就是方法参数中的注解的值</li><li>获取方法的参数值，其实就是url后面跟的参数值</li></ol></li><li>在FeignClient中定义的方法和远程的目标方法名没有必要保持一致</li></ul></li><li><strong>OpenFeign的使用</strong><ul><li>在服务消费者中导入依赖</li></ul>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- openFeign --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>服务消费者，需要以面向接口的方式调用其他服务，需要用到OpenFeign，所以需要定义Feign客户端</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;feign-provider&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProviderClient</span> &#123;</span><br><span class="line">       <span class="meta">@GetMapping(&quot;/feign/provider&quot;)</span></span><br><span class="line">       <span class="keyword">public</span> String <span class="title function_">feignDemo</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span>;</span><br><span class="line">   </span><br><span class="line">       <span class="meta">@GetMapping(&quot;/feign/provider/stu&quot;)</span></span><br><span class="line">       <span class="keyword">public</span> Student <span class="title function_">feignDemo2</span><span class="params">()</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>在启动类上加注解<code>@EnableFeignClients</code>，才能让我们定义的FeignClient生效</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">   <span class="meta">@EnableDiscoveryClient</span></span><br><span class="line">   <span class="meta">@EnableFeignClients</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConsumerApplication</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">           SpringApplication.run(FeignConsumerApplication.class, args);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>使用接口类</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignDemoController</span> &#123;</span><br><span class="line">   </span><br><span class="line">       <span class="meta">@Autowired</span></span><br><span class="line">       ProviderClient providerClient;</span><br><span class="line">   </span><br><span class="line">       <span class="meta">@GetMapping(&quot;/feign/consumer&quot;)</span></span><br><span class="line">       <span class="keyword">public</span> String <span class="title function_">demo</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">           <span class="comment">// 使用openFeign远程调用，发起Http请求，调用接口</span></span><br><span class="line">   </span><br><span class="line">           <span class="comment">// 1. 导入openFeign包</span></span><br><span class="line">   </span><br><span class="line">           <span class="comment">// 2. 在启动类上添加注解@EnableFeignClients，表示使用openFeign</span></span><br><span class="line">   </span><br><span class="line">           <span class="comment">// 3. 声明一个接口，接口中的方法和目标服务的暴露方法一致</span></span><br><span class="line">   </span><br><span class="line">           <span class="comment">// 4. 调用</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">resp</span> <span class="operator">=</span> providerClient.feignDemo(<span class="string">&quot;ls&quot;</span>);</span><br><span class="line">   </span><br><span class="line">           <span class="comment">// http://feign-provider/feign/provider?name=&#123;name&#125;</span></span><br><span class="line">   </span><br><span class="line">           <span class="keyword">return</span> resp;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="meta">@GetMapping(&quot;/feign/student&quot;)</span></span><br><span class="line">       <span class="keyword">public</span> String <span class="title function_">demo1</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> providerClient.feignDemo2();</span><br><span class="line">           System.out.println(<span class="string">&quot;student = &quot;</span> + student);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="FeignClient日志输出"><a class="headerlink" href="#FeignClient日志输出"></a>FeignClient日志输出</h3><ul><li>当我们调用FeignClient发出请求的时候，如果我们希望能看到其发出的具体Http请求，我们可以通过配置来实现。<ol><li>在配置文件中实现</li></ol>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里的xxx表示我们自己的定义的FeignClient所在包的包名(比如: </span></span><br><span class="line"><span class="comment"># com.coo1heisenberg.feign.consumer.client)</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"> <span class="attr">level:</span></span><br><span class="line">   <span class="attr">xxx:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在配置类中，配置FeignConfig，指定日志输出级别</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Logger.Level <span class="title function_">logLevel</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="服务调用的超时设置"><a class="headerlink" href="#服务调用的超时设置"></a>服务调用的超时设置</h3><ul><li>通常，一次远程调用过程中，服务消费者不可能无限制的等待服务提供者返回的结果，正常情况下，服务提供者的一次调用执行过程也不会执行很长时间(除非出现网络故障，或者服务提供者宕机等问题)，所以为防止，在非正常情况下服务消费者在调用过程中的长时间阻塞等待，对于一次服务调用过程，我们会设置其超时时间。一次服务调用，超时未返回即认为调用失败。在使用Feign的时候，我们可以配置其超时时间。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置openFeign的超时时间</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><hr><h2 id="配置中心"><a class="headerlink" href="#配置中心"></a>配置中心</h2><p>类似于注册中心，配置中心的实现也有多种，而Nacos同时也实现了配置中心的角色。</p><ul><li>在启动的时候拉取配置，当配置中心中的配置发生变化的时候，服务可以实时的感知到配置的变化</li><li>使用配置中心可以以<strong>中心化</strong>、<strong>外部化</strong>和<strong>动态化</strong>(动态化即可以实时刷新配置)的方式管理所有环境的应用配置和服务配置。</li><li>动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。</li></ul><h3 id="Nacos配置中心"><a class="headerlink" href="#Nacos配置中心"></a>Nacos配置中心</h3><ul><li><strong>注册中心的配置信息基本认识</strong><ul><li>配置中心中的配置，主要是以<strong>键值对</strong>的形式存在的，即每条配置都以key-value的形式存储，key是配置的名称，value才是配置的值</li><li>所以，很明显，不同配置的key值应该有所区别，或者即使key值相同，我们也应该有办法区分他们，即给key值划分不同的维度</li></ul></li><li><strong>Nacos的基本概念</strong><ul><li><strong>配置项</strong>: 一个具体的可配置的参数与其值域，通常以 param-key=param-value 的形式存在。例如我们常配置系统的日志输出级别（logLevel=INFO|WARN|ERROR） 就是一个配置项。</li><li><strong>配置集</strong>：一组相关或者不相关的配置项的集合称为配置集。在系统中，一个配置文件通常就是一个配置集，包含了系统各个方面的配置，每一个配置集都对应一个唯一的DataId，DataId必须由我们自己定义。</li><li><strong>配置分组</strong>:  Nacos 中的一组配置集，是组织配置的维度之一，每一个分组都有一个唯一的组名，如果我们未定义，则默认使用DEFAULT-GROUP分组</li><li><strong>命名空间</strong>:  用于进行用户粒度的配置隔离，每一个命名空间都有一个唯一的Id值，如果我们未定义，则默认使用public命名空间<br><img src="/images/Spring-Cloud/d1e88b09fd444c19a9dc936ac3fdda19.png" alt="在这里插入图片描述" loading="lazy"><ul><li><p>配置项中的key值，以及配置分组的组名都由我们自己根据场景去定义</p></li><li><p>命名空间的Id值，在我们定义命名空间的时候，由Nacos帮我们生成</p></li></ul></li><li>在一个服务启动的时候，默认读取的配置集id即data_id和该服务的配置有关，按照如下公式计算:</li></ul>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$&#123;prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;file-extension&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>prefix</code> 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code>来配置。</p></li><li><p><code>spring.profiles.active</code> 即为当前环境对应的 profile，<strong>注意：当 <code>spring.profiles.active</code> 为空时，对应的连接符 <code>-</code> 也将不存在，dataId 的拼接格式变成 <code>$&#123;prefix&#125;.$&#123;file-extension&#125;</code></strong></p></li><li><p><code>file-exetension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 <code>properties</code> 和 <code>yaml</code> 类型。</p></li><li><p>这里要主要，我们的SpringBoot项目在启动的时候，就会根据<code>$&#123;prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;file-extension&#125;</code>生成配置集名称，并自动去读取该配置集名称对应的配置。</p></li></ul></li></ul><hr><h3 id="Nacos配置中心的使用"><a class="headerlink" href="#Nacos配置中心的使用"></a>Nacos配置中心的使用</h3><ol><li>nacos-config子工程中添加如下依赖</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependencies&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&lt;!--</span> <span class="string">springboot</span> <span class="string">--&gt;</span></span><br><span class="line">    <span class="string">&lt;dependency&gt;</span></span><br><span class="line">        <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">        <span class="string">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&lt;!--</span> <span class="string">nacos</span> <span class="string">配置中心的依赖</span> <span class="string">--&gt;</span></span><br><span class="line">    <span class="string">&lt;dependency&gt;</span></span><br><span class="line">        <span class="string">&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span><br><span class="line">        <span class="string">&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="string">&lt;version&gt;2.2.0.RELEASE&lt;/version&gt;</span></span><br><span class="line">    <span class="string">&lt;/dependency&gt;</span></span><br><span class="line"><span class="string">&lt;/dependencies&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在nacos-config的目录下添加两个配置文件，分别是<code>bootstrap.yml</code>和<code>application.yml</code>，在bootstrap配置文件中必须有应用名，以及nacos服务器地址等，而在application.yml配置文件中，配置自己项目中的其他配置<br><img src="/images/Spring-Cloud/7dc11145ce3149cc8d62fb83ae4b32c3.png" alt="在这里插入图片描述" loading="lazy"></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bootstrap.yml文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nacos相关的配置都放到bootstrap.yml中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nacos配置中心的配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 配置中心的地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="comment"># 配置中心中配置集的类型</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="comment"># 默认是 DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">test_group</span></span><br><span class="line">        <span class="comment"># 默认是public，配置命名空间的id</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">d6dabccd-c9fa-47d3-93a8-526885ab302a</span></span><br><span class="line">        <span class="comment"># 共享的配置</span></span><br><span class="line">        <span class="attr">shared-configs:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">common.yaml</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">test_group</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span>  <span class="comment"># 共享配置也支持动态刷新</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># $&#123;prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;file-extension&#125;</span></span><br><span class="line">  <span class="comment"># nacos-config</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-test</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 多环境配置 (dev / test / prod)</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line">  <span class="comment"># &#123;spring.application.name&#125;-&#123;spring.profiles.active&#125;.&#123;file-extension&#125;</span></span><br><span class="line">  <span class="comment"># dataId：nacos-config-dev.yaml</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml文件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在nacos中添加配置集<br><img src="/images/Spring-Cloud/9477ff6310444946a60930fd6dd8dc11.png" alt="在这里插入图片描述" loading="lazy"></li><li>测试代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">// 实现配置的动态刷新</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;coo1heisenberg.name&#125;&quot;)</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot; hello nacos&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Nacos配置的持久化"><a class="headerlink" href="#Nacos配置的持久化"></a>Nacos配置的持久化</h3><ul><li>在Nacos服务器上写入的配置，会被持久化保存到Nacos自带的一个嵌入式数据库<strong>derby</strong>中，因此当我们重启Nacos之后，仍然可以看到之前的配置信息</li><li>使用嵌入式数据库实现数据的存储，不方便观察数据存储的基本情况，因此，Nacos还支持将配置信息写入Mysql中<ul><li>在数据库中，创建名为nacos的数据库</li><li>在nacos数据库中，执行数据库初始化文件：<code>nacos-mysql.sql</code>(改文件在conf目录下已经提供)</li><li>修改conf/application.properties文件，增加支持mysql数据源配置（目前只支持mysql），添加mysql数据源的url、用户名和密码。</li></ul>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.datasource.platform=mysql</span></span><br><span class="line"><span class="string">db.num=1</span></span><br><span class="line"><span class="comment"># 这里的url要改成你自己的mysql数据库地址，并在你的mysql中创建名为nacos的数据库</span></span><br><span class="line"><span class="string">db.url.0=jdbc:mysql://11.162.196.16:3306/nacos?</span><span class="string">characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="comment"># 这里要改成你自己登录mysql的用户名和密码</span></span><br><span class="line"><span class="string">db.user.0=nacos_devtest</span></span><br><span class="line"><span class="string">db.password.0=youdontknow</span></span><br></pre></td></tr></table></figure><img src="/images/Spring-Cloud/446b920430db4454ac9a99cf2524dea6.png" alt="在这里插入图片描述" loading="lazy"></li><li><strong>在配置了mysql数据库之后，我们会发现，之前配置中心的配置信息全部消失了</strong>，那是因为我们之前使用的是nacos的内嵌数据库derby，现在切换到mysql之后数据存储在nacos这个数据库中，而该数据库现在是没有数据的。<br><img src="/images/Spring-Cloud/d6716790b7d14fe88c85fa8404f92dc6.png" alt="在这里插入图片描述" loading="lazy"></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04 Springboot（转载自之前的CSDN）</title>
      <link href="/2024/05/13/Spring-boot/"/>
      <url>/2024/05/13/Spring-boot/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot</h1><ul><li>SpringBoot简化Spring阶段的配置繁琐的工作<ul><li>快速搭建一个独立的生产级别的Spring应用</li><li>快速引入项目相关依赖</li><li>开箱即用，约定大于配置，大多数应用只需要极少的Spring配置</li><li>内置JavaEE容器（内置了Tomcat），可以以<code>jar</code>包的方式启动</li><li><strong>核心点约定大于配置</strong><ul><li>提供一些约定项（其实就是默认值），在应用程序启动过程中，向容器中注册默认组件</li></ul></li></ul></li></ul><hr><h2 id="创建SpringBoot应用"><a class="headerlink" href="#创建SpringBoot应用"></a>创建SpringBoot应用</h2><h3 id="官网"><a class="headerlink" href="#官网"></a>官网</h3><ul><li><a>https://start.spring.io/</a></li><li>选择groupId、ArtifactId、版本号、扫描包、JDK版本、项目构建方式、开发语言、引入的其他依赖来创建SpringBoot应用</li><li>点击Generate会下载一个zip压缩包，解压开就是一个SpringBoot应用，同时也是一个Maven工程<br><img src="/images/Spring-boot/d97edc2485d444a09703bd1db2c46a48.png" alt="在这里插入图片描述" loading="lazy"></li></ul><hr><h3 id="IDEA"><a class="headerlink" href="#IDEA"></a>IDEA</h3><ul><li>基本配置<br><img src="/images/Spring-boot/77d985fd04454ab3ac1dda868a20e8b2.png" alt="在这里插入图片描述" loading="lazy"><br><img src="/images/Spring-boot/fafd58d862e6416290d7db4127ec0aff.png" alt="在这里插入图片描述" loading="lazy"></li></ul><hr><h3 id="pom-xml文件"><a class="headerlink" href="#pom-xml文件"></a>pom.xml文件</h3><ul><li>引入的依赖中，artifactid中有一个starter这样的一个词，这样的依赖就叫其starter依赖<ul><li><code>spring-boot-starter</code><ul><li>SpringBoot本身的依赖，所有的SpringBoot应用都有这个依赖</li></ul></li></ul></li><li><code>spring-boot-starter-xxx</code><ul><li>SpringBoot官方提供的依赖（groupid → org.springframework.boot），提供的是SpringBoot对xxx技术的支持<ul><li>比如<code>spring-boot-starter-web</code> 就是SpringBoot对web技术的支持</li><li>比如<code>spring-boot-starter-tomcat</code>就是SpringBoot对Tomcat的支持</li><li>比如<code>spring-boot-starter-json</code> 就是SpringBoot对Json的支持</li></ul></li></ul></li><li><code>xxx-spring-boot-starter</code> 第三方框架提供的依赖，提供的是SpringBoot对xxx技术的支持<ul><li>比如mybatis-spring-boot-starter，SpringBoot对MyBatis技术的支持</li><li>比如pagehelper-spring-boot-starter</li></ul></li><li><strong>通常在SpringBoot中要使用某一项技术，只需要引入其starter依赖就可以了</strong></li><li><strong>为什么引入其starter依赖就可以了</strong>？<ul><li>starter依赖中关联了其他依赖，当我们引入starter依赖的时候，会将该技术所需要的其他的依赖一同引入进来<ul><li>举个例子：使用mybatis的话，引入mybatis-spring-boot-starter，mybatis、mybatis-spring、spring-jdbc都会被引入进来</li></ul></li><li>starter依赖中通常会包含另外一个依赖autoconfigure依赖<ul><li>autoconfigure依赖能够帮我们做自动配置，自动配置里最主要的是自动注册默认的组件</li></ul></li></ul></li></ul><hr><h3 id="启动类"><a class="headerlink" href="#启动类"></a>启动类</h3><ul><li>SpringBoot应用最终打包为<code>Jar</code>包，packaging的默认值也是<code>jar</code></li><li><strong>运行jar包的命令</strong>：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar frontend.jar</span><br></pre></td></tr></table></figure><ul><li><strong>执行的jar包的main方法</strong>：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Start-Class: com.coo1heisenberg.frontend.FrontendApplication</span><br></pre></td></tr></table></figure><ul><li>启动类：main方法所处的类 → <strong>启动类的包目录就是SpringBoot应用默认的扫描包目录</strong></li></ul><hr><h2 id="整合SpringMVC"><a class="headerlink" href="#整合SpringMVC"></a>整合SpringMVC</h2><ul><li><strong>spring-boot-starter-web</strong></li></ul><h3 id="整合配置类"><a class="headerlink" href="#整合配置类"></a>整合配置类</h3><ul><li>配置类在SpringBoot阶段是可以使用的，但是有些内容产生了变化<ul><li>不需要写扫描包目录了 → <strong>springboot提供的默认的扫描包目录：启动类所在的包目录</strong></li><li>在配置类上增加<code>@EnableWebMvc</code>或<code>@Configuration</code><ul><li>如果使用@EnableWebMvc意味着全面接管SpringMVC的相关配置，默认配置失效</li><li>如果使用**@Configuration**意味着做的是配置项的补充 → 建议使用</li></ul></li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @EnableWebMvc</span></span><br><span class="line"><span class="comment">// @ComponentScan(&quot;&quot;)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认扫描包是启动类所在的包目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：配置项的增量补充，存量（默认配置）是自动配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableWebMvc</span>：全面接管SpringMVC的配置，默认配置失效 → 通常不全面接管</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="静态资源处理"><a class="headerlink" href="#静态资源处理"></a>静态资源处理</h3><ul><li>WebMvcConfigurer接口中的<code>addResourceHandlers(registry)</code></li><li><strong><code>registry.addResourceHandler(&quot;映射范围&quot;).addResourceLocations(&quot;静态资源所处的位置&quot;)</code></strong></li><li>上面这种方式可以在配置类中使用</li><li>SpringBoot也给我们做了<strong>默认的配置</strong><ul><li>mapping映射范围：<code>/**</code></li><li>location资源所处的位置：<code>classpath:/public/</code>、<code>classpath:/static/</code>、<code>classpath:/META-INF/</code>等</li></ul></li><li>SpringBoot给我们提供了默认配置使用的是默认值；我们仍然可以使用其默认的配置，我们可以指定自定义的值</li><li><strong>自定义的配置</strong><ul><li>配置文件是<code>.properties</code> → <code>key=value</code></li><li>通过指定的key提供value，SpringBoot可以自动读取这些key对应的值</li></ul></li></ul><p>eg：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://localhost:8080/pic/1.jpg</span></span><br><span class="line"><span class="comment"># http://localhost:8080/pic/2.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># path</span></span><br><span class="line">spring.web.resources.static-locations=file:d:/test_photo/ </span><br><span class="line"><span class="comment"># 文件路径</span></span><br><span class="line">spring.mvc.static-path-pattern=/pic/**</span><br><span class="line"><span class="comment"># 执行 registry.addResourceHandler(&quot;映射范围&quot;).addResourceLocations(&quot;静态资源所处的位置&quot;)</span></span><br><span class="line"><span class="comment"># 会自动读取这两个值</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>静态资源处理<ul><li>啥都不做采用默认值</li><li>配置文件中按照指定的key来提供对应的值</li><li>也可以写配置类</li></ul></li></ul><p><img src="/images/Spring-boot/f3c31a5f2f724b5f9745cb23ff311cc2.png" alt="在这里插入图片描述" loading="lazy"></p><hr><h3 id="Filter"><a class="headerlink" href="#Filter"></a>Filter</h3><ul><li>仍然可以使用<code>OncePerRequestFilter</code>，<strong>使用Filter直接将其注册为容器中的组件就会生效</strong></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    XXXService xxxService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    XXXMapper xxxMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet执行之前&quot;</span>);</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>好处：配置起来方便；也可以使用容器中的其他组件</li><li>HandlerInterceptor还是配置类的配置方式 → <code>addInterceptors</code>方法</li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Tomcat"><a class="headerlink" href="#Tomcat"></a>Tomcat</h3><ul><li>端口号：<code>server.port</code></li><li>上下文路径：<code>server.servlet.context-path</code></li></ul><p>eg：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tomcat配置</span></span><br><span class="line">server.port=<span class="number">8080</span></span><br><span class="line">server.servlet.context-path=/demo1</span><br></pre></td></tr></table></figure><hr><h3 id="其他配置"><a class="headerlink" href="#其他配置"></a>其他配置</h3><ul><li>配置类</li><li>配置文件<ul><li>prefix（前缀）为：<code>spring.web</code></li><li>prefix（前缀）为：<code>spring.mvc</code></li><li>早期的一些SpringBoot版本：<code>spring.resources</code> → 它现在变了 <code>spring.web.resources</code></li></ul></li><li>jackson的一些配置：</li></ul><p>eg：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.jackson.date-<span class="built_in">format</span>=yyyy-MM-dd HH:mm:ss</span><br><span class="line"><span class="comment"># 时区信息</span></span><br><span class="line">spring.jackson.time-zone=GMT+<span class="number">8</span> </span><br></pre></td></tr></table></figure><hr><h2 id="整合MyBatis"><a class="headerlink" href="#整合MyBatis"></a>整合MyBatis</h2><ul><li><strong>引入依赖</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>提供配置项的值</strong><ul><li>SpringBoot会根据这些默认向容器中注册DataSource组件的type：<strong>HikariCP</strong>( 默认的连接池)</li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driver-<span class="keyword">class</span>-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:<span class="number">3306</span>/coo1heisenberg?userUnicode=true&amp;characterEncoding=utf-<span class="number">8</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><ul><li>如果使用<code>druid</code>连接池，要使用全限定类名</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将数据源修改为了Druid</span></span><br><span class="line">spring.datasource.<span class="built_in">type</span>=com.alibaba.druid.pool.DruidDataSource</span><br></pre></td></tr></table></figure><ul><li><strong>需要提供：Mapper接口的包目录</strong><ul><li><code>@MapperScan</code> → 写在启动类上就行</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.coo1heisenberg.demo1.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1WebApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Demo1WebApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="约定大于配置的原理"><a class="headerlink" href="#约定大于配置的原理"></a>约定大于配置的原理</h2><h3 id="配置文件中的值的获取"><a class="headerlink" href="#配置文件中的值的获取"></a>配置文件中的值的获取</h3><ul><li>现在自己向容器中注册一个DataSource，想把driverClassName、url、username、password这样的一些值写在配置文件中</li></ul><ol><li><strong>没有从配置文件中取值</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfiguration1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 魔法值：Magic value</span></span><br><span class="line"><span class="comment">     * 指的是写死了的值，不能修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">driverClassName</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/coo1heisenberg?userUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(userName);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>@Value</strong><ul><li><code>$&#123;&#125;</code> 引用配置文件中的值，给<code>@Value</code>注解对应的成员变量赋值</li><li><strong>注意事项：在容器中的组件中才可以使用@Value</strong></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfiguration2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpEL（Spring Expression Language）写法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;coo1heisenberg.datasource.driver-class-name&#125;&quot;)</span></span><br><span class="line">    String driverClassName; <span class="comment">// = &quot;com.mysql.jdbc.Driver&quot;;</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;coo1heisenberg.datasource.url&#125;&quot;)</span></span><br><span class="line">    String url; <span class="comment">// = &quot;jdbc:mysql://localhost:3306/coo1heisenberg?userUnicode=true&amp;characterEncoding=utf-8&quot;;</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;coo1heisenberg.datasource.username&#125;&quot;)</span></span><br><span class="line">    String userName; <span class="comment">// = &quot;root&quot;;</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;coo1heisenberg.datasource.password&#125;&quot;)</span></span><br><span class="line">    String password; <span class="comment">// = &quot;123456&quot;;</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(userName);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">coo1heisenberg.datasource.driver-<span class="keyword">class</span>-name=com.mysql.jdbc.Driver</span><br><span class="line">coo1heisenberg.datasource.url=jdbc:mysql://localhost:<span class="number">3306</span>/coo1heisenberg?userUnicode=true&amp;characterEncoding=utf-<span class="number">8</span></span><br><span class="line">coo1heisenberg.datasource.username=root</span><br><span class="line">coo1heisenberg.datasource.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>@ConfigurationProperties</strong><ul><li>使用<code>set</code>方法给成员变量赋值</li><li><strong>注意事项：在容器中的组件中才可以使用</strong></li><li><code>@ConfigurationProperties</code>仍然是从配置文件中根据key来获得对应的值<ul><li><strong>key=@ConfigurationProperties注解的prefix属性值 + 成员变量名</strong></li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;coo1heisenberg.datasource3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfiguration3</span> &#123;</span><br><span class="line">    </span><br><span class="line">    String driverClassName; <span class="comment">// = &quot;com.mysql.jdbc.Driver&quot;;</span></span><br><span class="line"></span><br><span class="line">    String url; <span class="comment">// = &quot;jdbc:mysql://localhost:3306/coo1heisenberg?userUnicode=true&amp;characterEncoding=utf-8&quot;;</span></span><br><span class="line"></span><br><span class="line">    String userName; <span class="comment">// = &quot;root&quot;;</span></span><br><span class="line"></span><br><span class="line">    String password; <span class="comment">// = &quot;123456&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(userName);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">coo1heisenberg.datasource3.driver-<span class="keyword">class</span>-name=com.mysql.jdbc.Driver</span><br><span class="line">coo1heisenberg.datasource3.url=jdbc:mysql://localhost:<span class="number">3306</span>/coo1heisenberg?userUnicode=true&amp;characterEncoding=utf-<span class="number">8</span></span><br><span class="line">coo1heisenberg.datasource3.username=root</span><br><span class="line">coo1heisenberg.datasource3.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>@EnableConfigurationProperties和@ConfigurationProperties</strong><ul><li>只有<code>Properties</code>组件注册过程有差别，其他的均一致</li><li><code>@EnableConfigurationProperties</code>注解写在配置上，其value属性写的Class数组，将Class数组对应的类注册为容器中的组件</li></ul></li></ol><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;coo1heisenberg.datasource4&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceProperties4</span> &#123;</span><br><span class="line">    String driverClassName; <span class="comment">// = &quot;com.mysql.jdbc.Driver&quot;;</span></span><br><span class="line"></span><br><span class="line">    String url; <span class="comment">// = &quot;jdbc:mysql://localhost:3306/coo1heisenberg?userUnicode=true&amp;characterEncoding=utf-8&quot;;</span></span><br><span class="line"></span><br><span class="line">    String userName; <span class="comment">// = &quot;root&quot;;</span></span><br><span class="line"></span><br><span class="line">    String password; <span class="comment">// = &quot;123456&quot;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(DataSourceProperties4.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfiguration4</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    DataSourceProperties4 dataSourceProperties4;</span></span><br><span class="line"></span><br><span class="line">    DataSourceProperties4 dataSourceProperties4;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataSourceConfiguration4</span><span class="params">(DataSourceProperties4 dataSourceProperties4)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dataSourceProperties4 = dataSourceProperties4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(dataSourceProperties4.getDriverClassName());</span><br><span class="line">        dataSource.setUrl(dataSourceProperties4.getUrl());</span><br><span class="line">        dataSource.setUsername(dataSourceProperties4.getUserName());</span><br><span class="line">        dataSource.setPassword(dataSourceProperties4.getPassword());</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">coo1heisenberg.datasource4.driver-<span class="keyword">class</span>-name=com.mysql.jdbc.Driver</span><br><span class="line">coo1heisenberg.datasource4.url=jdbc:mysql://localhost:<span class="number">3306</span>/coo1heisenberg?userUnicode=true&amp;characterEncoding=utf-<span class="number">8</span></span><br><span class="line">coo1heisenberg.datasource4.username=root</span><br><span class="line">coo1heisenberg.datasource4.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><hr><h3 id="yml形式的配置文件"><a class="headerlink" href="#yml形式的配置文件"></a>yml形式的配置文件</h3><ul><li>和<code>properties</code>一样都是<code>key=value</code>形式的配置文件，只不过语法上有区别</li><li>可以将前面的<code>properties</code>配置文件修改为<code>yml</code>配置文件<ol><li>如果<strong>key是多级</strong>的，比如<code>spring.datasource.driver-clsss-name</code> ，这个就是3级，yml 要写 <strong>冒号、换行、空格缩进</strong>（几个空格都可以，但是同一级要对齐）</li><li><strong>等于</strong>：yml 要写 <strong>冒号 空格</strong></li><li><strong>如果有相同的前缀，省略掉重复的前缀</strong></li></ol></li></ul><p>eg：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  web:</span><br><span class="line">    resources:</span><br><span class="line">      static-locations: file:d:/test_photo/</span><br><span class="line"></span><br><span class="line">  mvc:</span><br><span class="line">    static-path-pattern: /pic/**</span><br><span class="line"></span><br><span class="line">  jackson:</span><br><span class="line">    date-<span class="built_in">format</span>: yyyy-MM-dd HH:mm:ss</span><br><span class="line">    time-zone: GMT+<span class="number">8</span></span><br><span class="line"></span><br><span class="line">  datasource:</span><br><span class="line">    driver-<span class="keyword">class</span>-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:<span class="number">3306</span>/coo1heisenberg?userUnicode:true&amp;characterEncoding:utf-<span class="number">8</span></span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8080</span></span><br><span class="line"></span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /demo1</span><br></pre></td></tr></table></figure><hr><h3 id="约定大于配置的说明"><a class="headerlink" href="#约定大于配置的说明"></a>约定大于配置的说明</h3><ul><li>SpringBoot实现约定大于配置主要做的事情是<strong>帮我们注册一些默认的组件，而默认的组件是自动自动配置类来进行配置的</strong><ul><li>自动配置类：主要加载的使用<strong>autoconfigure依赖</strong>中的**/META-INF/spring.factories**文件里提供了自动配置类的列表</li><li>最近的几个版本的SpringBoot也提供了另外的一个位置的配置类：<code>/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code></li></ul></li><li><code>@EnableAutoConfiguration</code>注解上有一个注解  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br></pre></td></tr></table></figure><ol><li><code>@Import</code>注解可以直接写配置类Class → 把这个配置类注册为容器中的组件</li><li><code>@Import</code>注解写的Class实现了Selector接口 → selectImports方法，返回值String[] → 配置类的全限定类名</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoConfigurationImportSelector</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span>, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        <span class="comment">// 读取/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</span></span><br><span class="line">      <span class="comment">// 读取/META-INF/spring.factories 里的 org.springframework.boot.autoconfigure.EnableAutoConfiguration这个key对应的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="注解"><a class="headerlink" href="#注解"></a>注解</h3><ul><li><code>@ConditionalOnXXX</code>  → 满足XXX条件其他的注解生效</li><li><code>@ConditionalOnMissingXXX</code> → 满足缺少XXX条件，其他的注解生效</li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 应用程序中要引入对应的类 → 要有对应的依赖 → starter引入的</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;SqlSessionFactory.class, SqlSessionFactoryBean.class&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 容器中DataSource类型的组件只有一个</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(DataSource.class)</span></span><br></pre></td></tr></table></figure><p>eg：</p><ul><li><strong>@Bean和@ConditionalOnMissingBean通常同时出现</strong><ul><li>如果你没有注册组件，那么<code>@Bean</code>生效，注册默认组件</li><li>如果你注册了组件，那么<code>@Bean</code>不会生效，就不会注册默认组件，以你注册的组件为准</li><li>综上可以得<strong>约定大于配置</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123;TransactionManager.class&#125;)</span></span><br><span class="line">    DataSourceTransactionManager <span class="title function_">transactionManager</span><span class="params">(Environment environment, DataSource dataSource, ObjectProvider&lt;TransactionManagerCustomizers&gt; transactionManagerCustomizers)</span> &#123;</span><br><span class="line">      <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="built_in">this</span>.createTransactionManager(environment, dataSource);</span><br><span class="line">      transactionManagerCustomizers.ifAvailable((customizers) -&gt; &#123;</span><br><span class="line">        customizers.customize(transactionManager);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="配置文件配置项"><a class="headerlink" href="#配置文件配置项"></a>配置文件配置项</h3><ul><li>引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这个依赖会帮我们新增对应的json<ul><li>生成之后，在<code>resources</code>目录下新增一个文件夹 <code>META-INF</code></li></ul></li></ul><p>eg：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;groups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coo1heisenberg.datasource3&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.coo1heisenberg.demo2.config3.DataSourceConfiguration3&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.coo1heisenberg.demo2.config3.DataSourceConfiguration3&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coo1heisenberg.datasource4&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.coo1heisenberg.demo2.config4.DataSourceProperties4&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.coo1heisenberg.demo2.config4.DataSourceProperties4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coo1heisenberg.datasource3.driver-class-name&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.coo1heisenberg.demo2.config3.DataSourceConfiguration3&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coo1heisenberg.datasource3.password&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.coo1heisenberg.demo2.config3.DataSourceConfiguration3&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coo1heisenberg.datasource3.url&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.coo1heisenberg.demo2.config3.DataSourceConfiguration3&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coo1heisenberg.datasource3.user-name&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.coo1heisenberg.demo2.config3.DataSourceConfiguration3&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coo1heisenberg.datasource4.driver-class-name&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.coo1heisenberg.demo2.config4.DataSourceProperties4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coo1heisenberg.datasource4.password&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.coo1heisenberg.demo2.config4.DataSourceProperties4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coo1heisenberg.datasource4.url&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.coo1heisenberg.demo2.config4.DataSourceProperties4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coo1heisenberg.datasource4.user-name&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.coo1heisenberg.demo2.config4.DataSourceProperties4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hints&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/images/Spring-boot/6894a4363e874760966a1e5e834b9d5d.png" alt="在这里插入图片描述" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03 Spring-MVC（转载自之前的CSDN）</title>
      <link href="/2024/05/13/Spring-MVC/"/>
      <url>/2024/05/13/Spring-MVC/</url>
      
        <content type="html"><![CDATA[<h1>MVC</h1><ul><li>MVC设计模式的任务是将<strong>包含业务数据的模块与显示模块的视图解耦</strong></li><li>SpringMVC是在Spring框架的基础上做的</li></ul><hr><h1>SpringMVC与JavaEE对比</h1><p><img src="/images/Spring-MVC/05398a75ecb5485cb840d1972063fbf1.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li>SpringMVC是通过一个Servlet（DispatcherServlet）来接收全部请求，然后分发到不同的方法上</li></ul><hr><h1>SpringMVC</h1><h2 id="SpringMVC的核心流程"><a class="headerlink" href="#SpringMVC的核心流程"></a>SpringMVC的核心流程</h2><p><img src="/images/Spring-MVC/a23e14953baf4d0abe2b7ba74cebd4cf.png" alt="在这里插入图片描述" loading="lazy"></p><hr><h2 id="SpringMVC入门案例"><a class="headerlink" href="#SpringMVC入门案例"></a>SpringMVC入门案例</h2><ol><li><strong>导入依赖</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring的核心包 + spring-web 、 spring-webmvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.15.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>启动项配置</strong><ul><li><code>AACDSI</code> → 抽象类 <code>AbstractAnnotationConfigDispatcherServletInitializer</code><ul><li>类似于SpringMVC的启动类</li><li><code>onStartup</code>方法，里面做了两次<code>ac = new AnnotationConfigWebApplicationContext</code></li></ul></li><li>抽象类的特点是：如果里面有抽象方法我们需要是实现其抽象方法</li><li>在抽象类的子类中去写这两个抽象方法的实现 → 提供自定义的配置类</li><li>示意图如下：</li></ul></li></ol><p><img src="/images/Spring-MVC/95421d5e6f8242b2a3cd5aae3644d2dd.png" alt="在这里插入图片描述" loading="lazy"></p><p>eg：</p><ul><li><code>config</code>目录下<ul><li><code>ApplicationInitialization.java</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AACDSI == AbstractAnnotationConfigDispatcherServletInitializer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类的配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationInitialization</span></span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AnnotationConfigWebApplicationContext 对比 ApplicationContext 多了对web应用的支持</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 创建ApplicationContext的时候提供配置类</span></span><br><span class="line"><span class="comment">     * ApplicationContext ac1 = new AnnotationConfigWebApplicationContext(clazz);</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 创建ApplicationContext的时候提供配置类</span></span><br><span class="line"><span class="comment">     * ApplicationContext ac2 = new AnnotationConfigWebApplicationContext(clazz);</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 应用程序中有两个ApplicationContext？</span></span><br><span class="line"><span class="comment">     * 两个ac之间存在着包含关系</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部的ApplicationContext的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;RootConfiguration.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部的ApplicationContext的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfiguration.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置DispatcherServlet的ServletMapping = /</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>RootConfiguration.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在容器中排除掉controller组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里可以整合Mybatis、增加事务等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.coo1heisenberg.demo1&quot;,</span></span><br><span class="line"><span class="meta">        // excludeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION, value = Controller.class))</span></span><br><span class="line">        <span class="comment">// excludeFilters = @ComponentScan.Filter(value = Controller.class))</span></span><br><span class="line">        excludeFilters = <span class="meta">@ComponentScan</span>.Filter(value =</span><br><span class="line">                &#123;Controller.class, EnableWebMvc.class&#125;))</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RootConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>WebConfiguration.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">// 功能有：@Configuration + 使用SpringMVC的相关配置</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.coo1heisenberg.demo1.controller&quot;)</span></span><br><span class="line"><span class="comment">// WebMvcConfigurer接口：后面还会做一些和SpringMVC相关的配置 </span></span><br><span class="line"><span class="comment">// 需要实现接口 WebMvcConfigurer，如果实现接口里的方法就是提供一些额外的配置信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>SpringMVC的使用</strong><ul><li>在<code>Controller</code>目录下</li></ul></li></ol><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController 组件的初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">BaseRespVo</span> <span class="variable">vo</span> <span class="operator">=</span> BaseRespVo.ok(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> objectMapper.writeValueAsString(vo);</span><br><span class="line">        response.getWriter().println(jsonStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handler -&gt; HandlerMethod -&gt; Handler方法</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello2&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span> <span class="comment">// SpringMVC帮我们使用Jackson,把我们的返回值转换成JSON字符串进行响应</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">hello2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok(<span class="string">&quot;hello world2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="RequestMapping注解的使用"><a class="headerlink" href="#RequestMapping注解的使用"></a><code>@RequestMapping</code>注解的使用</h2><ul><li>通过<code>@RequestMapping</code>注解的不同属性，实现不同功能上的限定<ul><li>请求URL限定</li><li>窄化请求<ul><li><strong>窄化请求</strong>：将<code>@RequestMapping</code>写在类上</li><li>该Controller组件中的方法映射的URL：<strong>类上的@RequestMapping的value属性值 + 方法上的@RequestMapping的value属性值</strong></li></ul></li><li>请求方法限定</li><li>请求参数限定</li><li>请求头限定</li></ul></li></ul><ol><li><strong>注解的定义</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 没啥用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(&quot;path&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String[] path() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// value属性：映射URL是什么，可以映射多个值，还可以写通配符</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    eg：<span class="doctag">@RequestMapping</span>(&quot;hello/*&quot;, &quot;hello*&quot;);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    RequestMethod[] method() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 请求方法限定 GET/POST</span></span><br><span class="line"></span><br><span class="line">    String[] params() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 请求参数限定 ?后面的</span></span><br><span class="line"></span><br><span class="line">    String[] headers() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 请求体限定 携带的token等等</span></span><br><span class="line"></span><br><span class="line">    String[] consumes() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 和请求头有关，对应的content-type</span></span><br><span class="line">    <span class="comment">// content-type指请求体里正文的类型</span></span><br><span class="line"></span><br><span class="line">    String[] produces() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 和请求头有关，对应的accept</span></span><br><span class="line">    <span class="comment">// accept指服务端响应报文响应体里正文的格式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>value属性的使用</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * value属性的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * localhost:8080/use/hello/111</span></span><br><span class="line"><span class="comment">     * localhost:8080/use/helloXXX</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;hello/*&quot;, &quot;hello*&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok(<span class="string">&quot;hello aaaaa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>请求方法限定</strong><ul><li>引申注解：<code>@GetMapping</code>、<code>@PostMapping</code><ul><li><strong>这两个注解就是限定了请求方法的<code>@RequestMapping</code></strong></li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    method = &#123;RequestMethod.GET&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GetMapping &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    method = &#123;RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PostMapping &#123;&#125;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * method属性：请求方法限定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;method&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodLimitController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * localhost:8080/demo2/method/get</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">// @RequestMapping(value = &quot;get&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;get&quot;)</span> <span class="comment">// 与上面等同</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">methodGet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;post&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;post&quot;)</span> <span class="comment">// 与上面等同</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">methodPost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个值之间的关系是or的关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;getorpost&quot;, method = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">methodGetOrPost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>请求参数限定</strong><ul><li>可以写多个值，写多个值的情况，多个值之间的关系是<strong>and（或着说是：且）</strong></li><li><strong><font color="red">错误码：400 → 是请求参数封装有问题</font></strong></li></ul></li></ol><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;parameter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterLimitController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * localhost:8080/demo2/parameter/limit?username=zs&amp;password=123456</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">// params = &#123;&quot;username&quot;,&quot;password&quot;&#125; 含义：既要携带username这个请求参数，也要携带password</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;limit&quot;, params = &#123;&quot;username&quot;, &quot;password&quot;&#125;)</span> <span class="comment">// params里面是且的关系</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">limit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>请求头限定</strong><ul><li>是字符串数组，多个值之间的关系也是<strong>and（或者说是且）</strong></li></ul></li></ol><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;header&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderLimitController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * localhost:8080/demo2/header/limit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">// headers也是且的关系</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;limit&quot;, headers = &#123;&quot;x-coo1heisenberg-token&quot;, &quot;language&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">limit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><strong>Content-Type请求头值限定consumes属性</strong></li></ol><ul><li>限定的是Content-Type这个请求头的值 → 这个请求头的含义：<strong>请求携带的 正文的类型（请求体）</strong><ul><li>比如一个jpg文件：image/jpeg</li><li>比如文本：text/html</li><li>比如json：application/json</li></ul></li><li>语法的格式：<code>xxx/xxx</code></li></ul><ol start="7"><li><strong>Accept请求头值限定produces属性</strong></li></ol><ul><li>限定的是Accept这个请求头的值 → 这个请求的含义 → <strong>客户端希望接收到的服务端响应的正文类型</strong></li><li>语法的格式：<code>xxx/xxx</code></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;header&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderLimitController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * localhost:8080/demo2/header/consumes</span></span><br><span class="line"><span class="comment">     * localhost:8080/demo2/header/produces</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;consumes&quot;, consumes = &quot;abc/def&quot;)</span></span><br><span class="line">    <span class="comment">// 限定content-type：abc/def</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">consumes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;produces&quot;, produces = &quot;application/json&quot;)</span></span><br><span class="line">    <span class="comment">// 限定accept：application/json</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">produces</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>解决中文乱码问题</strong><ul><li>JavaEE阶段解决响应中文乱码问题：<strong>响应头中Content-Type</strong> → 响应体的内容的字符集</li><li>SpringMVC阶段解决中文乱码问题：<strong>请求头中的Accept</strong> → 响应体的内容的字符集</li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;chinese&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChineseResolveController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;resolve&quot;, produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">chinese</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好中文&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Handler方法的返回值"><a class="headerlink" href="#Handler方法的返回值"></a>Handler方法的返回值</h2><p>DispatcherServlet获取 → 判断类型</p><ul><li>如果是<strong>ModelAndView</strong> → 转发到jsp页面，在jsp页面上渲染model提供的数据 → <strong>已经不是主流了</strong></li><li>如果是<strong>Json</strong>需要的形式 → <code>response.getWriter.write(jsonStr)</code></li></ul><hr><ol><li><strong>ModelAndView</strong><ul><li>ModelAndView主要是为单体应用服务的，单体应用的话，前端和后端都整合在一个应用程序中</li><li>ModelAndView主要是<strong>给访问前端的视图和数据的</strong>，当服务器的这个方法返回了一个ModelAndView的话，会访问到前端的内容<ul><li>Tomcat对jsp处理本身就是特殊的处理 → jsp文件会被编译Servlet</li></ul></li><li>返回值写为了ModelAndView，在方法上并<strong>没有增加@ResponseBody</strong></li></ul></li></ol><p>eg：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello $&#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;mav&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelAndViewController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * localhost:8080/demo3/mav/hello?name=zs</span></span><br><span class="line"><span class="comment">     * localhost:8080/demo3/mav/hello2?name=zs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问到hello.jsp，里面显示的也是hello xxx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @SneakyThrows</span></span><br><span class="line"><span class="comment">//    @RequestMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="comment">//    public ModelAndView hello(HttpServletRequest request, HttpServletResponse response) &#123;</span></span><br><span class="line"><span class="comment">//        request.setAttribute(&quot;name&quot;, request.getParameter(&quot;name&quot;));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求转发：</span></span><br><span class="line"><span class="comment">     * 将请求从一个Servlet转发到另一个Servlet或JSP页面，但URL不会改变。</span></span><br><span class="line"><span class="comment">     * 在转发过程中，请求对象（HttpServletRequest）和响应对象（HttpServletResponse）在Servlet之间共享</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//        request.getRequestDispatcher(&quot;/WEB-INF/hello.jsp&quot;).forward(request, response);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">hello</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;/WEB-INF/hello.jsp&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;name&quot;</span>, request.getParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果返回值是视图名，不能加@RequestBody注解</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello2</span><span class="params">(Model model, HttpServletRequest request)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>, request.getParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/hello.jsp&quot;</span>; <span class="comment">// ModelAndView中的视图名</span></span><br><span class="line">        <span class="comment">// 等价于：modelAndView.setViewName(&quot;/WEB-INF/hello.jsp&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol start="2"><li><strong>Json</strong><ul><li>准备事务<ul><li>jackson相关依赖（jackson-databind）</li><li><code>@EnableWebMvc</code></li><li><strong>方法上（或类上）增加注解<code>@ResponseBody</code></strong></li></ul></li><li>注意事项：<strong>如果要响应的是引用类型的对象，提供构造方法和getter/setter方法</strong></li><li><code>@ResponseBody</code>注解：</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ResponseBody &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引申注解：<strong>@RestController = @Controller + @ResponseBody</strong></li></ul></li></ol><ul><li>有两种方式：<ul><li><code>String</code>（<strong>并不建议继续使用了</strong>）<ul><li>后续我们并不直接返回String了，因为这样子写比较繁琐，大家还需要处理字符集问题，返回值为String的话，它的字符集默认是iso-8859-1</li></ul></li><li><code>Object</code>（<strong>你写啥类型都行</strong>）<ul><li>直接返回集合或引用类型对象就可以了</li><li>直接返回对象，Jackson会自动的帮我们进行转换， 并且也不需要设置字符集，返回值的中文没有乱码</li></ul></li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;json&quot;)</span></span><br><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="comment">//@ResponseBody // 意味着所有的方法上都加上了@ResponseBody</span></span><br><span class="line"><span class="meta">@RestController</span> <span class="comment">// 复合注解 等同于：@Controller + @ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 直接响应字符串</span></span><br><span class="line"><span class="comment">     * 2. 直接响应Object对象，然后Jackson会将该对象转换成Json字符串响应出去</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello1&quot;)</span></span><br><span class="line">    <span class="comment">// @ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello2&quot;)</span></span><br><span class="line">    <span class="comment">// @ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">hello2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok(<span class="string">&quot;hello2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Handler方法的形参"><a class="headerlink" href="#Handler方法的形参"></a>Handler方法的形参</h2><p>方法的形参：主要做的事情是<strong>接收请求参数</strong> 以及一些其他的信息</p><ul><li><code>key=value</code>形式的请求参数</li><li><code>Json</code>形式的请求参数</li><li>其他的信息</li></ul><hr><h3 id="key-value形式的请求参数"><a class="headerlink" href="#key-value形式的请求参数"></a><code>key=value</code>形式的请求参数</h3><ol><li><strong>String、基本类型以及对应的包装类</strong><ul><li>直接接收：<strong>请求参数名和方法的形参名一致</strong></li><li>可以使用基本类型或其包装类接收的时候，<strong>建议使用包装类来接收 → 健壮性</strong></li></ul></li></ol><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * key = value形式的请求参数的接收</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * localhost:8080/demo4/user/register?username=zs&amp;password=nihaoya&amp;age=30</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">register</span><span class="params">(String username, String password, Integer age)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>vo的封装是开发过程中非常常规的使用</li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseRespVo</span>&lt;T&gt; &#123;</span><br><span class="line">    T data;</span><br><span class="line">    String errmsg;</span><br><span class="line">    <span class="type">int</span> errno;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; BaseRespVo <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="type">BaseRespVo</span> <span class="variable">baseRespVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseRespVo</span>();</span><br><span class="line">        baseRespVo.setErrmsg(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        baseRespVo.setData(data);</span><br><span class="line">        <span class="keyword">return</span> baseRespVo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; BaseRespVo <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BaseRespVo</span> <span class="variable">baseRespVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseRespVo</span>();</span><br><span class="line">        baseRespVo.setErrmsg(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> baseRespVo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; BaseRespVo <span class="title function_">invalidData</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">BaseRespVo</span> <span class="variable">baseRespVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseRespVo</span>();</span><br><span class="line">        baseRespVo.setErrno(<span class="number">504</span>);</span><br><span class="line">        baseRespVo.setErrmsg(msg);</span><br><span class="line">        <span class="keyword">return</span> baseRespVo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; BaseRespVo <span class="title function_">invalidData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BaseRespVo</span> <span class="variable">baseRespVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseRespVo</span>();</span><br><span class="line">        baseRespVo.setErrno(<span class="number">504</span>);</span><br><span class="line">        baseRespVo.setErrmsg(<span class="string">&quot;更新数据已失效&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> baseRespVo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; BaseRespVo <span class="title function_">invalidParameter</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">BaseRespVo</span> <span class="variable">baseRespVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseRespVo</span>();</span><br><span class="line">        baseRespVo.setErrno(<span class="number">400</span>);</span><br><span class="line">        baseRespVo.setErrmsg(msg);</span><br><span class="line">        <span class="keyword">return</span> baseRespVo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; BaseRespVo <span class="title function_">unAuthc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BaseRespVo</span> <span class="variable">baseRespVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseRespVo</span>();</span><br><span class="line">        baseRespVo.setErrno(<span class="number">502</span>);</span><br><span class="line">        baseRespVo.setErrmsg(<span class="string">&quot;认证失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> baseRespVo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; BaseRespVo <span class="title function_">expired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BaseRespVo</span> <span class="variable">baseRespVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseRespVo</span>();</span><br><span class="line">        baseRespVo.setErrno(<span class="number">502</span>);</span><br><span class="line">        baseRespVo.setErrmsg(<span class="string">&quot;认证信息过期，请重新登录&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> baseRespVo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BaseRespVo <span class="title function_">badArgument</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fail(<span class="number">401</span>, <span class="string">&quot;参数不对&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BaseRespVo <span class="title function_">fail</span><span class="params">(<span class="type">int</span> errno, String errmsg)</span> &#123;</span><br><span class="line">        <span class="type">BaseRespVo</span> <span class="variable">baseRespVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseRespVo</span>();</span><br><span class="line">        baseRespVo.setErrno(errno);</span><br><span class="line">        baseRespVo.setErrmsg(errmsg);</span><br><span class="line">        <span class="keyword">return</span> baseRespVo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BaseRespVo <span class="title function_">fail</span><span class="params">(String errmsg)</span> &#123;</span><br><span class="line">        <span class="type">BaseRespVo</span> <span class="variable">baseRespVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseRespVo</span>();</span><br><span class="line">        baseRespVo.setErrno(<span class="number">500</span>);</span><br><span class="line">        baseRespVo.setErrmsg(errmsg);</span><br><span class="line">        <span class="keyword">return</span> baseRespVo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Date形式</strong><ul><li>SpringMVC提供的<code>String → Date</code>的转换器，执行转换的过程中也是需要pattern信息的<ul><li>第一种是：采用默认的pattern信息 → <code>yyyy/MM/dd</code></li><li>第二种是：使用<code>@DateTimeFormat</code>注解的pattern属性指定</li></ul></li><li>注意：<strong>请求参数名和方法的形参名一致</strong></li></ul></li></ol><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;register3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseRespVo <span class="title function_">register3</span><span class="params">(String username, String password, Integer age, Date birthday)</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 期望使用Date来接收birthday，能否接收取决于SpringMVC是否有提供 String -&gt; Date的Converter</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * → 可以使用Date来接收 → SpringMVC提供了转换器 → 有DateFormat的要求 yyyy/MM/dd</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * eg：localhost:8080/demo4/user/register3?username=ls&amp;password=nihao&amp;age=30&amp;birthday=2022/06/21</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;register4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseRespVo <span class="title function_">register4</span><span class="params">(String username, String password, Integer age,</span></span><br><span class="line"><span class="params">                            <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> Date birthday)</span> &#123;</span><br><span class="line">    <span class="comment">// 也可以提供自定义的DateFormat</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * eg:localhost:8080/demo4/user/register4?username=ww&amp;password=byebye&amp;age=30&amp;birthday=2022-06-21</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>数组</strong><ul><li>可以<strong>直接来形参中使用数组来接收</strong></li><li>前面能够接收到的这个类型的值，也可以使用对应类型的数组来接收</li></ul></li></ol><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;register5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseRespVo <span class="title function_">register5</span><span class="params">(String username, String password, Integer age,</span></span><br><span class="line"><span class="params">                            String[] hobbies, Integer[] ids)</span> &#123;</span><br><span class="line">    <span class="comment">// 之前得使用这个方法</span></span><br><span class="line">    <span class="comment">// String[] hobbies = request.getParametersValues(&quot;hobbies&quot;);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  localhost:8080/user/register5?username=zs&amp;password=nihaoya&amp;age=30</span></span><br><span class="line"><span class="comment">     *  &amp;hobbies=sing&amp;hobbies=dance&amp;hobbies=rap</span></span><br><span class="line"><span class="comment">     *  &amp;ids=1&amp;ids=2&amp;ids=3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>文件 MultipartFile</strong></li></ol><ul><li>导入<code>commons-io</code>和<code>commons-fileupload</code>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入commons-fileupload时候也会将commons-io引入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>先向容器中注册一个组件</li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">// 功能有：@Configuration + 使用SpringMVC的相关配置</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.coo1heisenberg.demo4.controller&quot;)</span></span><br><span class="line"><span class="comment">// WebMvcConfigurer接口：MVC相关的配置要用到这个接口提供的方法和参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果要使用SpringMVC的文件接收，接收MultipartFile的话，</span></span><br><span class="line"><span class="comment">     * 需要向容器中注册MultipartResolver组件</span></span><br><span class="line"><span class="comment">     * 处理MultipartFile封装过程中，需要使用这个组件</span></span><br><span class="line"><span class="comment">     * 而这个组件 → ac.getBean(beanName)</span></span><br><span class="line"><span class="comment">     * beanName=multipartResolver → 也就意味着组件名称只能叫multipartResolver</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>MultipartFile</code>类中的内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MultipartFile</span> <span class="keyword">extends</span> <span class="title class_">InputStreamSource</span> &#123;</span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    String <span class="title function_">getOriginalFilename</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    String <span class="title function_">getContentType</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">getSize</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] getBytes() <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    InputStream <span class="title function_">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Resource <span class="title function_">getResource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MultipartFileResource</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">transferTo</span><span class="params">(File var1)</span> <span class="keyword">throws</span> IOException, IllegalStateException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">transferTo</span><span class="params">(Path dest)</span> <span class="keyword">throws</span> IOException, IllegalStateException &#123;</span><br><span class="line">        FileCopyUtils.copy(<span class="built_in">this</span>.getInputStream(), Files.newOutputStream(dest));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>MultipartFile</code>提供的方法</li></ul><table><thead><tr><th>方法名</th><th>描述</th><th>返回值</th></tr></thead><tbody><tr><td>getOriginFileName()</td><td>获得上传时的文件名</td><td>String</td></tr><tr><td>getContentType()</td><td>获得上传的文件的正文类型，比如上传banner.png,正文类型就是image/png</td><td>String</td></tr><tr><td>getName()</td><td>获得是请求参数名（没啥用）</td><td>String</td></tr><tr><td>getSize()</td><td>获得文件大小</td><td>long</td></tr><tr><td><span style="color:yellow;background:red;font-size:文字大小;font-family:字体;"><strong>transferTo(File)</strong></span></td><td>提供的参数是File类型的值，File提供的保存位置及文件名，就可以保存这个文件</td><td>void</td></tr></tbody></table><ul><li>向指定路径上传一个或者多个文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">uploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * localhost:8080/demo4/upload/file</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 请求参数名和handler方法的形参名一致</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传单个文件</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;file&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">fileUpload</span><span class="params">(MultipartFile myfile <span class="comment">/*, HttpServletRequest request */</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         // 之前对参数信息的封装</span></span><br><span class="line"><span class="comment">        Part part = request.getPart(&quot;1.jpg&quot;);</span></span><br><span class="line"><span class="comment">        InputStream inputStream = part.getInputStream();</span></span><br><span class="line"><span class="comment">        long size = part.getSize();</span></span><br><span class="line"><span class="comment">        String originFileName = part.getSubmittedFileName();</span></span><br><span class="line"><span class="comment">        String name = part.getName();</span></span><br><span class="line"><span class="comment">        String contentType = part.getContentType();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> myfile.getInputStream();</span><br><span class="line">        <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> myfile.getSize();</span><br><span class="line">        <span class="type">String</span> <span class="variable">originFileName</span> <span class="operator">=</span> myfile.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> myfile.getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> myfile.getContentType();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        FileOutputStream fileOutputStream = new FileOutputStream(new File(&quot;D:\\tmp&quot;, originFileName));</span></span><br><span class="line"><span class="comment">        byte[] bytes = new byte[1024];</span></span><br><span class="line"><span class="comment">        int length = 0;</span></span><br><span class="line"><span class="comment">        while ((length = inputStream.read(bytes)) != -1) &#123;</span></span><br><span class="line"><span class="comment">            fileOutputStream.write(bytes,0,length);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        inputStream.close();</span></span><br><span class="line"><span class="comment">        fileOutputStream.close();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 上面可以优化</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/tmp&quot;</span>, originFileName);</span><br><span class="line">        myfile.transferTo(file);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传多个文件</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;files&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">uploadFiles</span><span class="params">(MultipartFile[] myfiles)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">fatherPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/tmp&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile myfile : myfiles) &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fatherPath, myfile.getOriginalFilename());</span><br><span class="line">            myfile.transferTo(file);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>使用引用类型接收</strong><ul><li>使用引用类型的话，将接收到的形参，封装为一个引用类型对象，这个引用类型的对象的成员变量封装的就是这些形参的值</li><li><strong>请求参数名和引用类型的成员变量名一致</strong></li></ul></li></ol><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * localhost:8080/user/register6?username=songge&amp;password=niupi&amp;age=30</span></span><br><span class="line"><span class="comment"> *  &amp;hobbies=sing&amp;hobbies=dance&amp;hobbies=rap&amp;ids=1&amp;ids=2&amp;ids=3</span></span><br><span class="line"><span class="comment"> *  &amp;birthday=2022-06-21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;register6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseRespVo <span class="title function_">register6</span><span class="params">(String username, String password, Integer age,</span></span><br><span class="line"><span class="params">                            String[] hobbies, Integer[] ids,</span></span><br><span class="line"><span class="params">                            <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> Date birthday)</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * User user = new User();</span></span><br><span class="line"><span class="comment">     * user.setUsername(username);</span></span><br><span class="line"><span class="comment">     * user.setPassword(password);</span></span><br><span class="line"><span class="comment">     * user.setAge(age);</span></span><br><span class="line"><span class="comment">     * user.setHobbies(hobbies);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> BaseRespVo.ok();</span><br></pre></td></tr></table></figure><ul><li>将这个形参变为一个实体类的成员变量，形参这里写这个实体类的实例</li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String username;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * request.getParameter(&quot;username&quot;)</span></span><br><span class="line"><span class="comment">     * user.setUsername(username)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String password;</span><br><span class="line">    Integer age;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * request.getParameter(&quot;age&quot;)</span></span><br><span class="line"><span class="comment">     * Integer.parseInt(ageStr)</span></span><br><span class="line"><span class="comment">     * user.setAge()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] hobbies;</span><br><span class="line">    Integer[] ids;</span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    Date birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;register7&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseRespVo <span class="title function_">register7</span> <span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>使用形参直接接收：如果<strong>参数比较少，直接使用形参</strong></li><li><strong>使用引用类型的对象来接收：参数比较多</strong>；在多个请求中都使用了相同的请求参数</li><li>可以都用：有些参数就用一次或者用的次数比较少（直接接收），有的参数用了多次（封装为实体类）</li></ul><hr><h3 id="Json请求参数"><a class="headerlink" href="#Json请求参数"></a>Json请求参数</h3><ul><li>如果说一个请求携带Json请求参数，这个请求的特点是：<ul><li>请求方法：<code>POST</code></li><li>正文类型Content-Type：<code>application/json</code></li><li>数据是Json字符串</li></ul></li><li>Json请求参数仍然是在形参中进行接收，可以使用以下几种类型来接收<ul><li><code>String</code></li><li>引用类型对象</li><li><code>Map</code></li></ul></li><li>形参前需要增加一个注解<code>@RequestBody</code></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String类型</span></span><br><span class="line"><span class="comment">     * &#123;&quot;username&quot;:&quot;root&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;birthday&quot;:&quot;2022-07-12&quot;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @RequestMapping(&quot;login1&quot;)</span></span><br><span class="line"><span class="comment">//    public BaseRespVo login1(HttpServletRequest request) &#123;</span></span><br><span class="line"><span class="comment">//        String jsonStr = request.getReader().readLine();</span></span><br><span class="line"><span class="comment">//        return BaseRespVo.ok();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;login1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">login1</span><span class="params">(<span class="meta">@RequestBody</span> String jsonStr)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收到这个json字符串，将字符串转换成map映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;login2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">login2</span><span class="params">(<span class="meta">@RequestBody</span> Map map)</span> &#123;</span><br><span class="line">        <span class="comment">// jsonStr -&gt; map</span></span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;login3&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">login3</span><span class="params">(<span class="meta">@RequestBody</span> UserVo userVo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> GoodVo goodVo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> goodsService.create(goodVo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><code>@RequestBody</code>和<code>@ResponseBody</code>这两个注解<strong>都是和Json打交道的时候使用的注解</strong><ul><li><strong>接收的时候用的是<code>@RequestBody</code></strong></li><li><strong>响应的时候用的是<code>@ResponseBody</code></strong></li></ul></li></ul><hr><h2 id="RESTful风格接口"><a class="headerlink" href="#RESTful风格接口"></a>RESTful风格接口</h2><ul><li>REST → 是单词的首字母缩写 → 表述性状态传递 → <code>Representational State Transfer</code></li><li>通过<strong>请求（报文）能够提供一些对应的信息</strong>，提供给服务器，也就是<strong>通过一些方法来获得对应的信息</strong></li><li><strong>其实就是对Request的封装</strong></li></ul><ol><li><p>当前定义接口的URL，通过URL的不同区分不同的操作：</p><ul><li><code>/user/list</code> 查询</li><li><code>/user/remove</code> 删除</li><li><code>/user/create</code> 新增</li><li><code>/user/modify</code> 修改</li></ul></li></ol><ul><li>过去使用RESTful风格接口的时候，构建一个场景，做user的增删改查，请求URL都是<code>/user</code><ul><li><code>/user</code> 查询 <code>GET</code></li><li><code>/user</code> 删除 <code>DELETE</code></li><li><code>/user</code> 新增 <code>PUT</code></li><li><code>/user</code> 修改 <code>POST</code></li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">// User的新增</span></span><br><span class="line">    <span class="comment">// @RequestMapping(value = &quot;user&quot;, method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// User的删除</span></span><br><span class="line">    <span class="comment">// @RequestMapping(value = &quot;user&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// User的修改</span></span><br><span class="line">    <span class="comment">// @RequestMapping(value = &quot;user&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;modify&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">modify</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// User的查询</span></span><br><span class="line">    <span class="comment">// @RequestMapping(value = &quot;user&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>我们还可以获得一些其他的信息：<ul><li>请求URL的信息 → <code>@PathVariable</code></li><li>请求参数信息 → <code>@RequestParam</code></li><li>请求头信息 → <code>@RequestHeader</code></li><li>Cookie信息 → <code>@CookieValue</code></li><li>Session信息 → <code>@SessionAttribute</code></li></ul></li></ol><ul><li>之前JavaEE阶段的方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @RequestMapping(&quot;cscscs/article/details/12321241&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;*/article/details/*&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">articleDetails</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * localhost:8080/demo5/cscscs/article/details/12321241</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> request.getContextPath();<span class="comment">// /demo5</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> requestURI.replaceAll(contextPath + <span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// → cscscs/article/details/12321241</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> suffix.substring(<span class="number">0</span>, suffix.indexOf(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> suffix.substring(suffix.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@PathVariable</code>注解 → URI<ul><li><code>@PathVariable</code> → 获得请求URL的一部分值 → 在<code>@RequestMapping</code>的value属性写占位符<code>&#123;&#125;</code></li><li>获得指定占位符位置的值给到所对应的形参 → 形参通过注解接收指定占位符位置的值</li><li>通过这个注解，就可以把一部分请求参数写到URL中</li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;&#123;username&#125;/article/details/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">articleDetails</span><span class="params">(<span class="meta">@PathVariable(&quot;username&quot;)</span> String username,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@RequestParam</code> → 请求参数<ul><li>形参通过这个注解获得指定请求参数，如果使用了这个注解，就<strong>一定要携带对应的请求参数</strong></li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * localhost:8080/demo5/param?username=zs&amp;password=123456</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseRespVo <span class="title function_">param</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String usernamex,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(&quot;password&quot;)</span> String passwordy)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@RequestHeader</code> → 请求头<ul><li>形参通过这个注解获得指定请求头的值</li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * localhost:8080/demo5/header</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 构造请求体 X-token：a1b2c3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @RequestMapping(&quot;header&quot;)</span></span><br><span class="line"><span class="comment">//    public BaseRespVo header(HttpServletRequest request) &#123;</span></span><br><span class="line"><span class="comment">//        request.getHeader(&quot;X-token&quot;);</span></span><br><span class="line"><span class="comment">//        return BaseRespVo.ok();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;header&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">header</span><span class="params">(<span class="meta">@RequestHeader(&quot;X-token&quot;)</span> String tokenValue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 也可以使用String[] 来接收，如果使用数组来接收，将字符串根据逗号进行分割，分割为数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;header1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">header1</span><span class="params">(<span class="meta">@RequestHeader(&quot;X-token&quot;)</span> String tokenValue,</span></span><br><span class="line"><span class="params">                              <span class="meta">@RequestHeader(&quot;Accept&quot;)</span> String[] acceptArray)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><code>@CookieValue</code> → Cookie<ul><li>形参通过这个注解获得指定Cookie的值，根据key获得value</li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * localhost:8080/demo5/cookie</span></span><br><span class="line"><span class="comment"> * 构造请求头 Cookie: username=zs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 之前JavaEE的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;cookie&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseRespVo <span class="title function_">cookie</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    <span class="keyword">if</span>(cookies != <span class="literal">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;username&quot;</span>.equals(cookie.getName())) &#123;</span><br><span class="line">                value = cookie.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;cookie1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseRespVo <span class="title function_">cookie1</span><span class="params">(<span class="meta">@CookieValue(&quot;username&quot;)</span> String value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>之前JavaEE的方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * localhost:8080/demo5/session/put</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向session里存入数据</span></span><br><span class="line"><span class="comment"> * localhost:8080/demo5/session/put?username=zs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;session/put&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseRespVo <span class="title function_">putSession</span><span class="params">(HttpSession httpSession, String username)</span> &#123;</span><br><span class="line">    httpSession.setAttribute(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">    <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向session里取出数据</span></span><br><span class="line"><span class="comment"> * localhost:8080/demo5/session/get</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;session/get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseRespVo <span class="title function_">getSession</span><span class="params">(HttpSession httpSession)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) httpSession.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@SessionAttribute</code> → Session<ul><li>形参通过这个注解获得指定Session的值，根据key获得value</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * localhost:8080/demo5/session/put</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向session里存入数据</span></span><br><span class="line"><span class="comment"> * localhost:8080/demo5/session/put?username=zs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;session/put&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseRespVo <span class="title function_">putSession</span><span class="params">(HttpSession httpSession, String username)</span> &#123;</span><br><span class="line">    httpSession.setAttribute(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">    <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向session里取出数据</span></span><br><span class="line"><span class="comment"> * localhost:8080/demo5/session/get</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;session/get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseRespVo <span class="title function_">getSession</span><span class="params">(<span class="meta">@SessionAttribute(&quot;username&quot;)</span> String username)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="静态资源处理"><a class="headerlink" href="#静态资源处理"></a>静态资源处理</h2><ul><li>JavaEE阶段如果将图片放在webapp目录，它会编译到web资源根目录，图片能访问到</li><li>应用程序整合SpringMVC之后，放在web资源根目录的图片访问不到了，原因是：<ul><li>JavaEE阶段，<strong>缺省的servlet是default</strong> → 这个缺省的servlet做的事情就是根据请求找目录下的静态资源</li><li>SpringMVC这里，<strong>缺省的Servlet是DispatcherServlet</strong> → localhost:8080/1.jpg找的是DispatcherServlet而不是default</li></ul></li></ul><p><img src="/images/Spring-MVC/403d1b64d31a4723bd7eae43f8647b45.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li>解决办法：<ul><li>SpringMVC有提供对应的类，提供的是<code>ResourceHandler </code>,需要我们自己来配置<ul><li>处理静态资源</li><li>配置其映射范围</li></ul></li></ul></li><li>之前的做法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">controller目录下：</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;pic/storage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PictureStorageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StorageService storageService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;fetch/&#123;filename&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fetchImage</span><span class="params">(HttpServletResponse response,</span></span><br><span class="line"><span class="params">                           <span class="meta">@PathVariable(&quot;filename&quot;)</span>String filename)</span> &#123;</span><br><span class="line">        storageService.show(response, filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">service目录下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StorageService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(HttpServletResponse response, String filename)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> StorageData <span class="title function_">create</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StorageServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StorageService</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;d:/tmp&quot;)</span></span><br><span class="line">    String path;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> StorageData <span class="title function_">create</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机获取一个 UUID，有极小的概率会重复</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">savedFileName</span> <span class="operator">=</span> uuid + <span class="string">&quot;.jpeg&quot;</span>;</span><br><span class="line">        file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(path, savedFileName));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// http://localhost:8083/wx/storage/fetch/yq5f2kgrno9q1eoyhz1u.jpeg</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">urlPrefix</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8080/demo6/wx/storage/fetch/&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> urlPrefix + savedFileName;</span><br><span class="line">        <span class="type">StorageData</span> <span class="variable">storageData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StorageData</span>(<span class="literal">null</span>, savedFileName, file.getOriginalFilename(),</span><br><span class="line">                file.getContentType(), file.getSize(), url, <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//storageMapper.insert(storageData); // 略，插入到数据库中，并且获得自增的主键封装给id</span></span><br><span class="line">        <span class="keyword">return</span> storageData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(HttpServletResponse response, String filename)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path, filename);</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((length = fileInputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(bytes, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>SpringMVC中的方法<ul><li>注册<code>ResourceHandler</code>使用<code>ResourceHandlerRegistry</code><ul><li><code>addResourceHandler</code>：<strong>配置ResourceHandler的映射范围</strong></li><li><code>addResourceLocations</code>：<strong>告知当前ResourceHandler你的资源文件处于什么位置</strong></li><li><code>**</code> <strong>代表多级任意url</strong></li><li><strong>location写的时候注意：最后的位置<code>/</code>不要漏掉</strong></li></ul></li><li><strong>建议使用文件路径</strong><ul><li>过去应用程序打包的时候打包为<code>wa</code>r包，后面我们使用SpringBoot应用 → 应用程序打包的时候是<code>jar</code>包</li></ul></li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">// 功能有：@Configuration + 使用SpringMVC的相关配置</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.coo1heisenberg.demo6.controller&quot;)</span></span><br><span class="line"><span class="comment">// WebMvcConfigurer接口：MVC相关的配置要用到这个接口提供的方法和参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果要使用SpringMVC的文件接收，接收MultipartFile的话，</span></span><br><span class="line"><span class="comment">     * 需要向容器中注册MultipartResolver组件</span></span><br><span class="line"><span class="comment">     * 处理MultipartFile封装过程中，需要使用这个组件</span></span><br><span class="line"><span class="comment">     * 而这个组件 → ac.getBean(beanName)</span></span><br><span class="line"><span class="comment">     * beanName=multipartResolver → 也就意味着组件名称只能叫multipartResolver</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * addResourceHandler()：配置的是path</span></span><br><span class="line"><span class="comment">         * addResourceLocations()：配置的是location</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * localhost:8080/demo6/pic/1.jpg</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * localhost:8080/demo6/pic/2.jpg</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * pic/** : 匹配多级任意值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果指定文件路径，需要加上 file: 这样的前缀</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * location最后要加上一个 /</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pic/*&quot;</span>).addResourceLocations(<span class="string">&quot;file:d:/tmp/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果指定类加载路径（target/artifactid-version/WEB-INF/classes），要增加classpath：这样的前</span></span><br><span class="line"><span class="comment">         * 缀</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         <span class="comment">// 得先进行编译</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pic2/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果指定web资源路径（target/artifactid-version），就不要增加前缀，如果要指定根路径，只写 / 就行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Filter"><a class="headerlink" href="#Filter"></a>Filter</h2><ul><li>Filter和SpringMVC之间的关系：<strong>本质上就是Filter和Servlet之间的关系</strong>，执行SpringMVC的核心<code>DispatcherServlet</code>的<code>doDispatch</code>方法之前先去执行的是Filter的doFilter方法</li><li>SpringMVC给我们提供了一个抽象类<code>OncePerRequestFilter</code> → 实现了Filter接口 → 里面包含了doFilter方法的实现（非抽象方法）<ul><li><code>OncePerRequestFilter</code>能够保证<code>doFilterInternal</code>只执行一次</li><li>相当于之前在JavaEE阶段的<code>doFilter</code>方法</li><li>避免因为JavaEE容器的原因导致Filter会执行多次</li></ul></li></ul><p>eg：</p><ul><li>配置<code>ApplicationInitialization</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">    <span class="comment">// 提供Filter的配置 → 告知web应用，你有哪个或者哪些Filter</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;<span class="keyword">new</span> <span class="title class_">CustomFilter</span>()&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置<code>filter</code>目录下的<code>CustomFilter</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                    HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                    FilterChain filterChain)</span> </span><br><span class="line">                                    <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 相当于之前在JavaEE阶段的doFilter方法</span></span><br><span class="line">        <span class="comment">// 避免因为JavaEE容器的原因导致Filter会执行多次</span></span><br><span class="line">        <span class="comment">// OncePerRequestFilter能够保证doFilterInternal只执行一次</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了CustomFilter&quot;</span>);</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SpringMVC有提供一个处理字符集的Filter → <code>CharacterEncodingFilter</code>，<strong>也是继承了OncePerRequestFilter</strong></li></ul><p>eg：</p><ul><li>配置<code>ApplicationInitialization</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">    <span class="comment">// 提供Filter的配置 → 告知web应用，你有哪个或者哪些Filter</span></span><br><span class="line">    <span class="comment">// return new Filter[]&#123;new CustomFilter()&#125;;</span></span><br><span class="line">    <span class="type">CharacterEncodingFilter</span> <span class="variable">characterEncodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 强制设置utf-8</span></span><br><span class="line">    characterEncodingFilter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    characterEncodingFilter.setForceEncoding(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;characterEncodingFilter&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="HandlerInterceptor"><a class="headerlink" href="#HandlerInterceptor"></a>HandlerInterceptor</h2><ul><li>Handler的拦截器，在Handler执行之前做的拦截，是SpringMVC提供的拦截器<br><img src="/images/Spring-MVC/926c92066267461ca0b5f04a20fd36cd.png" alt="在这里插入图片描述" loading="lazy"><br><img src="/images/Spring-MVC/1a840e5a19494107840b4ab6f54e6a87.png" alt="在这里插入图片描述" loading="lazy"></li><li>HandlerMapping起作用 → <code>HandlerExecutionChain</code>实例</li><li>每次发送请求：都会生成新的<code>HandlerExecutionChain</code>的实例<ul><li>封装了<code>Handler</code></li><li>封装了多个<code>HandlerInterceptor</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandlerExecutionChain</span> &#123;</span><br><span class="line">  <span class="comment">// Handler</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Object handler;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//多个HandlerInterceptor</span></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="keyword">private</span> HandlerInterceptor[] interceptors;</span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="keyword">private</span> List&lt;HandlerInterceptor&gt; interceptorList;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 标记（记号）</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> interceptorIndex;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  interceptorIndex就是一个标记，标记HandlerInterceptorList或数组中哪一些preHandle返回值为true，</span></span><br><span class="line"><span class="comment">  提供的是下标（序号）</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/Spring-MVC/6d62dff1cf6245218b4b29a12b955c61.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li><strong>配置HandlerInterceptor</strong>：<ul><li>实现<code>HandlerInterceptor</code>接口<ul><li><code>preHandle</code> → <strong>在Handler执行之前执行的</strong>，返回值为<code>boolean</code><ul><li>如果返回值为true则继续流程<ul><li>如果返回值为false则中断流程；会去执行返回值为true的部分的afterCompletion</li></ul></li><li>如果有多个HandlerInterceptor，preHandle方法是正序遍历</li></ul></li><li><code>Handler</code> → 通常就<strong>是Controller组件中的Handler方法</strong></li><li><code>postHandle</code> → <strong>在Handler之后执行的</strong><ul><li>如果执行不到Handler（前面的preHandle返回值为false），那么一个postHandle都执行不到</li><li>如果能够执行到Handler就能够执行到全部的postHandle</li><li>如果有多个HandlerInterceptor，postHandle方法是倒序遍历</li></ul></li><li><code>afterCompletion</code> → <strong>执行完postHandle、preHandle返回值为false</strong><ul><li>执行完postHandle之后执行afterCompletion，能够执行到全部的afterCompletion</li><li><strong>preHandle返回值为false的时候执行afterCompletion的话，执行的是preHandle返回值为true的部分afterCompletion</strong></li><li>如果有多个HandlerInterceptor，afterCompletion方法是倒序遍历</li></ul></li></ul></li></ul></li><li>配置HandlerInterceptor以及其作用范围<ul><li>WebMvcConfigurer接口中的方法：<code>getInterceptors</code></li></ul></li></ul><p>eg：</p><ul><li>在<code>WebConfiguration</code>中配置<code>HandlerInterceptor</code><br><img src="/images/Spring-MVC/926c92066267461ca0b5f04a20fd36cd.png" alt="在这里插入图片描述" loading="lazy"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">// 功能有：@Configuration + 使用SpringMVC的相关配置</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.coo1heisenberg.demo7.controller&quot;)</span></span><br><span class="line"><span class="comment">// WebMvcConfigurer接口：MVC相关的配置要用到这个接口提供的方法和参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 默认的作用范围是 /**</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">HandlerInterceptor1</span>()).addPathPatterns(<span class="string">&quot;/hello&quot;</span>);</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">HandlerInterceptor2</span>()).addPathPatterns(<span class="string">&quot;/hello/**&quot;</span>);</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">HandlerInterceptor3</span>()).addPathPatterns(<span class="string">&quot;/goodbye&quot;</span>);</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">HandlerInterceptor4</span>()).addPathPatterns(<span class="string">&quot;/goodbye/**&quot;</span>);</span><br><span class="line">        <span class="comment">//registry.addInterceptor(new HandlerInterceptor5()) //.addPathPatterns(&quot;/**&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>interceptor</code>目录下的<code>handlerInterceptor1/2/3/4</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandlerInterceptor1</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandlerInterceptor2</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandlerInterceptor3</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandlerInterceptor4</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle4&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Filter与HandlerInterceptor之间的对比</strong>：</p><ul><li>实现的功能都是类似的：<ul><li><strong>Filter是在Servlet之前、之后都可以执行一些业务</strong></li><li><strong>HandlerInterceptor是在Handler之前和之后可以执行一些业务</strong></li></ul></li><li>如果访问不到对应的Handler，Filter可以执行到；如果没有对应的Handler处理对应的请求，HandlerExecutionChain也为空</li><li><code>HandlerInterceptor</code>的使用和<code>Filter</code>不一样 → 容器 → 注册进去，可以维护和其他组件之间的依赖关系（成员变量注入容器中的其他组件） → 取出来的时候其成员变量就已经赋值了</li></ul><hr><h2 id="异常处理"><a class="headerlink" href="#异常处理"></a>异常处理</h2><ul><li>在Handler中制造异常</li><li>如果不做异常处理：不友好、有可能泄露信息</li></ul><ol><li><strong>HandlerExceptionResolver</strong><ul><li>处理全局的全部异常</li><li>返回值为<strong>ModelAndView</strong></li></ul></li></ol><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomHandlerExceptionResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerExceptionResolver</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">resolveException</span><span class="params">(HttpServletRequest httpServletRequest,</span></span><br><span class="line"><span class="params">                                         HttpServletResponse httpServletResponse,</span></span><br><span class="line"><span class="params">                                         Object handler, // 抛出异常的handler</span></span><br><span class="line"><span class="params">                                         Exception e)</span> &#123; <span class="comment">// handler抛出的异常</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;/exception.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ArithmeticException) &#123;</span><br><span class="line">            <span class="comment">// 算数异常 做特定的处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span>  NullPointerException) &#123;</span><br><span class="line">            <span class="comment">// 空指针异常 做特定的处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 能否响应Json字符串</span></span><br><span class="line">        <span class="comment">// httpServletResponse.getWriter().println(jsonStr);</span></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>应用程序正在升级维护，请稍后<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>@ExceptionHandler</strong> → 建议<ul><li>处理的<strong>特定类型的异常</strong></li><li>返回值可以为ModelAndView，也可以为String或Json字符串</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ExceptionHandler &#123;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span> <span class="comment">// @RestControllerAdvice == @ResponseBody + @ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionControllerAdvice</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面两个都是响应ModelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = ArithmeticException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">arithmeticExceptionResolveMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;/exception.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = ArithmeticException.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">arithmeticExceptionResolveMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/exception.jsp&quot;</span>; <span class="comment">// //返回值作为ModelAndView中的视图名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应Json字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> BaseRespVo <span class="title function_">arithmeticExceptionResolveMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.fail(<span class="string">&quot;除零异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="SpringMVC核心流程"><a class="headerlink" href="#SpringMVC核心流程"></a>SpringMVC核心流程</h2><ul><li><code>DispatcherServlet</code>处理我们（几乎）全部请求</li><li><code>Controller</code>组件中的方法处理请求，这也是我们主要开发的内容</li></ul><h3 id="流程图"><a class="headerlink" href="#流程图"></a>流程图</h3><p><img src="/images/Spring-MVC/a2bb1dae439540d1836d2286c0e18f8b.png" alt="在这里插入图片描述" loading="lazy"><br><strong>DispatcherServlet和ApplicationContext的关系</strong>：</p><ul><li>方法存在于Controller组件中</li><li>Controller组件存储在容器中 ，容器就是ApplicationContext</li><li>当我们发送请求的时候，会执行到这些方法；当我们发送请求的时候，DispatcherServlet处理我们全部的请求，  DispatcherServlet → 方法</li><li><strong>Handler</strong>：<strong>处理器，method1、method2、method3</strong>其实就是处理器，处理我们的请求，也称之为<strong>HandlerMethod</strong>（Handler方法）</li><li>DispatcherServlet如果能够找到ApplicationContext（容器），就可以执行到容器中的Controller组件中Handler（方法）</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02 Spring事务（转载自之前的CSDN）</title>
      <link href="/2024/05/13/Spring%E4%BA%8B%E5%8A%A1/"/>
      <url>/2024/05/13/Spring%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1>Spring事务</h1><h2 id="使用Spring框架对Mybatis整合"><a class="headerlink" href="#使用Spring框架对Mybatis整合"></a>使用Spring框架对Mybatis整合</h2><p><img src="../images/Spring%E4%BA%8B%E5%8A%A1/c847550c30b047aaaf6388f14570a888.png" alt="在这里插入图片描述" loading="lazy"><br><strong>上图中：绿色是手动注册的组件，黄色的是MapperScannerConfigure注册的组件</strong></p><ol><li><strong>引入依赖</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--Spring整合Mybatis依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.15.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--druid依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--可以监控程序的运行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>组件注册</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.coo1heisenberg.demo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfiguration</span> &#123;</span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public SqlSessionFactory sqlSessionFactory() &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder()</span></span><br><span class="line"><span class="comment">//                    .build(Resources.getResourceAsStream(&quot;mybatis.xml&quot;));</span></span><br><span class="line"><span class="comment">//            return sqlSessionFactory;</span></span><br><span class="line"><span class="comment">//        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return null;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mybatis-spring这个依赖提供了一个类，能够注册sqlSessionFactory组件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * sqlSessionFactoryBean implements FactoryBean&lt;sqlSessionFactory&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/coo1heisenberg?useSSL=false&amp;characterEncoding=utf8&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">configurer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        <span class="comment">// 使用set方法提供一些信息</span></span><br><span class="line">        <span class="comment">// 就会根据这些信息向mapper中注册组件</span></span><br><span class="line">        configurer.setSqlSessionFactoryBeanName(<span class="string">&quot;sqlSessionFactory&quot;</span>);</span><br><span class="line">        <span class="comment">// sqlSessionFactory = applicationContext.getBean(beanName);</span></span><br><span class="line"></span><br><span class="line">        configurer.setBasePackage(<span class="string">&quot;com.coo1heisenberg.demo2.mapper&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> configurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>在Service中可以直接注册Mapper</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    SqlSessionFactory sqlSessionFactory;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountMapper accountMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">transfer</span><span class="params">(Integer fromId, Integer destId, Double money)</span> &#123;</span><br><span class="line"><span class="comment">//        SqlSession sqlSession = sqlSessionFactory.openSession(true);</span></span><br><span class="line"><span class="comment">//        AccountMapper mapper = sqlSession.getMapper(AccountMapper.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Double</span> <span class="variable">fromMoney</span> <span class="operator">=</span> accountMapper.selectByPrimaryKey(fromId) - money;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">destMoney</span> <span class="operator">=</span> accountMapper.selectByPrimaryKey(destId) + money;</span><br><span class="line"></span><br><span class="line">        accountMapper.upDate(fromId, fromMoney);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        accountMapper.upDate(destId, destMoney);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>测试文件</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = AppConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisSpringTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        accountService.transfer(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：<strong>Spring在Mybatis执行mapper的方法之后会立刻提交事务，而有时需要将多个方法放到一个事务里</strong>。</p><hr><h2 id="事务的核心接口"><a class="headerlink" href="#事务的核心接口"></a>事务的核心接口</h2><ul><li><strong>PlatformTransactionManager 平台事务管理器</strong></li><li><strong>TransactionStatus 事务状态</strong></li><li><strong>TransactionDefinition 事务定义</strong></li></ul><h3 id="PlatformTransactionManager平台事务管理器"><a class="headerlink" href="#PlatformTransactionManager平台事务管理器"></a>PlatformTransactionManager平台事务管理器</h3><ul><li>平台事务管理器，Spring要管理事务，必须使用事务管理器</li><li>有多种实现，通过实现此接口，Spring可以管理任何实现了这些接口的事务</li><li>常见的事务管理器的实现：<ul><li><code>DataSourceTransactionManager</code>，<strong>jdbc开发时事务管理器</strong>，使用<code>JdbcTemplate</code>、<code>MyBatis（SSM）</code></li><li><code>HibernateTransactionManager</code>，<strong>Hibernate开发时事务管理器</strong>，整合<code>Hibernate（SSH）</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PlatformTransactionManager</span> <span class="keyword">extends</span> <span class="title class_">TransactionManager</span> &#123;</span><br><span class="line">  <span class="comment">// 开启事务</span></span><br><span class="line">    TransactionStatus <span class="title function_">getTransaction</span><span class="params">(<span class="meta">@Nullable</span> TransactionDefinition var1)</span> </span><br><span class="line">    <span class="keyword">throws</span> TransactionException;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 提交事务</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(TransactionStatus var1)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 回滚事务</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(TransactionStatus var1)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="TransactionStatus事务状态"><a class="headerlink" href="#TransactionStatus事务状态"></a>TransactionStatus事务状态</h3><ul><li>获取事务的状态（回滚点、是否完成、是否新事务、是否回滚）属性，是一个过程值</li><li>这个一般不需要关注</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionStatus</span> <span class="keyword">extends</span> <span class="title class_">TransactionExecution</span></span><br><span class="line">    , SavepointManager, Flushable &#123;</span><br><span class="line">    <span class="comment">// 是否有保存点</span></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">hasSavepoint</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="TransactionDefinition事务定义"><a class="headerlink" href="#TransactionDefinition事务定义"></a>TransactionDefinition事务定义</h3><ul><li>定义事务的名称、隔离级别、传播行为、超时时间长短、只读属性等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionDefinition</span> &#123;</span><br><span class="line"><span class="comment">// 定义了一些成员变量</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">PROPAGATION_REQUIRED</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">PROPAGATION_SUPPORTS</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">PROPAGATION_MANDATORY</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">PROPAGATION_REQUIRES_NEW</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">PROPAGATION_NOT_SUPPORTED</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">PROPAGATION_NEVER</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">PROPAGATION_NESTED</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">ISOLATION_DEFAULT</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">ISOLATION_READ_UNCOMMITTED</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">ISOLATION_READ_COMMITTED</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">ISOLATION_REPEATABLE_READ</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">ISOLATION_SERIALIZABLE</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">TIMEOUT_DEFAULT</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是提供默认值和对应的方法</span></span><br><span class="line"><span class="comment">// jdk1.8之后才提供的default</span></span><br><span class="line">  <span class="keyword">default</span> <span class="type">int</span> <span class="title function_">getPropagationBehavior</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span> <span class="type">int</span> <span class="title function_">getIsolationLevel</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span> <span class="type">int</span> <span class="title function_">getTimeout</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">isReadOnly</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="keyword">default</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> TransactionDefinition <span class="title function_">withDefaults</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> StaticTransactionDefinition.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="事务的传播行为"><a class="headerlink" href="#事务的传播行为"></a>事务的传播行为</h3><ul><li>指多个方法之间如何来共享事务：<strong>发生异常的情况，谁提交谁回滚</strong></li><li><code>REQUIRED</code> <strong>（默认的事务传播行为）</strong><ul><li>一荣俱荣，同生共死<ul><li>要么一起提交，要么一起回滚</li></ul></li></ul></li><li><code>REQUIRES_NEW</code><ul><li>自私型<ul><li>部不会影响内部，内部会影响外围</li></ul></li><li><strong>内部的方法更重要</strong></li></ul></li><li><code>NESTED</code><ul><li>无私型<ul><li>外围会影响内部，内部不会影响外围</li></ul></li><li><strong>外部的方法更重要</strong></li></ul></li><li><strong>其他传播行为</strong></li></ul><table><thead><tr><th>传播行为</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>PROPAGATION_SUPPORTS</td><td style="text-align:left">支持当前事务，假设当前没有事务，就以非事务方式运行</td></tr><tr><td>PROPAGATION_MANDATORY</td><td style="text-align:left">支持当前事务，假设当前没有事务，就抛出异常</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td style="text-align:left">以非事务方式运行操作。假设当前存在事务，就把当前事务挂起</td></tr><tr><td>PROPAGATION_NEVER</td><td style="text-align:left">以非事务方式运行，假设当前存在事务，则抛出异常</td></tr></tbody></table><p>eg：<br><img src="../images/Spring%E4%BA%8B%E5%8A%A1/47388b01f2ca4ce5b3a68d37b1b07b67.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li><code>config</code>目录下的<code>AppConfiguration</code>注册组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">    <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">    transactionManager.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> transactionManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>service</code>目录下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">PlatformTransactionManager platformTransactionManager;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">transfer</span><span class="params">(Integer fromId, Integer destId, Double money)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Double</span> <span class="variable">fromMoney</span> <span class="operator">=</span> accountMapper.selectByPrimaryKey(fromId) - money;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">destMoney</span> <span class="operator">=</span> accountMapper.selectByPrimaryKey(destId) + money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启事务</span></span><br><span class="line">    <span class="type">TransactionStatus</span> <span class="variable">status</span> <span class="operator">=</span> platformTransactionManager</span><br><span class="line">            .getTransaction(TransactionDefinition.withDefaults());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        accountMapper.upDate(fromId, fromMoney);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        accountMapper.upDate(destId, destMoney);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// 事务的回滚</span></span><br><span class="line">        platformTransactionManager.rollback(status);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交事务并关闭</span></span><br><span class="line">    platformTransactionManager.commit(status);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="TransactionTemplate"><a class="headerlink" href="#TransactionTemplate"></a>TransactionTemplate</h3><ul><li>事务的模板，采用事务模板提供的方法来使用事务</li><li>对上面事务的传播行为做一系列的封装</li><li>下图的绿色是需要写的业务代码<br><img src="../images/Spring%E4%BA%8B%E5%8A%A1/317391c4a0184850a6aa3f43b9285957.png" alt="在这里插入图片描述" loading="lazy"></li></ul><p>eg：</p><ul><li><code>config</code>目录下的<code>AppConfiguration</code>注册组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> TransactionTemplate <span class="title function_">transactionTemplate</span><span class="params">(PlatformTransactionManager transactionManager)</span> &#123;</span><br><span class="line">    <span class="type">TransactionTemplate</span> <span class="variable">transactionTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionTemplate</span>();</span><br><span class="line">    transactionTemplate.setTransactionManager(transactionManager);</span><br><span class="line">    <span class="keyword">return</span> transactionTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>service</code>目录下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">transfer</span><span class="params">(Integer fromId, Integer destId, Double money)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Double</span> <span class="variable">fromMoney</span> <span class="operator">=</span> accountMapper.selectByPrimaryKey(fromId) - money;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">destMoney</span> <span class="operator">=</span> accountMapper.selectByPrimaryKey(destId) + money;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        TransactionCallback&lt;Object&gt; transactionCallback = <span class="keyword">new</span> <span class="title class_">TransactionCallback</span>&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">doInTransaction</span><span class="params">(TransactionStatus transactionStatus)</span> &#123;</span><br><span class="line">                accountMapper.upDate(fromId, fromMoney);</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">                accountMapper.upDate(destId, destMoney);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        transactionTemplate.execute(transactionCallback);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="Transactional注解"><a class="headerlink" href="#Transactional注解"></a>Transactional注解</h3><ul><li>采用AOP的方式给容器的组件生成代理对象</li><li><code>@Transactional</code>注解的<strong>ElementType为TYPE和METHOD</strong>，意味着可以写<strong>在类上或方法上</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Transactional &#123;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;transactionManager&quot;)</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String <span class="title function_">transactionManager</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Propagation <span class="title function_">propagation</span><span class="params">()</span> <span class="keyword">default</span> Propagation.REQUIRED;</span><br><span class="line"></span><br><span class="line">    Isolation <span class="title function_">isolation</span><span class="params">()</span> <span class="keyword">default</span> Isolation.DEFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">timeout</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">readOnly</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt;[] rollbackFor() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] rollbackForClassName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt;[] noRollbackFor() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] noRollbackForClassName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>使用注解</p><ol><li>使用注解前，需要<strong>先打开事务的注解驱动</strong></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.coo1heisenberg.demo4&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfiguration</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>直接使用<code>@Transactional</code>注解</strong>，可以使用注解提供的<strong>属性配置事务的TransactionDefinition</strong></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// @Transactional(readOnly = true)</span></span><br><span class="line"><span class="comment">// @Transactional(timeout = 4)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">transfer</span><span class="params">(Integer fromId, Integer destId, Double money)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">Double</span> <span class="variable">fromMoney</span> <span class="operator">=</span> accountMapper.selectByPrimaryKey(fromId) - money;</span><br><span class="line">       <span class="type">Double</span> <span class="variable">destMoney</span> <span class="operator">=</span> accountMapper.selectByPrimaryKey(destId) + money;</span><br><span class="line"></span><br><span class="line">       accountMapper.upDate(fromId, fromMoney);</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">       accountMapper.upDate(destId, destMoney);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 Spring-AOP（转载自之前的CSDN）</title>
      <link href="/2024/05/13/Spring-AOP/"/>
      <url>/2024/05/13/Spring-AOP/</url>
      
        <content type="html"><![CDATA[<h1>动态代理原理</h1><p><img src="/images/Spring-AOP/319d76cf47c541d4b1c4822cf770614b.png" alt="在这里插入图片描述" loading="lazy"></p><hr><h1>AOP</h1><ul><li>Aspect Oriented Programming</li><li>面向切面编程，是指<strong>通过预编译方式和运行期动态代理实现程序功能的统一维护</strong>的一种技术<ul><li><strong>面向切面编程：通过切入点指定容器中的组件中的方法，按照通知的方式做增强</strong></li></ul></li><li>AOP是OOP（面向对象编程）的延续</li><li>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</li></ul><h2 id="AOP和OOP"><a class="headerlink" href="#AOP和OOP"></a>AOP和OOP</h2><ul><li>OOP 面向对象编程，是Object Oriented Programming的简称</li><li>OOP：通过<strong>继承</strong>来增强</li><li>AOP：通过<strong>切面</strong>来增强</li></ul><h2 id="AOP的特点"><a class="headerlink" href="#AOP的特点"></a>AOP的特点</h2><ul><li>AOP采取横向抽取机制，取代了传统纵向继承体系重复性代码</li><li>Spring AOP使用纯Java实现，不需要专门的编译过程和类加载器，在运行期通过代理方式向目标类（委托类）织入增强代码</li><li>SpringAOP使用的是JDK动态代理和CGlib动态代理<ul><li>如果有实现接口，使用的就是JDK动态代理，如果没有实现接口使用的就是CGlib动态代理</li></ul></li></ul><h2 id="AOP的应用场景"><a class="headerlink" href="#AOP的应用场景"></a>AOP的应用场景</h2><ul><li>这场景通常是<strong>多次反复出现而又相对来说比较繁琐</strong>的部分<ul><li>事务管理、性能监视、安全检查、缓存、日志等</li></ul></li></ul><h2 id="AOP的编程术语"><a class="headerlink" href="#AOP的编程术语"></a>AOP的编程术语</h2><ul><li><strong>Target</strong>：目标类 （需要被代理的类，委托类）</li><li><strong>Proxy</strong>：代理类 （动态代理生成的）</li><li><strong>JoinPoint</strong>：连接点，指被代理对象里那些可能会被增强的点（方法）如所有方法（候选的可能被增强候选点）<ul><li><strong>获取增强过程中的信息</strong></li><li>比如可以获取<code>Proxy</code>、<code>target</code>、<code>method</code>、<code>args</code>等信息</li></ul></li><li><strong>PointCut</strong>：切入点，已经被增强的连接点。<ul><li><strong>获取指定增强的方法</strong></li><li>AOP的目标 → <strong>容器中的组件能够增强</strong></li><li>谁做增强（能够细化到方法级别）→ <strong>Pointcut切入点圈定增强范围 做记号</strong></li><li>做什么样的增强 → <strong>Advice通知 → 指导切入点指定的方法做一个什么样的增强</strong></li></ul></li><li><strong>Advice</strong>：通知(<strong>具体的增强的代码</strong>)。代理对象执行到Joinpoint所做的事情。</li><li><strong>Aspect</strong>：切面，<strong>是切入点和通知的结合</strong> （<strong>切面是一个特殊的面：一个切入点和一个通知组成一个特殊的面</strong>）</li><li><strong>weaver</strong>：织入（植入）是指把advice应用到目标对象来创建新的代理对象的过程</li></ul><hr><h2 id="AOP的实现"><a class="headerlink" href="#AOP的实现"></a>AOP的实现</h2><ol><li><strong>动态代理</strong><ul><li><img src="/images/Spring-AOP/880ec824c10d4a1dbe7f4e334688ba88.png" alt="在这里插入图片描述" loading="lazy"></li></ul></li><li><strong>SpringAOP</strong><ul><li><img src="/images/Spring-AOP/ea8cb7c4a258427c91be943c7deaeabd.png" alt="在这里插入图片描述" loading="lazy"></li><li>Spring官方文档提供的方式，但是它<strong>建议你使用另一种方式AspectJ</strong></li></ul></li><li><strong>AspectJ</strong></li></ol><hr><h3 id="SpringAOP"><a class="headerlink" href="#SpringAOP"></a>SpringAOP</h3><p>在容器中注册3个组件：<strong>委托类组件、通知组件、代理组件（ProxyFactoryBean）</strong></p><p>eg：</p><ul><li>使用注解注册委托类组件和通知组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算方法的执行时间</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 组件id customAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomAdvice</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 相当于之前的InvocationHandler的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation methodInvocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行委托类方法</span></span><br><span class="line">        <span class="comment">// 类似于动态代理的method.invoke</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> methodInvocation.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算消耗时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">cost</span> <span class="operator">=</span> end - start;</span><br><span class="line">        System.out.println(methodInvocation.getMethod().getName() + <span class="string">&quot;执行时间为：&quot;</span> + cost);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过代理组件注册代理组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.coo1heisenberg.demo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ProxyFactoryBean <span class="title function_">userServiceProxy</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="type">ProxyFactoryBean</span> <span class="variable">proxyFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactoryBean</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 告知其委托类组件有哪些</span></span><br><span class="line">        proxyFactoryBean.setTarget(userService);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 告知其通知组件有哪些 -&gt; 提供的是通知组件的名称、id</span></span><br><span class="line">        proxyFactoryBean.setInterceptorNames(<span class="string">&quot;customAdvice&quot;</span>);</span><br><span class="line">        <span class="comment">// beanFactory.getBean(&quot;customAdvice&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 它里面的getObject会根据提供的值生成代理对象</span></span><br><span class="line">        <span class="keyword">return</span> proxyFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>单元测试要从容器中指定代理组件取出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = AppConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAOPTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userServiceProxy&quot;)</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.sayHello(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="AspectJ"><a class="headerlink" href="#AspectJ"></a>AspectJ</h3><h4 id="切面组件"><a class="headerlink" href="#切面组件"></a>切面组件</h4><ul><li><strong>增加AspectJ的注解开关</strong> → 配置类上增加一个注解<code>@EnableAspectJAutoProxy</code></li><li><strong>把组件标记为切面组件</strong> → <code>@Aspect</code></li></ul><p>eg：</p><ul><li>增加AspectJ的注解开关</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.coo1heisenberg.demo3&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">//AspectJ注解使用的开关</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>把组件标记为切面组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomAspect</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="切入点表达式"><a class="headerlink" href="#切入点表达式"></a>切入点表达式</h4><ul><li>引入<code>Aspectjweaver</code>的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在切面组件中使用<code>@Pointcut</code>注解<ul><li>value属性：切入点表达式</li><li>方法名：作为切入点id</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Pointcut &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">argNames</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>execution</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomAspect</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * execution(修饰符 返回值 包名 + 类名 + 方法名（形参）)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="meta">@Pointcut(value = &quot;execution(public void com.coo1heisenberg.demo3.service.UserServiceImpl.sayHello(java.lang.String))&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以增强多个方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 越具体，匹配范围越小，越宽泛，匹配范围越广</span></span><br><span class="line"><span class="comment">     * 通配符：</span></span><br><span class="line"><span class="comment">     *  - 修饰符：</span></span><br><span class="line"><span class="comment">     *      - 可以省略不写，如果省略不写代表任意修饰符</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  - 返回值：</span></span><br><span class="line"><span class="comment">     *      - 不能省略，但是可以使用通配符 * ，* 代表任意值</span></span><br><span class="line"><span class="comment">     *      - 如果是引用类型，要写全限定类名；全限定类名也可以出现通配符 *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  - 包名、类名、方法名：</span></span><br><span class="line"><span class="comment">     *      - 可以使用 * （任意单词的一部分）来通配，也可以使用 .. （代表一部分值省略）来通配</span></span><br><span class="line"><span class="comment">     *      - 头和尾的位置不能使用.. ，但是可以使用 *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  - 形参：</span></span><br><span class="line"><span class="comment">     *      - 省略不写，代表无参方法</span></span><br><span class="line"><span class="comment">     *      - 可以使用 * （任意单个类型的参数）来通配</span></span><br><span class="line"><span class="comment">     *      - 可以使用 .. （代表任意参数，数量任意，类型也任意）来通配</span></span><br><span class="line"><span class="comment">     *      - 如果是引用类型，要写全限定类名，全限定类名中也可以使用 通配符*</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut1</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>@annotation</strong><ul><li><code>@annotation(自定义注解的全限定类名)</code></li><li>该注解写在哪个方法上，哪个方法就被划入到切入点范围内</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MethodAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomAspect</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在容器中的组件中找包含特定注解的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.coo1heisenberg.demo3.anno.MethodAnnotation)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>@target</strong><ul><li><code>@annotation(自定义注解的全限定类名)</code></li><li>该注解写在类上，该类下所有的方法都划入到切入点的范围内</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TypeAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomAspect</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在容器中的组件中找包含特定注解的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.coo1heisenberg.demo3.anno.MethodAnnotation)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在容器中的组件中找到包含特定注解的组件，特定的注解是自己定义的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@target(com.coo1heisenberg.demo3.anno.TypeAnnotation)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut2</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<strong>所有的切入点都是为了找特定的方法的</strong>。</p><hr><h4 id="AspectJ切面"><a class="headerlink" href="#AspectJ切面"></a>AspectJ切面</h4><ul><li>在切面类中配置切面组件和通知方法</li><li>切入点和通知要成对出现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public void com.coo1heisenberg.demo3.service.UserServiceImpl.sayGoodBye(java.lang.String))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * before通知</span></span><br><span class="line"><span class="comment">     * 返回值：void</span></span><br><span class="line"><span class="comment">     * 方法名：任意去写</span></span><br><span class="line"><span class="comment">     * 形参：joinPoint连接点 (可写可不写)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切入点和通知要成对出现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在委托类方法执行之前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * after通知</span></span><br><span class="line"><span class="comment">     * 返回值：void</span></span><br><span class="line"><span class="comment">     * 方法名：任意去写</span></span><br><span class="line"><span class="comment">     * 形参：joinPoint连接点 (可写可不写)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 相当于try-catch中的finally，它是一定会执行到的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After(&quot;pointcut1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在委托类方法执行之后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * afterReturning通知</span></span><br><span class="line"><span class="comment">     * 返回值：void</span></span><br><span class="line"><span class="comment">     * 方法名：任意去写</span></span><br><span class="line"><span class="comment">     * 形参：Object(委托类方法的执行结果)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 获得委托类方法返回的结果</span></span><br><span class="line"><span class="comment">     * 在return之后执行的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pointcut1()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object result)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after returning : &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * afterThrowing通知</span></span><br><span class="line"><span class="comment">     * 返回值：void</span></span><br><span class="line"><span class="comment">     * 方法名：任意去写</span></span><br><span class="line"><span class="comment">     * 形参：Exception/Throwable(委托类方法执行过程中抛出异常)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 能够获得委托类方法抛出的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pointcut1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after throwing : &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * around通知</span></span><br><span class="line"><span class="comment">     * 返回值：Object，就是代理对象的返回结果</span></span><br><span class="line"><span class="comment">     * 方法名：任意去写</span></span><br><span class="line"><span class="comment">     * 形参：ProceedingJoinPoint连接点 (必须写) → 提供了proceed方法，执行的是委托类的代码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * around通知可以包含before、after、afterReturning、afterThrowing部分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类似于前面InvocationHandler的invoke，类似于MethodInterceptor的invoke</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="comment">// before的部分</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before部分&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            proceed = joinPoint.proceed(); <span class="comment">// 执行委托类方法，委托类方法的返回值是proceed</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 这里执行afterReturning</span></span><br><span class="line">            System.out.println(<span class="string">&quot;afterReturning部分&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">// afterThrowing</span></span><br><span class="line">            System.out.println(<span class="string">&quot;afterThrowing部分&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// after部分</span></span><br><span class="line">            System.out.println(<span class="string">&quot;after部分&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="JoinPoint连接点"><a class="headerlink" href="#JoinPoint连接点"></a>JoinPoint连接点</h4><ul><li>获取增强过程中的一些值<ul><li><strong>Signature 方法</strong></li><li><strong>Arguments 参数</strong></li><li><strong>This 代理对象</strong></li><li><strong>Target 委托类对象</strong></li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;mypointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="comment">//Signature 方法的描述</span></span><br><span class="line">    <span class="comment">//This 代理对象</span></span><br><span class="line">    <span class="comment">//Target 委托类对象</span></span><br><span class="line">    <span class="comment">//Arguments 参数</span></span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> joinPoint.getThis();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> joinPoint.getTarget();</span><br><span class="line">    Object[] args = joinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;signature:&quot;</span> + signature.getName());</span><br><span class="line">    System.out.println(proxy.getClass().getName());</span><br><span class="line">    System.out.println(target.getClass().getName());</span><br><span class="line">    System.out.println(Arrays.asList(args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="机制"><a class="headerlink" href="#机制"></a>机制</h3><p><img src="/images/Spring-AOP/a8935bc8f0724961ada7dd0596c25108.png" alt="在这里插入图片描述" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00 Spring_IOC/DI（转载自之前的CSDN）</title>
      <link href="/2024/05/13/Spring-IOC-DI/"/>
      <url>/2024/05/13/Spring-IOC-DI/</url>
      
        <content type="html"><![CDATA[<h1>Spring</h1><ul><li>Spring Framework通常人们称之为Spring</li><li>框架的主要优势之一就是其<strong>分层架构</strong>，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架</li><li>Spring是一个分层的<strong>Java SE/EE full-stack(一站式) 轻量级开源框架</strong></li></ul><p><img src="/images/Spring-IOC-DI/b78789c17985407f861bac811746e37c.png" alt="在这里插入图片描述" loading="lazy"><br>eg：</p><p><img src="/images/Spring-IOC-DI/2467b16a5ddf48379a71148540cb3f12.png" alt="在这里插入图片描述" loading="lazy"><br><strong>上图中AdminServiceImpl类型的实例其实创建了多次，去建立引用关系多次，维护起来比较麻烦，也浪费了内存的空间</strong></p><p>想要做的事情：在整个应用程序中使用同一个adminServiceImpl的实例</p><ul><li>将其放在ConcurrentHashMap中，然后后面每一次使用的时候通过<strong>同一个ConcurrentHashMap</strong>来取</li><li>要保证使用的是同一个ConcurrentHashMap，使用ServletContext保存，并且做到了整个应用程序中的共享</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitializationListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;adminService&quot;</span>, <span class="keyword">new</span> <span class="title class_">AdminServiceImpl</span>());</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;applicationData&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">使用：</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) servletContext.getAttribute(<span class="string">&quot;applicationData&quot;</span>);</span><br><span class="line"><span class="type">AdminService</span> <span class="variable">adminService</span> <span class="operator">=</span> (AdminService) map.get(<span class="string">&quot;adminService&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/Spring-IOC-DI/cad03da6f2774389a577ed4b246a6021.png" alt="在这里插入图片描述" loading="lazy"></p><hr><h2 id="IOC控制反转（存）"><a class="headerlink" href="#IOC控制反转（存）"></a>IOC控制反转（存）</h2><ul><li><code>Inverse of Control</code><ul><li><strong>控制</strong>：实例的生成权<ul><li>应用程序控制实例的生成</li></ul></li><li><strong>反转</strong>：原来是应用程序控制实例的生成，现在把这个过程反转给Spring<ul><li>Spring框架来控制实例的生成</li></ul></li><li><strong>容器</strong>：Spring容器、IOC容器、容器<ul><li>管理的实例</li></ul></li><li><strong>组件</strong>：Spring管理的实例对象可以称为组件</li><li><strong>注册</strong>：提供一些信息给Spring容器，管理这些信息对应的实例<ul><li>这些实例就成为了Spring容器的组件</li></ul></li></ul></li><li>获取依赖对象被反转了，它是被动获取；<ul><li>由Spring去生成实例，并由Spring去管理实例</li></ul></li><li>正转就是自己去new一个对象，自己获取对象</li></ul><hr><h2 id="DI依赖注入（取）"><a class="headerlink" href="#DI依赖注入（取）"></a>DI依赖注入（取）</h2><ul><li>经过了控制反转，Spring容器管理应用程序运行过程中的实例，<strong>从Spring容器中把这些实例取出来，就是依赖注入</strong>。</li><li><strong>核心点：从容器中获得应用程序所需要的实例，并且给应用程序中的成员变量做赋值</strong></li><li>DI这个概念是IOC的延续，DI是在IOC的基础上</li></ul><hr><h2 id="Spring的优点"><a class="headerlink" href="#Spring的优点"></a>Spring的优点</h2><ul><li><strong>方便解耦，简化开发（高内聚低耦合）</strong></li><li><strong>AOP编程的支持</strong></li><li><strong>声明式 事务的支持</strong></li><li>方便程序的测试</li><li>方便集成各种优秀框架</li><li>降低JavaEE API的使用难度</li></ul><hr><h2 id="Spring的核心技术"><a class="headerlink" href="#Spring的核心技术"></a>Spring的核心技术</h2><p><strong>依赖注入</strong>、事件、资源、i18（nternationalizatio）n国际化、校验、数据绑定、类型转换、Spring Expression Language、<strong>AOP（面向切面编程）</strong></p><hr><h2 id="入门案例"><a class="headerlink" href="#入门案例"></a>入门案例</h2><h3 id="入门案例1"><a class="headerlink" href="#入门案例1"></a>入门案例1</h3><ol><li><strong>导入依赖</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入依赖 beans、context、aop、expression、core、jcl 5+1--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring-context--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>提供接口和实现类</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>原先使用实例的时候，是通过构造方法生成的；后续要变更为来源Spring容器</li></ul><ol start="3"><li><strong>在配置文件中注册组件</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring配置文件的名称通常叫application(-xxx).xml--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bean definitions here --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--控制反转--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--id属性 -- 组件在容器中的唯一标识--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--name属性 -- 名称 -- 通常省略不写--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--class 全类名 -- 实现类的全类名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--组件 注册 -- 将实例交给spring管理的过程我们称之为注册--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.coo1heisenberg.demo1.service.UserServiceImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>从容器中取出组件，执行方法</strong><ul><li><strong>ApplicationContext底层封装了ConcurrentHashMap</strong><ul><li><strong>ClassPathXmlApplicationContext加载的是<code>.xml</code>配置文件</strong></li><li><strong>AnnotationConfigApplicationContext加载的是配置类</strong></li></ul></li></ul></li></ol><p><img src="/images/Spring-IOC-DI/c118340f5b894a0ca7637cc4345eab82.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li><strong>方法1：按照组件的id/name取出组件</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// spring容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 初始化容器，并注册组件</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 从容器中取出组件</span></span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService1</span> <span class="operator">=</span> (UserService) applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">userService1.sayHello(<span class="string">&quot;spring&quot;</span>);</span><br><span class="line"><span class="comment">// hello spring</span></span><br></pre></td></tr></table></figure><ul><li><strong>方法2：可以写接口的class，也可以写实现类的class</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以写接口的class，也可以写实现类的class</span></span><br><span class="line"><span class="comment">// 建议写接口</span></span><br><span class="line"><span class="comment">// 如果容器中某个类型的组件只有一个，可以按照类型取出</span></span><br><span class="line"></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService2</span> <span class="operator">=</span> applicationContext.getBean(UserService.class);</span><br></pre></td></tr></table></figure><ul><li><strong>方法3：id + 类型</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService3</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br></pre></td></tr></table></figure><hr><h3 id="入门案例2"><a class="headerlink" href="#入门案例2"></a>入门案例2</h3><ul><li>维护组件之间的依赖关系，在容器中注册dao层和service层组件，并且<strong>service层的组件依赖于dao层组件</strong></li><li><strong>dao类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>service类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>application.xml文件</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.coo1heisenberg.demo1.service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注册userServiceImpl这个类型的组件的时候，实例化的过程会执行set方法（setUserDao）</span></span><br><span class="line"><span class="comment">            这个set方法的形参是UserDao类型的实例，通过id从容器中取出作为形参</span></span><br><span class="line"><span class="comment">            this.userDao = userDao; 给userServiceImpl这个组件的userDao成员变量进行赋值</span></span><br><span class="line"><span class="comment">            -&gt; 依赖注入</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.coo1heisenberg.demo1.dao.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>单元测试类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> applicationContext.getBean(UserDao.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 直接从容器中取出的userDao实例和直接从容器中取出的userService实例中的userDao成员变量是否是同一个</span></span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> applicationContext.getBean(UserService.class);</span><br><span class="line">    <span class="comment">// userDao的地址值与上面的同一个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="注解"><a class="headerlink" href="#注解"></a>注解</h2><h3 id="配置类"><a class="headerlink" href="#配置类"></a>配置类</h3><ul><li>配置类：承担<strong>做通用配置</strong>的功能，同时<strong>在配置类中可以组件注册</strong><ul><li>我们在类定义上增加一些功能性的注解，增加一些通用性的配置</li><li>我们在类中的方法里注册组件</li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类；替代配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 提供配置类，后面初始化容器的时候，加载的就是配置类（不再是配置文件）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里增加功能性的注解</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationConfiguration</span> &#123;</span><br><span class="line"><span class="comment">// 类中的方法做组件的注册</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="组件注册功能（IOC）"><a class="headerlink" href="#组件注册功能（IOC）"></a>组件注册功能（IOC）</h3><h4 id="类直接注册"><a class="headerlink" href="#类直接注册"></a>类直接注册</h4><ul><li><code>@Component</code>组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span><span class="comment">// 该注解写在类上</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">    * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过程：</p><ol><li>组件注册功能<strong>首先要打开扫描开关</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.coo1heisenberg.demo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>组件注册功能的注解<code>@Component</code></strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AdminService</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思考：为什么我们提供一个扫描包目录（<code>@ComponentScan(&quot;包目录&quot;)</code>），然后在包目录下的类中使用注解就可以注册组件？</strong></p><ol><li>提供包目录，能否获得这个包以及这个包的子包下的所有的类的全限定类名</li><li>通过全限定类名，通过反射的方式获得对应的class → <code>Class.forName()</code></li><li><code>List&lt;Class&gt; classList =</code> 通过上面的过程获得</li><li>遍历获得其中的单个class呢</li><li><code>class.isAnnotationPresent(注解的class)</code> → 判断这个类上是否有注解</li></ol><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIsAnnotationPresent</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; classList = Arrays.asList(UserServiceImpl.class, </span><br><span class="line">                                             GoodServiceImpl.class, </span><br><span class="line">                                             UserServiceImpl.class);</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; singleClass : classList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleClass.isAnnotationPresent(Component.class)) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> singleClass.newInstance();</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> singleClass.getName();</span><br><span class="line">            map.put(key, instance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>组件id值的设定</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 增加其value属性，value属性值就是id</span></span><br><span class="line"><span class="comment"> * 如果没有增加value属性，id默认值就是类名的首字母小写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 组件id的默认值是adminServiceImpl</span></span><br><span class="line"><span class="meta">@Component(&quot;adminService&quot;)</span> <span class="comment">// 使用value属性值指定了组件id为adminService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AdminService</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类似的注解：<ul><li><code>@Service</code> → 通常是<strong>Service层的组件使用的注解</strong>，Service层组件<strong>也能使用@Component</strong></li><li><code>@Repository</code> → 通常是<strong>Dao层的组件使用@Repository注解</strong>，dao层组件<strong>也能使用@Component</strong></li><li><code>@Configuration</code> → <strong>配置类组件</strong></li><li><code>@Controller</code>（<strong>SpringMVC阶段</strong>）</li><li>等</li></ul></li><li><code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>、<code>@Configuration</code>，这些注解的<strong>ElementType都是TYPE</strong>，也就是这些注解都是<strong>要写在类定义上</strong>。</li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Component // 组件id的默认值是adminServiceImpl</span></span><br><span class="line"><span class="comment">// @Component(&quot;adminService&quot;) // 使用value属性值指定了组件id为adminService</span></span><br><span class="line"><span class="meta">@Service(&quot;adminService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AdminService</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>使用</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFetchComponent</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 初始化容器</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ApplicationConfiguration.class);</span><br><span class="line">            </span><br><span class="line">    <span class="comment">// 2. 取出组件</span></span><br><span class="line">    <span class="type">AdminService</span> <span class="variable">adminService</span> <span class="operator">=</span> applicationContext.getBean(AdminService.class);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> applicationContext.getBean(UserService.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NoSuchBeanDefinitionException：没加入到容器中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="配置类中注册（JavaConfig）"><a class="headerlink" href="#配置类中注册（JavaConfig）"></a>配置类中注册（JavaConfig）</h4><ul><li><code>@Bean</code>注解<ul><li>该注解增加在方法上，并且可以和其他注解共存</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bean &#123;&#125;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在配置类中注册AdminServiceImpl组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在配置类中写的是方法 -&gt; 提供一个返回值类型为AdminServiceImpl的实例</span></span><br><span class="line"><span class="comment"> * 应用程序启动的时候会加载配置类 -&gt; 加载配置类 -&gt; 执行配置类中的方法（记号：<span class="doctag">@Bean</span>）</span></span><br><span class="line"><span class="comment"> * -&gt; 方法的返回值注册为容器的组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> AdminService <span class="title function_">adminService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AdminServiceImpl</span> <span class="variable">adminService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminServiceImpl</span>();</span><br><span class="line">    <span class="keyword">return</span> adminService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果使用配置类中的组件，默认值为方法名</span></span><br><span class="line"><span class="comment"> * eg:Bean(&quot;userService&quot;)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 可以使用Bean注解的value方法值指令</span></span><br><span class="line"><span class="comment"> * eg:Bean(&quot;userServiceImpl&quot;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserService <span class="title function_">userService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * NoUniqueBeanDefinitionException：没有唯一的Bean定义的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Bean</span>对应的方法形参，默认是按照类型从容器中取出组件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 如果这个类型的组件在容器中不止一个，可以使用<span class="doctag">@Qualifier</span>指定组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserService <span class="title function_">userService</span><span class="params">(<span class="meta">@Qualifier(&quot;userDaoImpl&quot;)</span> UserDao userDao)</span> &#123;</span><br><span class="line">    <span class="type">UserServiceImpl</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">    userService.setUserDao(userDao);</span><br><span class="line">    <span class="keyword">return</span> userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="组件注入功能（DI）"><a class="headerlink" href="#组件注入功能（DI）"></a>组件注入功能（DI）</h3><p><strong>注意：要求是容器中的组件，才能够使用注入功能的注解</strong></p><hr><h4 id="配置类注解中的-Bean"><a class="headerlink" href="#配置类注解中的-Bean"></a>配置类注解中的<code>@Bean</code></h4><ul><li>方法的形参，就是从容器中取出的组件</li></ul><hr><h4 id="构造器注入"><a class="headerlink" href="#构造器注入"></a>构造器注入</h4><ul><li>如果仅仅执行了一个有参构造器，实例化的时候会执行有参构造方法</li><li>如果有多个有参构造器，在要使用的构造器上面加上<code>@Autowired</code></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AdminService</span> &#123;</span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果存在多个构造器，可以使用指定的构造器</span></span><br><span class="line"><span class="comment">     * 使用注解 <span class="doctag">@Autowired</span> 来指定构造器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminServiceImpl</span><span class="params">(UserDao userDao, String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有无参构造方法，默认使用无参构造方法</span></span><br><span class="line">    <span class="comment">// 如果没有无参构造方法，默认实例化时会使用有参构造方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 形参，默认是按照类型从容器中取出组件</span></span><br><span class="line">    <span class="comment">// 如果形参这个类型的组件在容器中不止一个，可以使用@Qualifier指定组件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminServiceImpl</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 因为String username在容器中不存在，所有给username赋一个初始值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AdminServiceImpl</span><span class="params">(UserDao userDao, <span class="meta">@Value(&quot;zhangsan&quot;)</span> String username)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    <span class="built_in">this</span>.username = username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="方法注入"><a class="headerlink" href="#方法注入"></a>方法注入</h4><ul><li>可以是组件中的任意方法，但是<strong>通常这样的方法我们用的是set方法</strong>，<strong>在方法上增加<code>@Autowired</code>注解</strong></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法注入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">GoodsService</span>&#123;</span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 形参，默认是按照类型从容器中取出组件</span></span><br><span class="line">    <span class="comment">// 如果形参这个类型的组件在容器中不止一个，可以使用@Qualifier指定组件</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="成员变量注入"><a class="headerlink" href="#成员变量注入"></a>成员变量注入</h4><ul><li>注入功能的注解使用这三组：<ol><li><strong><code>@Autowired</code></strong></li><li><strong><code>@Autowired + @Qualifier</code></strong></li><li><strong><code>@Resource</code></strong></li></ol></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 形参，默认是按照类型从容器中取出组件</span></span><br><span class="line">    <span class="comment">// 如果形参这个类型的组件在容器中不止一个，可以使用@Qualifier指定组件</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>容器中注册了这些类型的组件，<code>OrderDao</code>类型的组件（<code>orderDaoImpl</code>）、<code>UserDao</code>类型的组件（<code>userDaoImpl1</code>和<code>userDaoImpl2</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderDao</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl1</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl2</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">从容器中取出的对应的组件，执行注入，要注意，要求是在容器中的组件里注入：</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要使用注入功能注解，一定要保证当前类是容器中的组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//容器中该类型的组件只有一个</span></span><br><span class="line">    OrderDao orderDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//使用@Qualifier注解指定组件id</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDaoImpl1&quot;)</span></span><br><span class="line">    UserDao userDao1;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource(name = &quot;userDaoImpl2&quot;)</span> <span class="comment">//默认是按照组件的类型去注入，使用name属性指定组件id</span></span><br><span class="line">    UserDao userDao2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>注意</strong>：</p><ul><li>开发业务代码过程中，<strong>最常用的方式只使用一个<code>@Autowired</code></strong> ：绝大部分组件在容器中这个类型的组件只有一个</li><li>要在容器中的组件中使用这些注解，<strong>使用注解的话，所处的类上要有组件注册功能的注解，且处于扫描包目录</strong></li></ul><hr><h2 id="Spring单元测试"><a class="headerlink" href="#Spring单元测试"></a>Spring单元测试</h2><ul><li>导入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用<code>@Runwith</code>和<code>@ContextConfiguration</code>注解，在单元测试类中可以使用注入功能的注解</li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="comment">// 固定写法</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = AppConfiguration.class)</span> <span class="comment">//配置类的属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CategoryService categoryService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext applicationContext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Bean"><a class="headerlink" href="#Bean"></a>Bean</h2><h3 id="Bean的实例化"><a class="headerlink" href="#Bean的实例化"></a>Bean的实例化</h3><ul><li><p><strong>无参构造方法</strong>（<strong>默认方法</strong>）</p></li><li><p><strong>有参构造方法</strong></p><ul><li>如果你<strong>有无参构造方法</strong>，<strong>默认使用无参构造方法</strong></li><li>如果你<strong>没有无参构造方法</strong>，实例化时会<strong>使用有参构造方法</strong></li><li>如果<strong>存在多个构造器</strong>，可以<strong>指定使用你标记构造器（<code>@Autowired</code>）</strong></li></ul></li><li><p><strong>工厂</strong></p><ul><li>工厂提供实例，而实例交给Spring容器来进行管理</li><li>通过配置类中的方法，方法上增加<code>@Bean</code>注解，该方法的返回值注册为容器中的组件</li><li>在什么情况下使用的工厂的方式：<ul><li>比如动态代理  <code>ProxyFactoryBean</code></li><li>使用构造器要提供大量的参数，可以将这些参数封装在工厂里</li><li>对已有的框架或者代码进行封装<ul><li><code>SqlSessionFactoryBean</code></li></ul></li></ul></li><li>主要就是<strong>对已有的代码做些拓展</strong></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.coo1heisenberg,demo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这就是一种工厂</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserService <span class="title function_">serviceProxy</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ProxyUtil.getServiceProxy(userService);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>FactoryBean</strong><ul><li>Spring提供的接口</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FactoryBean</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">OBJECT_TYPE_ATTRIBUTE</span> <span class="operator">=</span> <span class="string">&quot;factoryBeanObjectType&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个工厂生产的方法/返回实例的方法</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    T <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供类型信息</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成组件的实例化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 组件类型和返回值相关</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eg：</p><ul><li><code>factory</code>目录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;UserService&gt; &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用代理方式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserService <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService) Proxy.newProxyInstance(</span><br><span class="line">                UserServiceFactoryBean.class.getClassLoader()</span><br><span class="line">                , UserServiceImpl.class.getInterfaces(), <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> </span><br><span class="line">                    <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(instance, args);</span><br><span class="line">                        System.out.println(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> invoke;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> UserService.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>service</code>目录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// System.out.println(&quot;start&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">        <span class="comment">// System.out.println(&quot;close&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goodBye</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// System.out.println(&quot;start&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;bye bye&quot;</span>);</span><br><span class="line">        <span class="comment">// System.out.println(&quot;close&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>测试目录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = AppConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">            <span class="meta">@Qualifier(&quot;userServiceFactoryBean&quot;)</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFactoryBean</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.hello(); <span class="comment">// InvocationHandler.invoke(userService, helloMethod, null)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BeanFactory和FactoryBean之间的区别</strong>：</p><ul><li><strong>BeanFactory是<code>ApplicationContext</code>的父接口，它就是容器</strong> → <strong>注册并管理<code>所有的</code>组件</strong>（<strong>去获得容器中的组件最终都是通过<code>getBean</code>方法获得</strong>）</li><li><strong>FactoryBean注册的是<code>特定的</code>组件</strong> → <strong><code>getObject</code>方法返回的是什么实例，注册的就是什么组件</strong></li></ul><hr><h2 id="作用域Scope"><a class="headerlink" href="#作用域Scope"></a>作用域Scope</h2><ul><li><strong>Singleton</strong>：单例，每一次<strong>取出组件都是同一个组件</strong></li><li><strong>Prototype</strong>：原型，每一次<strong>取出组件都是全新的组件</strong></li><li><strong>默认值是<code>singleton</code></strong>，我们通常省略不写</li><li><code>@Scope</code> <strong>使用value属性指定作用域</strong></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonBean</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrototypeBean</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultBean</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注册3个组件，分别给到不同的scope，然后从容器中取出组件多次，查看是否是同一个组件</strong>（<strong>查看内存地址</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = AppConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScopeTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SingletonBean singletonBean1; <span class="comment">// singletonBean1:SingletonBean@2049</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SingletonBean singletonBean2; <span class="comment">// singletonBean2:SingletonBean@2049</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SingletonBean singletonBean3; <span class="comment">// singletonBean3:SingletonBean@2049</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PrototypeBean prototypeBean1; <span class="comment">// prototypeBean1:PrototypeBean@2050</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PrototypeBean prototypeBean2; <span class="comment">// prototypeBean2:PrototypeBean@2051</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PrototypeBean prototypeBean3; <span class="comment">// prototypeBean3:PrototypeBean@2052</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DefaultBean defaultBean1; <span class="comment">// defaultBean1:DefaultBean@2053</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DefaultBean defaultBean2; <span class="comment">// defaultBean2:DefaultBean@2053</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DefaultBean defaultBean3; <span class="comment">// defaultBean3:DefaultBean@2053</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="生命周期"><a class="headerlink" href="#生命周期"></a>生命周期</h2><ul><li>生命周期：组件在容器中要完成实例化，组件从实例化开始直至可用状态会执行到哪些过程</li><li><strong>组件开始执行生命周期的时间</strong>：<ul><li><strong>容器初始化的时候</strong>（<strong>单例组件</strong>）</li></ul></li><li><strong><code>prototype</code>类型的组件开始执行生命周期的时间</strong>：<ul><li><strong>从容器中取出组件的时候开始执行生命周期</strong>，不取就不执行，取一次执行一次，取两次执行两次</li></ul></li><li>对于Bean（容器中的组件），在容器中也会经历这样的一些阶段：<ul><li><strong>容器初始化的时候，组件做准备性工作 → 放入到容器中之前，会执行哪一些方法来准备实例</strong></li><li><strong>组件可以从容器中取出，提供服务</strong>，比如从容器中取出<code>userService</code>实例，调用其<code>sayHello</code>方法</li><li><strong>容器关闭，组件做销毁工作</strong></li></ul></li></ul><h3 id="初始化阶段的方法"><a class="headerlink" href="#初始化阶段的方法"></a>初始化阶段的方法</h3><ol><li><strong>Bean的实例化</strong>（有参构造方法、无参构造方法）</li><li><strong>设置参数方法</strong>（方法注入、成员变量注入）</li><li><code>BeanNameAware</code>、<code>BeanFactoryAware</code>、<code>ApplicationContextAware</code><ul><li>如果从容器中取出一个<code>UserService</code>组件，这个组件是否知道它在容器中的组件名称，来自于哪里？<ul><li>容器知道，组件不知道</li></ul></li><li><strong>这几个<code>Aware</code>就是为了让组件本身也能获取这些信息，是接口</strong></li></ul></li><li><strong><code>BeanPostProcessor</code></strong>（<strong>Bean的后处理器，这个后指的是实例化之后</strong>，其实还是在放入到容器中之前）的<code>postProcessBeforeInitialization</code>（<strong>后面有初始化方法</strong>）</li><li><code>InitializingBean</code>的<code>afterPropertiesSet</code>方法（通常<strong>是一些框架提供的类初始化的方式</strong>）</li><li>自定义的<code>init</code>方法（我们<strong>自己做开发的时候通常使用的方式</strong>）</li><li><code>BeanPostProcessor</code>的<code>postProcessAfterInitialization</code>方法<ul><li><strong>BeanPostProcessor和正在执行生命周期的组件并不是同一个</strong>，BeanPostProcessor是额外提供的，而额外提供的这个BeanPostProcessor组件。它的作用范围：<strong>除了BeanPostProcessor本身，其他的所有组件</strong>，具有通用性</li></ul></li></ol><p><img src="/images/Spring-IOC-DI/fde9815ab1894852bc614daca825ea60.png" alt="在这里插入图片描述" loading="lazy"><br>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span></span><br><span class="line">        , BeanNameAware, BeanFactoryAware, ApplicationContextAware, InitializingBean &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl的实例化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String beanName;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;beanName = &quot;</span> + beanName);</span><br><span class="line">        <span class="built_in">this</span>.beanName = beanName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BeanFactory beanFactory;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ApplicationContext applicationContext;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;通常是一些框架提供的类，它的初始化方式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span> <span class="comment">// 在实例化之后，自定义的初始化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customInit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;通常是自定义的初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行BeanPostProcessor的postProcessBeforeInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行BeanPostProcessor的postProcessAfterInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/Spring-IOC-DI/578e9a4ebf694036b10ba8a0c5b2942e.png" alt="在这里插入图片描述" loading="lazy"></p><hr><h3 id="容器关闭阶段的方法"><a class="headerlink" href="#容器关闭阶段的方法"></a>容器关闭阶段的方法</h3><ul><li><strong>单例的组件才会执行到对应的方法</strong></li><li><code>DisposableBean</code>的<code>destroy</code>方法（<strong>通常是框架提供的类采用这种方式</strong>）</li><li>自定义的<code>destroy</code>方法（<strong>通常是自定义的</strong>）</li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现DisposableBean接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;实现DisposableBean接口的destroy&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现自定义的Destroy</span></span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;自定义的destroy&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ul><li><strong>生命周期的方法，不是都会执行到的，有些执行是需要条件的。另外要注意<code>BeanPostProcessor</code>的作用范围</strong></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05 JavaEE_MVC（转载自之前的CSDN）</title>
      <link href="/2024/05/13/JavaEE-MVC/"/>
      <url>/2024/05/13/JavaEE-MVC/</url>
      
        <content type="html"><![CDATA[<h1>JSON</h1><ul><li><strong>JSON</strong>（JavaScript Object Notation）<ul><li>是一种<strong>轻量级</strong>的<strong>数据交换格式</strong>，是<strong>存储和交换文本信息</strong>的一种语法，它<strong>与XML具有相同的特性</strong>，是一种<strong>数据存储格式</strong>，却比 XML 更小、更快、 更易于人编写和阅读、更易于生成和解析。</li><li>为了更好的<strong>做前端和后端之间的交互</strong></li></ul></li></ul><h2 id="常用的JSON解析"><a class="headerlink" href="#常用的JSON解析"></a>常用的JSON解析</h2><ul><li><code>fastjson</code>是阿里巴巴的开源JSON解析库</li><li><code>Gson</code>是Google提供的JSON解析库</li><li><code>Jackson</code>是SpringBoot默认序列化JSON解析库</li><li>性能方面，Jackson和FastJson差距很小，Jackson是SpringBoot默认的序列化库，也是最稳定的一个</li></ul><p>分别对应的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Gson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jackson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="Jackson的常规使用"><a class="headerlink" href="#Jackson的常规使用"></a>Jackson的常规使用</h2><ol><li><strong>实例化一个Jackson</strong>中用来做序列化的对象<code>ObjectMapper</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br></pre></td></tr></table></figure><ol start="2"><li>使用<code>ObjectMapper</code>提供的方法完成转换</li></ol><table><thead><tr><th>方法名</th><th>参数</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td><code>writeValueAsString(Object object)</code>:String</td><td>Object：被转换的对象</td><td>String：转换的结果</td><td><strong>将Object转换为JSONString</strong></td></tr><tr><td><code>readValue(String content,Class&lt;T&gt; valueType)</code>:T</td><td>String content:被转换的字符串；Class&lt;T&gt; valueType:<strong>指定接收返回值的类型</strong></td><td>泛型：在第二个参数被指定的类型</td><td><strong>将JSONString转换为指定转换类型</strong></td></tr></tbody></table><p>eg：</p><ul><li><code>bean</code>目录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  &#123;</span></span><br><span class="line"><span class="comment"> *      &quot;name&quot;:&quot;中国&quot;,</span></span><br><span class="line"><span class="comment"> *      &quot;province&quot;:[&#123;&quot;name&quot;:&quot;黑龙江&quot;,”cities”:[&quot;哈尔滨&quot;,&quot;大庆&quot;]&#125;,</span></span><br><span class="line"><span class="comment"> *                  &#123;&quot;name&quot;:&quot;广东&quot;,&quot;cities&quot;:[&quot;广州&quot;,&quot;深圳&quot;,&quot;珠海&quot;]&#125;,</span></span><br><span class="line"><span class="comment"> *                  &#123;&quot;name&quot;:&quot;辽宁&quot;,&quot;cities&quot;:[&quot;沈阳&quot;, &quot;大连&quot;]&#125;,</span></span><br><span class="line"><span class="comment"> *                  &#123;&quot;name&quot;:&quot;新疆&quot;,&quot;cities&quot;:[&quot;乌鲁木齐&quot;]&#125;</span></span><br><span class="line"><span class="comment"> *                 ]</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Country</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    List&lt;Province&gt; province;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;&quot;name&quot;:&quot;黑龙江&quot;,”cities”:[&quot;哈尔滨&quot;,&quot;大庆&quot;]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Province</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    String[] cities;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Execution</code>目录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonParseExecution</span> &#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Country</span> <span class="variable">country</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Country</span>();</span><br><span class="line">        country.setName(<span class="string">&quot;中国&quot;</span>);</span><br><span class="line">        <span class="comment">// List&lt;Province&gt; provinces = new ArrayList&lt;&gt;();</span></span><br><span class="line">        <span class="type">Province</span> <span class="variable">province1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Province</span>(<span class="string">&quot;黑龙江&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;哈尔滨&quot;</span>, <span class="string">&quot;大庆&quot;</span>&#125;);</span><br><span class="line">        <span class="type">Province</span> <span class="variable">province2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Province</span>(<span class="string">&quot;广东&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;深圳&quot;</span>, <span class="string">&quot;珠海&quot;</span>, <span class="string">&quot;广州&quot;</span>&#125;);</span><br><span class="line">        <span class="type">Province</span> <span class="variable">province3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Province</span>(<span class="string">&quot;辽宁&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;沈阳&quot;</span>, <span class="string">&quot;大连&quot;</span>&#125;);</span><br><span class="line">        <span class="type">Province</span> <span class="variable">province4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Province</span>(<span class="string">&quot;新疆&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;乌鲁木齐&quot;</span>&#125;);</span><br><span class="line">        List&lt;Province&gt; provinces = Arrays.asList(province1, province2, province3, province4);</span><br><span class="line">        country.setProvince(provinces);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">// 序列化：将country对象转化为字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> objectMapper.writeValueAsString(country);</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;&quot;name&quot;:&quot;中国&quot;,&quot;province&quot;:[&#123;&quot;name&quot;:&quot;黑龙江&quot;,&quot;cities&quot;:[&quot;哈尔滨&quot;,&quot;大庆&quot;]&#125;,</span></span><br><span class="line"><span class="comment">         * &#123;&quot;name&quot;:&quot;广东&quot;,&quot;cities&quot;:[&quot;深圳&quot;,&quot;珠海&quot;,&quot;广州&quot;]&#125;,</span></span><br><span class="line"><span class="comment">         * &#123;&quot;name&quot;:&quot;辽宁&quot;,&quot;cities&quot;:[&quot;沈阳&quot;,&quot;大连&quot;]&#125;,&#123;&quot;name&quot;:&quot;新疆&quot;,&quot;cities&quot;:[&quot;乌鲁木齐&quot;]&#125;]&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化：将字符串转换为country对象</span></span><br><span class="line">        <span class="type">Country</span> <span class="variable">jsonCountry</span> <span class="operator">=</span> objectMapper.readValue(jsonStr, Country.class);</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="指定日期格式"><a class="headerlink" href="#指定日期格式"></a>指定日期格式</h3><p>语句：<code>objectMapper.setDateFormat(new SimpleDateFormat(&quot;yyyy-MM-dd&quot;));</code></p><p>eg：</p><ul><li>在<code>User</code>中增加一个成员变量<code>Date birthday</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String username;</span><br><span class="line">    String password;</span><br><span class="line">    Integer age;</span><br><span class="line">    Date birthday;</span><br><span class="line">    Date createDate;</span><br><span class="line">    String mobile;</span><br><span class="line"></span><br><span class="line">    UserDetail userDetail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetail</span> &#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String email;</span><br><span class="line">    String mobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Execution</code>目录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonParseExecutionTest</span> &#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserDetail</span> <span class="variable">userDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDetail</span>(<span class="number">1</span>, <span class="string">&quot;1234@163.com&quot;</span>, <span class="string">&quot;12345678909&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;zs&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="number">22</span></span><br><span class="line">                , <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="string">&quot;12345678900&quot;</span>, userDetail);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解决日期格式的语句</span></span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">userJsonStr</span> <span class="operator">=</span> objectMapper.writeValueAsString(user);</span><br><span class="line">        System.out.println(userJsonStr);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;</span></span><br><span class="line"><span class="comment">         *     &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">         *     &quot;username&quot;: &quot;zs&quot;,</span></span><br><span class="line"><span class="comment">         *     &quot;password&quot;: &quot;123456&quot;,</span></span><br><span class="line"><span class="comment">         *     &quot;age&quot;: 22,</span></span><br><span class="line"><span class="comment">         *     &quot;birthday&quot;: 1711811845446, // 2024-03-30</span></span><br><span class="line"><span class="comment">         *     &quot;createDate&quot;: 1711811845446,</span></span><br><span class="line"><span class="comment">         *     &quot;mobile&quot;: &quot;12345678900&quot;,</span></span><br><span class="line"><span class="comment">         *     &quot;userDetail&quot;: &#123;</span></span><br><span class="line"><span class="comment">         *         &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">         *         &quot;email&quot;: &quot;1234@163.com&quot;,</span></span><br><span class="line"><span class="comment">         *         &quot;mobile&quot;: &quot;12345678909&quot;</span></span><br><span class="line"><span class="comment">         *     &#125;</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1>MVC设计模式</h1><p><img src="/images/JavaEE-MVC/d7e06d87c1434504a02d6f26f5348798.png" alt="在这里插入图片描述" loading="lazy"></p><ol><li>这个Servlet可以称之为控制器 → <strong>Controller</strong></li><li>查询student信息就是处理数据逻辑 → <strong>Model</strong> ；另外这部分工作是在Servlet（Controller）中进行的</li><li>将数据和jsp共享 → 在Controller中将Model封装的数据准备就绪</li><li>Servlet（Controller）设置转发的jsp（视图View），并且在jsp（视图）中渲染出Model提供的信息</li></ol><h2 id="MVC介绍"><a class="headerlink" href="#MVC介绍"></a>MVC介绍</h2><p>三个核心部件：</p><ul><li><strong>模型（Model）<strong>应用程序中用于</strong>处理应用程序数据逻辑的部分</strong><ul><li>获得一些具体的对象，比如说：<code>User</code>的对象、<code>Order</code>的list</li></ul></li><li><strong>视图（View）<strong>应用程序中处理数据显示的部分，就是</strong>页面的展示</strong>，采集用户数据</li><li><strong>控制器（Controller）<strong>应用程序中</strong>处理用户交互</strong>的部分。接收用户端的请求，指的是Servlet的功能，根据界面传递过来不同的值进行不同的增删改查操作之后再跳转到不同的界面显示。做一个承上启下的作用。<ul><li>比如说：<code>request</code>和<code>response</code>所处的位置，就是<code>servlet</code></li></ul></li></ul><p>强制性地使应用程序的输入、处理和输出分开。它们各自处理自己的任务。<strong>最典型的MVC就是JSP + Servlet + JavaBean的模式</strong>。MVC其实说的就是一个事情：<strong>解耦</strong>。</p><p><img src="/images/JavaEE-MVC/494341ad72164ad5be6cd3b75bf8958f.png" alt="在这里插入图片描述" loading="lazy"></p><hr><h2 id="前后端分离"><a class="headerlink" href="#前后端分离"></a>前后端分离</h2><p>通过<strong>js向后端发起Ajax异步请求</strong>，然后<strong>请求到Server服务器</strong>，找到<strong>对应的控制器</strong>，由<strong>控制器和Model层和View做交互</strong>，最终<strong>服务器处理的结果以Json的形式交给JS</strong>，<strong>JS可以直接解析这个Json对象</strong>，在<strong>前端页面</strong>上呈现最终的效果</p><p><img src="/images/JavaEE-MVC/59dafa2615b24336bae53b0f08fe2799.png" alt="在这里插入图片描述" loading="lazy"><br><strong>也就是我们在Servlet中完成开发之后，响应体中响应的是Json字符串</strong></p><hr><h2 id="案例（开发与Json相关接口）"><a class="headerlink" href="#案例（开发与Json相关接口）"></a>案例（开发与Json相关接口）</h2><ul><li><p>请求相关信息</p><ul><li>请求URL：<code>http://localhost:8080/demo3/auth/account/check</code></li><li>请求方法：<code>POST</code></li><li>请求参数：请求参数是<code>JSON</code>字符串 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;userAccount&quot;</span><span class="punctuation">:</span><span class="string">&quot;admin123&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>提供Postman构造Json数据<br><img src="/images/JavaEE-MVC/6758a2800c1e4de89b6b1493a095913b.png" alt="在这里插入图片描述" loading="lazy"><br><img src="/images/JavaEE-MVC/173867a91cc143cca05742abf45a511a.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li>提供filder抓取的请求报文<br><img src="/images/JavaEE-MVC/ae38732999774b209d70c7ed0bcad075.png" alt="在这里插入图片描述" loading="lazy"></li></ul></li></ul><p><strong>业务</strong>：传入的用户名信息，然后完成一些业务，需要在数据库<strong>user_t</strong>表中根据用户名查询id信息</p><ul><li><p>如果用户名<strong>长度小于6</strong>，<strong>响应一段JSON数据</strong></p></li><li><pre><code class="language-json">&#123;    &quot;data&quot;:null,    &quot;errmsg&quot;:&quot;字符串长度至少6位&quot;,    &quot;errno&quot;:400&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果**用户不存在**，**响应一段JSON数据**</span><br><span class="line"></span><br><span class="line">- ```json</span><br><span class="line">  &#123;</span><br><span class="line">      &quot;data&quot;:null,</span><br><span class="line">      &quot;errmsg&quot;:&quot;用户不存在&quot;,</span><br><span class="line">      &quot;errno&quot;:502</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>如果<strong>用户存在</strong>，<strong>响应一段JSON数据</strong></p></li><li><pre><code class="language-json">&#123;    &quot;data&quot;:user的json字符串,    &quot;errmsg&quot;:&quot;用户存在&quot;,    &quot;errno&quot;:200&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">eg：</span><br><span class="line">- `bean`目录下</span><br><span class="line">```java</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@Data</span><br><span class="line">public class ResponseVo &#123;</span><br><span class="line">    @JsonProperty(&quot;data&quot;)</span><br><span class="line">    private Object data;</span><br><span class="line">    @JsonProperty(&quot;errmsg&quot;)</span><br><span class="line">    private String errmsg;</span><br><span class="line">    @JsonProperty(&quot;errno&quot;)</span><br><span class="line">    private Integer errno;</span><br><span class="line">    /**</span><br><span class="line">     * &#123;</span><br><span class="line">     *     &quot;data&quot;:null,</span><br><span class="line">     *     &quot;errmsg&quot;:&quot;字符串长度至少6位&quot;,</span><br><span class="line">     *     &quot;errno&quot;:400</span><br><span class="line">     * &#125;</span><br><span class="line">     */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p><code>servlet</code>目录下</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/auth/account/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthAccountCheckServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        DispatchUtil.dispatch(request, response, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// JSON字符串：&#123;&quot;userAccount&quot;:&quot;admin123&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先获得Json字符串并解析它</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> request.getReader().readLine();</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> objectMapper.readValue(jsonStr, Map.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userAccount</span> <span class="operator">=</span> (String) map.get(<span class="string">&quot;userAccount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">responseStr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 判断长度</span></span><br><span class="line">        <span class="keyword">if</span> (userAccount == <span class="literal">null</span> || userAccount.length() &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="comment">// 不符合要求</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * &#123;</span></span><br><span class="line"><span class="comment">             *     &quot;data&quot;:null,</span></span><br><span class="line"><span class="comment">             *     &quot;errmsg&quot;:&quot;字符串长度至少6位&quot;,</span></span><br><span class="line"><span class="comment">             *     &quot;errno&quot;:400</span></span><br><span class="line"><span class="comment">             * &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">ResponseVo</span> <span class="variable">responseVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseVo</span>();</span><br><span class="line">            responseVo.setErrmsg(<span class="string">&quot;字符串长度至少6位&quot;</span>);</span><br><span class="line">            responseVo.setErrno(<span class="number">400</span>);</span><br><span class="line">            responseStr = objectMapper.writeValueAsString(responseVo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> MybatisUtil.getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectByUserName(userAccount);</span><br><span class="line">        <span class="keyword">if</span> (users != <span class="literal">null</span> &amp;&amp; users.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// user存在</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * &#123;</span></span><br><span class="line"><span class="comment">             *     &quot;data&quot;:user的json字符串,</span></span><br><span class="line"><span class="comment">             *     &quot;errmsg&quot;:&quot;用户存在&quot;,</span></span><br><span class="line"><span class="comment">             *     &quot;errno&quot;:200</span></span><br><span class="line"><span class="comment">             * &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">ResponseVo</span> <span class="variable">responseVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseVo</span>();</span><br><span class="line">            responseVo.setData(users.get(<span class="number">0</span>));</span><br><span class="line">            responseVo.setErrmsg(<span class="string">&quot;用户存在&quot;</span>);</span><br><span class="line">            responseVo.setErrno(<span class="number">200</span>);</span><br><span class="line">            responseStr = objectMapper.writeValueAsString(responseVo);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// user不存在</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * &#123;</span></span><br><span class="line"><span class="comment">             *     &quot;data&quot;:null,</span></span><br><span class="line"><span class="comment">             *     &quot;errmsg&quot;:&quot;用户不存在&quot;,</span></span><br><span class="line"><span class="comment">             *     &quot;errno&quot;:502</span></span><br><span class="line"><span class="comment">             * &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">ResponseVo</span> <span class="variable">responseVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseVo</span>();</span><br><span class="line">            responseVo.setErrmsg(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">            responseVo.setErrno(<span class="number">502</span>);</span><br><span class="line">            responseStr = objectMapper.writeValueAsString(responseVo);</span><br><span class="line">        &#125;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(responseStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/JavaEE-MVC/7d38dd7dcb4748f583fc24a1c17dfc39.png" alt="在这里插入图片描述" loading="lazy"></p><hr><h1>三层架构</h1><p>三层架构这里和MVC并不是冲突的概念，而是<strong>在MVC的基础上进一步解耦</strong>，之前在Controller控制层直接调用了Model，为了后续业务上的解耦，<strong>在中间增加增加了一层业务逻辑层，在业务逻辑层中处理大部分业务</strong></p><p><img src="/images/JavaEE-MVC/4d941b63b7c4447a9a1d19bcae16dfa5.png" alt="在这里插入图片描述" loading="lazy"></p><h2 id="三层架构介绍"><a class="headerlink" href="#三层架构介绍"></a>三层架构介绍</h2><ul><li>三层架构：表示层、业务逻辑层、数据访问层<ul><li>避免了表示层直接访问数据访问层，表示层只和业务逻辑层有联系，提高了数据安全性</li><li>如果切换B/S、C/S架构，直接替换表示层即可，比如替换Servlet</li><li>项目结构更清楚，分工明确，增加可维护性</li></ul></li></ul><p>实际在开发过程中的体现，就是控制层（Servlet）中直接调用<strong>Service（业务逻辑层）</strong>，在Service中调用<strong>Dao（数据访问层）</strong></p><hr>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04 JavaEE_WebTools（转载自之前的CSDN）</title>
      <link href="/2024/05/13/JavaEE-WebTools/"/>
      <url>/2024/05/13/JavaEE-WebTools/</url>
      
        <content type="html"><![CDATA[<h1>Web组件</h1><ul><li>JavaEE的Web组件（三大Web组件）：<ol><li><code>Servlet</code> → 处理请求对应的业务</li><li><code>Listener</code> → 监听器</li><li><code>Filter</code> → 过滤器</li></ol></li></ul><hr><h2 id="Listener监听器"><a class="headerlink" href="#Listener监听器"></a>Listener监听器</h2><ul><li>监听器在监听到主体做了XX事情，就会触发对应的事件</li><li>监听的东西与命名有关系</li><li>要加上注解<code>@WebListener</code></li></ul><h3 id="ServletContextListener"><a class="headerlink" href="#ServletContextListener"></a>ServletContextListener</h3><p>监听的主体就是ServletContext，当发现ServletContext做了事情，Listener（监听器）就会执行该事件特定的方法。</p><ul><li>ServletContext如果初始化，则会执行监听器的初始化方法<code>contextInitialized</code><ul><li>ServletContext应用程序启动的时候初始化，就意味着应用程序启动</li></ul></li><li>ServletContext如果销毁，则会执行监听器的销毁方法<code>contextDestroy</code><ul><li>ServletContext应用程序关闭的时候销毁，意味着应用程序关闭</li></ul></li><li><strong>应用程序启动的时候会执行<code>ServletContextListener</code>的<code>contextInitialized</code>方法；应用程序关闭的时候会执行<code>contextDestroy</code></strong></li></ul><h3 id="执行过程"><a class="headerlink" href="#执行过程"></a>执行过程</h3><p>当应用程序启动的过程中，逐步<strong>加载Web组件</strong></p><ul><li><strong>首先</strong>会<strong>加载<code>ServletContext</code>和<code>Listener</code>组件</strong><ul><li>ServletContext伴随着应用程序初始化，它开始初始化，然后ServletContextListener监听到ServletContext初始化，会执行Listener的Initialized方法</li></ul></li><li><strong>然后初始化<code>loadOnStartup</code>为正数的Servlet</strong></li></ul><p><img src="/images/JavaEE-WebTools/7c72f43660594d62a38cfc382cb8b83b.png" alt="在这里插入图片描述" loading="lazy"><br>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertyInitServletContextListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> servletContextEvent.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> PropertyInitServletContextListener.class.getClassLoader()</span><br><span class="line">        .getResourceAsStream(<span class="string">&quot;parameter.properties&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(inputStream);</span><br><span class="line">        <span class="type">String</span> <span class="variable">picPath</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;pic.path&quot;</span>);</span><br><span class="line"></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;picPath&quot;</span>, picPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;应用程序关闭，可以做一些资源的释放&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * localhost:8080/demo1/picture/fetch?name=1.jpg</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/picture/fetch&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PictureAccessServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// InputStream inputStream = PictureAccessServlet.class.getClassLoader()</span></span><br><span class="line">        <span class="comment">//         .getResourceAsStream(&quot;parameter.properties&quot;);</span></span><br><span class="line">        <span class="comment">// Properties properties = new Properties();</span></span><br><span class="line">        <span class="comment">// properties.load(inputStream);</span></span><br><span class="line">        <span class="comment">// String path = properties.getProperty(&quot;pic.path&quot;);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> (String) getServletContext().getAttribute(<span class="string">&quot;picPath&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path,request.getParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span>((length = fileInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(bytes,<span class="number">0</span>,length);</span><br><span class="line">        &#125;</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="Filter过滤器"><a class="headerlink" href="#Filter过滤器"></a>Filter过滤器</h2><ul><li>Filter是一个<strong>执行过滤任务的一个对象</strong><ul><li>它既可以<strong>作用于<code>Request</code>对象</strong>，也可以<strong>作用于<code>Response</code>对象</strong>，或者<strong>两者均作用</strong></li></ul></li><li>就是Servlet中获取请求之前，Servlet响应之后</li></ul><p><img src="/images/JavaEE-WebTools/30a306ce33644472a51fdd0e42a0e331.png" alt="在这里插入图片描述" loading="lazy"></p><h3 id="Filter与Servlet的执行"><a class="headerlink" href="#Filter与Servlet的执行"></a>Filter与Servlet的执行</h3><ul><li>URL-Pattern和Servlet之间存在着映射关系，URL-Pattern和Filter之间也存在着映射关系<ul><li>1个URL-Pattern只能对应一个Servlet，但是可以对应多个Filter</li><li>Servlet和URL-Pattern之间是一对多的关系，但是URL-Pattern和Servlet之间是一对一</li></ul></li><li>其实，<strong>一个URL-Pattern</strong>对应的请求<ul><li><strong>对应1个Servlet</strong></li><li><strong>对应多个Filter</strong></li></ul></li></ul><p><img src="/images/JavaEE-WebTools/fb5186b9636343d1b25de0d115199b23.png" alt="在这里插入图片描述" loading="lazy"><br>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/user/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> filterConfig.getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest</span></span><br><span class="line"><span class="params">            , ServletResponse servletResponse, FilterChain filterChain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 做过滤，里面写的就是通用的业务</span></span><br><span class="line">        <span class="comment">// 前半部分</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这部分是解决中文乱码问题</span></span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse); <span class="comment">// 执行下一个过滤器或者Servlet</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后半部分</span></span><br><span class="line">        <span class="comment">// 但是一般业务代码都写在前半部分</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="案例（登录案例）"><a class="headerlink" href="#案例（登录案例）"></a>案例（登录案例）</h2><ul><li>需求<ul><li><code>/user/login</code></li><li><code>/user/logout</code></li><li><code>/user/info</code></li><li><code>/order/list</code></li><li>增加web组件中的filter功能</li><li>增加web组件中的listener功能</li><li>增加白名单功能</li></ul></li></ul><p><img src="/images/JavaEE-WebTools/19ca8d08eecb45e1be942fc932ffcb36.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li><code>bean</code>目录下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createdate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>mapper</code>目录下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">    List&lt;Order&gt; <span class="title function_">selectByUserId</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectByUserNameAndPassword</span></span><br><span class="line">            <span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">selectByPrimaryKey</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>servlet</code>目录下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/order/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        DispatchUtil.dispatch(request,response,<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="comment">// 先判断是否是登录状态</span></span><br><span class="line">        <span class="comment">// 如果没有登录，则跳转到登录页面</span></span><br><span class="line">        <span class="comment">// 这里filter帮我们完成了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果已经登录，则查询orderlist信息</span></span><br><span class="line">        <span class="type">OrderMapper</span> <span class="variable">orderMapper</span> <span class="operator">=</span> MybatisUtil.getSqlSession().getMapper(OrderMapper.class);</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        List&lt;Order&gt; orders = orderMapper.selectByUserId(user.getId());</span><br><span class="line">        response.getWriter().println(orders);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/user/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        DispatchUtil.dispatch(request, response, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取username和password，查询user记录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> MybatisUtil.getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectByUserNameAndPassword(username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有可能用户名和密码相同，则取第一条数据</span></span><br><span class="line">        <span class="keyword">if</span> (users != <span class="literal">null</span> &amp;&amp; users.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> users.get(<span class="number">0</span>);</span><br><span class="line">            <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">            session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;用户名或密码错误，即将跳转到登录页面...&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;2;url=/demo3/login.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        session.invalidate();</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;注销用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="comment">// 先判断是否是登录状态</span></span><br><span class="line">        <span class="comment">// 如果没有登录，则跳转到登录页面</span></span><br><span class="line">        <span class="comment">// 这里filter帮我们做了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果已经登录，可以从session中获取信息 -&gt; 响应信息</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        response.getWriter().println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>listener</code>目录下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertyServletContextListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> servletContextEvent.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> PropertyServletContextListener.class.getClassLoader()</span><br><span class="line">                .getResourceAsStream(<span class="string">&quot;application.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">whiteList</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;whiteList&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] whiteListStr = whiteList.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(whiteListStr);</span><br><span class="line"></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;whiteList&quot;</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>filter</code>目录下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    List&lt;String&gt; whiteList = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// 方法1：</span></span><br><span class="line"><span class="comment">//        Properties properties = new Properties();</span></span><br><span class="line"><span class="comment">//        InputStream inputStream = CharacterEncodingFilter.class.getClassLoader()</span></span><br><span class="line"><span class="comment">//                .getResourceAsStream(&quot;application.properties&quot;);</span></span><br><span class="line"><span class="comment">//        properties.load(inputStream);</span></span><br><span class="line"><span class="comment">//        String whiteListStr = properties.getProperty(&quot;whiteList&quot;);</span></span><br><span class="line"><span class="comment">//        String[] whiteArray = whiteListStr.split(&quot;,&quot;);</span></span><br><span class="line"><span class="comment">//        whiteList = Arrays.asList(whiteArray);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法2：</span></span><br><span class="line">        <span class="comment">// 可以先把配置文件在Listener的时候放入</span></span><br><span class="line">        whiteList = (List&lt;String&gt;) filterConfig.getServletContext().getAttribute(<span class="string">&quot;whiteList&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse</span></span><br><span class="line"><span class="params">            , FilterChain filterChain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// List&lt;String&gt; list = Arrays.asList(&quot;/user/login&quot;, &quot;/user/logout&quot;, &quot;/login.html&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 强转</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">uriSuffix</span> <span class="operator">=</span> UriUtil.getUriSuffix(request);</span><br><span class="line">        <span class="keyword">if</span> (whiteList.contains(uriSuffix)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!uriSuffix.endsWith(<span class="string">&quot;html&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 1. 解决字符集</span></span><br><span class="line">                request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="comment">// 响应的字符集问题</span></span><br><span class="line">                response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 解决字符集</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 响应的字符集问题</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 解决登录状态的判断</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.1 如果已经登录（或者登录/注销请求）就放行</span></span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 2.2 如果没有登录就提示，跳转到登录页面</span></span><br><span class="line">            response.getWriter().println(<span class="string">&quot;没有登录，请先登录，即将跳转到登录页面...&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;refresh&quot;</span>, <span class="string">&quot;2;url=/demo3/login.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String requestURI = request.getRequestURI();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        if (requestURI.endsWith(&quot;html&quot;)) &#123;</span></span><br><span class="line"><span class="comment">//            filterChain.doFilter(request, response);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.1 如果已经登录（或者登录/注销请求）就放行</span></span><br><span class="line"><span class="comment">//        if (user != null || requestURI.endsWith(&quot;login&quot;)</span></span><br><span class="line"><span class="comment">//                || requestURI.endsWith(&quot;logout&quot;))&#123;</span></span><br><span class="line"><span class="comment">//            filterChain.doFilter(request, response);</span></span><br><span class="line"><span class="comment">//        &#125; else &#123;</span></span><br><span class="line"><span class="comment">//            // 2.2 如果没有登录就提示，跳转到登录页面</span></span><br><span class="line"><span class="comment">//            response.getWriter().println(&quot;没有登录，请先登录，即将跳转到登录页面...&quot;);</span></span><br><span class="line"><span class="comment">//            response.setHeader(&quot;refresh&quot;,&quot;2;url=/demo3/login.html&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>util</code>目录下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DispatchUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(String operation, HttpServletRequest request, HttpServletResponse response, HttpServlet instance)</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> instance.getClass().getDeclaredMethod(operation, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        method.invoke(instance, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;request, response&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpServlet userServlet)</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">operation</span> <span class="operator">=</span> requestURI.substring(requestURI.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        dispatch(operation, request, response, userServlet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSession = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>()</span><br><span class="line">                    .build(Resources.getResourceAsStream(<span class="string">&quot;mybatis.xml&quot;</span>)).openSession(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UriUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Suffix的意思是后缀</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUriSuffix</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// uri - contextPath</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uriSuffix</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// eg: /demo3/user/name</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="comment">// eg: /demo3</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line">        <span class="keyword">if</span> (contextPath == <span class="literal">null</span> || contextPath.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 这是一个root应用</span></span><br><span class="line">            uriSuffix = requestURI;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            uriSuffix = requestURI.replaceAll(contextPath, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">// 或者：uriSuffix = requestURI.substring();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uriSuffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>UserMapper</code>的<code>xml</code>目录</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.coo1heisenberg.demo3.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coo1heisenberg.demo3.bean.Order&quot;</span>&gt;</span></span><br><span class="line">        select id, name, price, user_id as userId from test_product</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            user_id = #&#123;user_id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.coo1heisenberg.demo3.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByUserNameAndPassword&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coo1heisenberg.demo3.bean.User&quot;</span>&gt;</span></span><br><span class="line">        select id, username, password, age, birthday, createDate, mobile from test_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByPrimaryKey&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coo1heisenberg.demo3.bean.User&quot;</span>&gt;</span></span><br><span class="line">        select id, username, password, age, birthday, createDate, mobile from test_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1>小结</h1><h2 id="Web组件"><a class="headerlink" href="#Web组件"></a>Web组件</h2><ul><li><strong>核心</strong>是<code>Servlet</code>，<strong>处理核心业务</strong></li><li><code>Listener</code>，用来做<strong>资源的初始化</strong></li><li><code>Filter</code>，在Servlet处理前后<strong>增加通用的处理</strong></li></ul><p><img src="/images/JavaEE-WebTools/b4ec6eaa0c474d13a26168a6c047e954.png" alt="11" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03 JavaEE_conversation（转载自之前的CSDN）</title>
      <link href="/2024/05/13/JavaEE-conversation/"/>
      <url>/2024/05/13/JavaEE-conversation/</url>
      
        <content type="html"><![CDATA[<h1>前置知识点</h1><ul><li>响应头的设置<ul><li><code>response.setHeader(String,String)</code></li></ul></li><li>Postman中设置请求头<ul><li>Header</li></ul></li><li>URL编码<ul><li><strong>浏览器能够完成编解码的工作</strong></li><li>比如我们发送一个Get请求（通过浏览器地址栏），其中的<strong>请求参数有中文</strong>，这个中文<strong>浏览器会自动进行URL编码</strong>  → Servlet中使用request获得请求参数的值，这个值是中文，说明<strong>request已经解码</strong></li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLEncodingDecodingExecution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">// 提供编码的方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        System.out.println(encode); <span class="comment">//%E5%BC%A0%E4%B8%89</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提供解码的方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">decode</span> <span class="operator">=</span> URLDecoder.decode(<span class="string">&quot;%E5%BC%A0%E4%B8%89&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        System.out.println(decode); <span class="comment">// 张三</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>会话技术Conversation</h1><ul><li>同一个客户端向服务器中发送的多个请求，需要信息共享</li><li>在做服务器开发过程中，客户端和服务器之间，会有请求报文和响应报文<ul><li><strong>客户端给服务器发送请求：请求报文</strong></li><li><strong>服务器给客户端发送响应：响应报文</strong></li></ul></li><li>HTTP协议的无状态性，会导致服务器无法区分信息来自于哪个客户端<ul><li>无状态性：协议对于交互性场景没有记忆能力</li><li>eg：<code>http://localhost:8080/demo1/user/list/user?userid=25;</code></li><li>会产生弊端：<ul><li><strong>用户信息不安全</strong></li><li>客户端和浏览器每一次发送请求的时候都<strong>需要携带请求参数比较繁琐</strong></li></ul></li></ul></li><li>引入会话技术，最重要的事情就是<strong>让服务器知道客户端是谁</strong></li><li><strong>客户端直接携带确切的信息</strong>，这个就是<strong>客户端技术</strong><ul><li>客户端技术：<code>Cookie</code></li><li>eg：请求报文中携带对应的信息<code>username=zs</code></li></ul></li><li>如果是<strong>通过客户端提供的编号，进而在服务器中进一步获得信息</strong>，那么这个就是<strong>服务器技术</strong><ul><li>服务器技术：<code>Session</code></li><li>eg：服务器中存储<code>编号30012:zs</code></li></ul></li><li><strong>服务器会话技术，是在客户端会话技术基础上的</strong></li></ul><hr><h2 id="客户端技术Cookie"><a class="headerlink" href="#客户端技术Cookie"></a>客户端技术Cookie</h2><ul><li>携带信息：客户端（浏览器）在向服务器发起请求的时候直接携带了信息，这些信息是通过<strong>请求头</strong>中一个特殊的请求头（<strong>特殊的请求头叫Cookie</strong>）携带的</li></ul><h3 id="Cookie的格式"><a class="headerlink" href="#Cookie的格式"></a>Cookie的格式</h3><ul><li>Cookie：<code>key1=value1;key2=value2</code><ul><li>携带的是<strong>键值对信息</strong>，携带的键值对信息<strong>都是字符串</strong>信息</li><li>可以<strong>携带多组键值对信息</strong>，如果携带多组，中间<strong>使用分号分隔开</strong></li></ul></li></ul><h3 id="Cookie的优缺点"><a class="headerlink" href="#Cookie的优缺点"></a>Cookie的优缺点</h3><ul><li>优点：<strong>小巧</strong>、减轻了服务器压力、可以很轻松的实现<strong>多台主机、多个应用下的资源共享</strong></li><li>缺点：<strong>存储容量有限制</strong> 4kb、<strong>数据类型有限制</strong>、<strong>只可以存储一些非敏感数据</strong></li></ul><h3 id="构造Cookie信息"><a class="headerlink" href="#构造Cookie信息"></a>构造Cookie信息</h3><h4 id="通过浏览器构造Cookie"><a class="headerlink" href="#通过浏览器构造Cookie"></a>通过浏览器构造Cookie</h4><ol><li>打开开发者工具，快捷键F12</li><li>找应用程序（Application）</li><li>应用程序里找存储（Storage）里的Cookie</li><li>可以通过Fiddler获取Cookie值</li></ol><hr><h4 id="通过Postman构造Cookie"><a class="headerlink" href="#通过Postman构造Cookie"></a>通过Postman构造Cookie</h4><p>eg：</p><ul><li><p>通过Postman进行创建<br><img src="/images/JavaEE-conversation/2082ea7e67644fd2aa0d399ce7110b29.png" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>通过Fiddler进行抓取<br><img src="/images/JavaEE-conversation/a49a5241dc86481f818282734171b0c3.png" alt="在这里插入图片描述" loading="lazy"></p></li></ul><hr><h4 id="通过服务器构造Cookie"><a class="headerlink" href="#通过服务器构造Cookie"></a>通过服务器构造Cookie</h4><blockquote><p>客户端 → 服务器，请求<br>服务器 → 客户端，响应（并且<strong>携带响应头</strong>：<code>set-cookie:key=value</code>）<br>客户端 → 服务器，请求（并且<strong>携带请求头</strong>：<code>cookie:key=value</code>）<br>客户端 → 服务器，请求（并且<strong>携带请求头</strong>：<code>cookie:key=value</code>）</p></blockquote><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送请求</span></span><br><span class="line"><span class="comment"> * http://localhost:8080/demo1/cookie/set?username=zs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/cookie/set&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieSetServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;set-cookie&quot;</span>,<span class="string">&quot;username=&quot;</span> + username);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;cookie set finish, please check cookie&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="获取Cookie信息"><a class="headerlink" href="#获取Cookie信息"></a>获取Cookie信息</h3><ul><li>Request中提供了直接获得Cookie的方法<ul><li><code>Cookie[] cookies = request.getCookies();</code></li></ul></li><li>单个Cookie，我们先获得其键值对信息<ul><li>键：<code>cookie.getName()</code></li><li>值：<code>cookie.getValue()</code></li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有的cookie，然后进行打印</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/cookie/fetch&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieFetchServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// String cookie = request.getHeader(&quot;cookie&quot;);</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">            System.out.println(name + <span class="string">&quot; : &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * username : ls</span></span><br><span class="line"><span class="comment">         * Pycharm-89c7dd8b : 47f9fb69-6795-467d-875b-0a44c63e1e97</span></span><br><span class="line"><span class="comment">         * Idea-75c3c9a : b19ee743-c677-4bab-b7bd-673c42a25ce0</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="Cookie中的信息"><a class="headerlink" href="#Cookie中的信息"></a>Cookie中的信息</h3><p>Cookie这个实例中的封装信息：</p><table><thead><tr><th>信息</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>有参构造方法</td><td>核心值</td></tr><tr><td>value</td><td>有参构造方法</td><td>核心值</td></tr><tr><td>Path</td><td><code>setPath(String)</code></td><td>设置Cookie的有效URI</td></tr><tr><td>Domain</td><td><code>setDomain(String)</code></td><td>域名，做Cookie的共享</td></tr><tr><td>MaxAge</td><td><code>setMaxAge(int)</code></td><td>cookie的有效时间、设置过期时间，单位是秒，如果超过这个时间Cookie就会过期</td></tr></tbody></table><h4 id="Path"><a class="headerlink" href="#Path"></a>Path</h4><ul><li>客户端发起的请求，是某个path的话，客户端在发起请求的时候才会携带这个cookie信息</li><li>这个Path就是设置cookie的执行路径<ul><li><code>cookie.setPath(String path)</code></li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/cookie/path&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookiePathServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// response.setHeader(&quot;set-cookie&quot;,&quot;xxxx=&quot; + xxxx);</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;ls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认Path：URI去除掉最后一级 uri=demo1/cookie/path</span></span><br><span class="line">        <span class="comment">// ---&gt; path=demo1/cookie</span></span><br><span class="line">        <span class="comment">// 手动构造Path</span></span><br><span class="line">        cookie.setPath(<span class="string">&quot;/demo1&quot;</span>); <span class="comment">// 则/demo1目录下的cookie都有username=ls</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Domain"><a class="headerlink" href="#Domain"></a>Domain</h4><ul><li>设置域名或ip，用来说<strong>不同域名下Cookie共享</strong><ul><li>如果设置了Cookie的父域名，子域名下的请求可以共享父域名下的Cookie</li><li>eg：<ul><li>父域名：<code>https://www.jd.com</code></li><li>子域名：<code>https://www.miaosha.jd.com</code></li></ul></li></ul></li><li>不能设置和当前域名无关的domain，比如访问localhost时候设置一个ccc.com这样的domain是不可以的，否则浏览器会直接无视</li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/cookie/domain&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieDomainServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;ww&quot;</span>);</span><br><span class="line">        cookie.setDomain(<span class="string">&quot;ccc.com&quot;</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MaxAge"><a class="headerlink" href="#MaxAge"></a>MaxAge</h4><ul><li>如果<strong>没有设置</strong>，则默认情况下存在于浏览器的内存中。<strong>关闭浏览器，则cookie信息失效</strong></li><li>设置一个<code>maxAge=正数的时间</code>，表示会<strong>在硬盘上面存活多少秒</strong></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/cookie/maxage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieMaxAgeServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;userid&quot;</span>, <span class="string">&quot;251&quot;</span>);</span><br><span class="line">        cookie.setMaxAge(<span class="number">5</span>); <span class="comment">// 设置一个过期时间，如果没有设置，则浏览器关闭时会被清楚</span></span><br><span class="line">        <span class="comment">// 这个只有浏览器知道</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="案例（cookie相关）"><a class="headerlink" href="#案例（cookie相关）"></a>案例（cookie相关）</h3><p>在访问一个请求的时候，输出上一次访问的时间</p><p>思路：</p><ol><li>访问该请求的时候，生成时间，放入到cookie中</li><li>访问该请求的时候，从cookie中取出这个时间，并且使用response做响应</li></ol><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/last/access&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LastAccessServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取cookie中的上一次访问时间</span></span><br><span class="line">        <span class="comment">// 假设设定了cookie的name的last</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="type">String</span> <span class="variable">lastDateString</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="literal">null</span> &amp; cookies.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;last&quot;</span>.equals(cookie.getName())) &#123;</span><br><span class="line">                    lastDateString = cookie.getValue();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(lastDateString != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">lastDateStringDecode</span> <span class="operator">=</span> URLDecoder.decode(lastDateString, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().println(lastDateStringDecode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向浏览器的cookie中做当前时间的设置</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">nowDate</span> <span class="operator">=</span> simpleDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">nowDateEncode</span> <span class="operator">=</span> URLEncoder.encode(nowDate, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.addCookie(<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;last&quot;</span>, nowDateEncode));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="服务器技术Session"><a class="headerlink" href="#服务器技术Session"></a>服务器技术Session</h2><ul><li>Session相当于每个用户存在服务器的保险柜，保险柜里可以存一些数据，这些数据也可以是<strong>敏感数据</strong>；</li><li>要获得保险柜要带着钥匙，如果钥匙丢了，就打不开这个保险柜</li></ul><h3 id="提供Session"><a class="headerlink" href="#提供Session"></a>提供Session</h3><ul><li><strong>Session不需要专门去提供</strong>，当我们获取Session的时候，其实就提供了Session给客户端</li><li>在服务端获取Session的时候，其实会提供一个响应头<code>set-cookie</code><ul><li><code>JSESSIONID</code>这样的一个key，其实就<strong>是保险柜的钥匙</strong></li></ul></li></ul><h3 id="获取Session"><a class="headerlink" href="#获取Session"></a>获取Session</h3><ul><li>获得Session可以<strong>使用Request提供的getSession方法</strong><ul><li><code>getSession()</code><ul><li>如果还没有创建Session，那么就创建一个Session</li><li>如果已经有了Session，那么就返回这个Session</li><li>当前这个客户端或用户第一个调用getSession方法的时候创建了Session</li></ul></li><li><code>getSession(boolean create)</code><ul><li>如果create的值为true则同上</li><li>如果create的值为false，那么如果有了Session则返回Session对象，如果没有则返回null，就不会创建Session</li></ul></li></ul></li></ul><p>实际上我们<strong>使用的无参方法</strong>更多一些</p><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/session/get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionGetServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 根据JSESSIONID，不需要我们手动取获取，内部已经封装好了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前用户地session，如果当前用户没有session，则新建一个session</span></span><br><span class="line">        <span class="comment">// Set-Cookie: JSESSIONID=DA43DEBCD0DFF4BBFC4371558FE8C7B4</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果boolean类型参数为true，和无参的getSession方法是一样的</span></span><br><span class="line">        <span class="comment">// HttpSession session = request.getSession(true);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果为false，且当前用户有session，则返回，如果没有session，则返回空</span></span><br><span class="line">        <span class="comment">// HttpSession session = request.getSession(false);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/JavaEE-conversation/4069838fc9ba47478ca2dc34112cc177.png" alt="在这里插入图片描述" loading="lazy"></p><h3 id="使用Session"><a class="headerlink" href="#使用Session"></a>使用Session</h3><ul><li>Session其实就像一个保险柜 → <strong><code>key-value</code>形式的保险柜</strong><ul><li>key：<code>String</code></li><li>value：<code>Object</code></li><li>存储：<code>setAttribute(String,Object)</code></li><li>获取：<code>getAttribute(String)</code></li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">WebServlet(<span class="string">&quot;/session/save&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionSaveServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// localhost:8080/demo2/session/save?username=zs</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 传入一个用户名 -&gt; 找到id，将id存在session里面</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>); <span class="comment">// 根据用户名可以找到该用户的id信息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假定这个id是222</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">222</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">        session.setAttribute(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line"></span><br><span class="line">        session.setAttribute(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/session/fetch&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionFetchServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// localhost:8080/demo2/session/fetch</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从session中获取username和id信息</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> (Integer) session.getAttribute(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(username + <span class="string">&quot; : &quot;</span> + id); <span class="comment">// zs : 222</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Session的生命周期"><a class="headerlink" href="#Session的生命周期"></a>Session的生命周期</h3><ul><li>对象生命周期：<ul><li>对象的创建：<code>request.getSession()</code></li><li>对象的销毁：关闭服务器、卸载应用</li></ul></li><li>数据的生命周期：<ul><li>数据的产生：<code>session域</code></li><li>数据的销毁：<strong>对象的销毁不会导致数据的销毁</strong><ul><li>数据的销毁只有以下两种可能性：<ol><li>session有效期到达（默认是30min）</li><li>主动调用<code>session.invalidate()</code>方法-----用在注销的场景下</li></ol></li></ul></li></ul></li></ul><hr><h2 id="常见问题"><a class="headerlink" href="#常见问题"></a>常见问题</h2><ol><li>关闭浏览器，Session是否被销毁？<ul><li><strong>并没有</strong></li><li>只不过当前浏览器发起请求的时候，通常没有继续携带之前的<code>JSESSIONID</code>，但如果你仍然携带之前的<code>JSESSIONID</code>，那么仍然可以获取数据</li></ul></li><li>服务器关闭，Session发生了什么？<ul><li>Session对象会被销毁，并且会被序列化（序列化：把数据写到服务器里）</li><li>当服务器重启时，会被反序列化（反序列化：把数据读出），重新加载到内容。</li><li>当时要注意，<strong>重启前后的Session对象并不是同一个，但是JSESSIONID是同一个值</strong></li></ul></li><li>Session失效，原因会是什么？<ul><li>Session失效就是从Session中获取不到其存储的信息，则可以认为Session失效<ul><li><p>跨域请求Session不能共享</p><ul><li>跨域：多个应用之间的ip或端口号不同<ul><li>比如：前端地址<code>localhost:9527</code>与后端服务器地址<code>localhost:8080</code></li></ul></li><li>每发起一次请求，就会新建一个新的Session</li></ul></li><li><p>过期或手动设置</p></li><li><p>请求携带的JSESSIONID变了</p></li></ul></li></ul></li><li>session底层是依赖于cookie的，但是如果浏览器禁用了cookie，那么session还可以使用吗？<ul><li>还可以。但是必须采用一种<strong>URL重写</strong>的方式。此时<strong>session的编号会附着在地址栏的后面</strong>，以<code>;</code>形式来进行分割</li><li>eg：<code>localhost:8080/demo2/session/fetch;JSESSIONID=aaaabc2849ea</code></li></ul></li></ol><hr><h2 id="案例（重构登录案例，并且增加注销功能）"><a class="headerlink" href="#案例（重构登录案例，并且增加注销功能）"></a>案例（重构登录案例，并且增加注销功能）</h2><ul><li><code>bean</code>目录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createdate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>mapper</code>目录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">    List&lt;Order&gt; <span class="title function_">selectByUserId</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectByUserNameAndPassword</span></span><br><span class="line">            <span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">selectByPrimaryKey</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.coo1heisenberg.demo3.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coo1heisenberg.demo3.bean.Order&quot;</span>&gt;</span></span><br><span class="line">        select id, name, price, user_id as userId from test_product</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            user_id = #&#123;user_id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.coo1heisenberg.demo3.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByUserNameAndPassword&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coo1heisenberg.demo3.bean.User&quot;</span>&gt;</span></span><br><span class="line">        select id, username, password, age, birthday, createDate, mobile from test_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByPrimaryKey&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coo1heisenberg.demo3.bean.User&quot;</span>&gt;</span></span><br><span class="line">        select id, username, password, age, birthday, createDate, mobile from test_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>servlet</code>目录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供一个list方法，登录成功才允许查看当前用户的订单信息，否则让其先登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/order/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">operation</span> <span class="operator">=</span> requestURI.substring(requestURI.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (operation) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;list&quot;</span>:</span><br><span class="line">                list(request, response);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// 首先要保证当前用户已经登陆 -&gt;  登录成功之后，session里才有用户信息</span></span><br><span class="line">        <span class="comment">// -&gt; 可以判断session是否有用户信息</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 登录失败</span></span><br><span class="line">            response.getWriter().println(<span class="string">&quot;登录失败，即将跳转登录页面&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;refresh&quot;</span>, <span class="string">&quot;2;url=/demo3/login.html&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 已经登录成功</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">userId</span> <span class="operator">=</span> user.getId();</span><br><span class="line">            <span class="type">OrderMapper</span> <span class="variable">orderMapper</span> <span class="operator">=</span> MybatisUtil.getSqlSession().getMapper(OrderMapper.class);</span><br><span class="line">            List&lt;Order&gt; orders = orderMapper.selectByUserId(userId);</span><br><span class="line">            response.getWriter().println(orders);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/user/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">operation</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        operation = requestURI.substring(requestURI.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (operation) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;login&quot;</span>:</span><br><span class="line">                login(request, response);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;info&quot;</span>:</span><br><span class="line">                info(request, response);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;logout&quot;</span>:</span><br><span class="line">                logout(request,response);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// 做注销功能 localhost:8080/demo3/user/logout</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        session.invalidate();</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;已经注销&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 意味着之前未登录成功</span></span><br><span class="line">            response.getWriter().println(<span class="string">&quot;还未登录，不能查看用户信息，请先登录，即将跳转&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;2;url=/demo3/login.html&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// user != null</span></span><br><span class="line">            <span class="comment">// 意味着已经登录成功</span></span><br><span class="line">            response.getWriter().println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 首先获得username和password</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 查询user记录</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> MybatisUtil.getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectByUserNameAndPassword(username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 根据user记录判断登录状态</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 4. 判断登录状态 user的list是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (users == <span class="literal">null</span> || users.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果登陆失败（list == null || list.size() == 0）</span></span><br><span class="line">            <span class="comment">// 刷新到refresh --&gt; 2;url=/demo2/login.html</span></span><br><span class="line">            <span class="comment">// 响应登录失败信息</span></span><br><span class="line">            response.getWriter().println(<span class="string">&quot;登录失败，即将跳转登录页面&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;refresh&quot;</span>, <span class="string">&quot;2;url=/demo3/login.html&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果登录成功（list.size &gt; 0）</span></span><br><span class="line">            <span class="comment">// 登录成功之后，将用户信息放在服务器Session里</span></span><br><span class="line">            <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">            session.setAttribute(<span class="string">&quot;user&quot;</span>,users.get(<span class="number">0</span>));</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;登录成功，可以访问其他请求&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Cookie和Session的区别与联系"><a class="headerlink" href="#Cookie和Session的区别与联系"></a>Cookie和Session的区别与联系</h2><ul><li>联系：Cookie和Session都是为了让服务端获取客户端提供的信息；提供的信息<strong>都是键值对形式</strong>的；Session技术是在Cookie技术的基础上进行的，<strong>都需要对请求头做处理</strong></li><li>区别：<ul><li><strong>信息位置</strong>：<ul><li>Cookie是客户端技术，信息存储在客户端（浏览器），也意味着前端可以操作</li><li>Session是服务器技术，信息储存在服务器</li></ul></li><li><strong>敏感性</strong>：<ul><li>Cookie共享的是常规信息，直接抓包获取的是对应的值</li><li>Session通常共享的是敏感信息，直接抓包获取的是id</li></ul></li><li><strong>值类型</strong>：<ul><li>Cookie的值为String字符串</li><li>Session的值为Object</li></ul></li><li><strong>跨应用</strong>：<ul><li>Cookie信息可以跨应用共享</li><li>Session信息局限于当前应用</li></ul></li></ul></li></ul><hr><h2 id="数据共享"><a class="headerlink" href="#数据共享"></a>数据共享</h2><ul><li>Request域：<strong>存在转发关系的Servlet之间</strong>的数据共享，比如Servlet和JSP数据共享<ul><li><code>request.getRequestDispatcher(“去掉应用名的uri”);</code></li></ul></li><li>Context域：<strong>整个应用之中</strong>的数据共享，比如整个应用中的SqlSessionFactory、properties等<ul><li><code>getServletContext();</code></li></ul></li><li>Session域：<strong>同一个用户（客户端）中</strong>的数据共享，比如登录之后的用户信息<ul><li>同一个<code>JSESSIONID</code></li></ul></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02 JavaEE_response（转载自之前的CSDN）</title>
      <link href="/2024/05/13/JavaEE-response/"/>
      <url>/2024/05/13/JavaEE-response/</url>
      
        <content type="html"><![CDATA[<h2 id="案例（请求分发案例）"><a class="headerlink" href="#案例（请求分发案例）"></a>案例（请求分发案例）</h2><ul><li>场景：有多个请求<ul><li><code>Http://localhost:8080/user/login</code> → 登录</li><li><code>Http://localhost:8080/user/register</code> → 注册</li><li><code>Http://localhost:8080/user/info</code> → 查看用户信息</li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * localhost:8080/demo1/user/login</span></span><br><span class="line"><span class="comment"> * localhost:8080/demo1/user/register</span></span><br><span class="line"><span class="comment"> * localhost:8080/demo1/user/info</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@WebServlet(value = &#123;&quot;/user/login&quot;, &quot;/user/register&quot;, &quot;/user/info&quot;&#125;)</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/user1/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">operation</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// /demo1/user/login</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        operation = requestURI.substring(requestURI.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//        if(&quot;login&quot;.equals(operation)) &#123;</span></span><br><span class="line"><span class="comment">//            login(request,resp);</span></span><br><span class="line"><span class="comment">//        &#125; else if(&quot;info&quot;.equals(operation)) &#123;</span></span><br><span class="line"><span class="comment">//            info(request,resp);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">switch</span> (operation) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;login&quot;</span>:</span><br><span class="line">                login(request, resp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;info&quot;</span>:</span><br><span class="line">                info(request, resp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;register&quot;</span>:</span><br><span class="line">                register(request, resp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;remove&quot;</span>:</span><br><span class="line">                remove(request, resp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>优化版本</strong>：</p><p>eg：</p><ul><li><code>DispatchUtil.java</code><ul><li>通过反射的方式，实现其通用性</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DispatchUtil</span> &#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(String operation, HttpServletRequest request</span></span><br><span class="line"><span class="params">            , HttpServletResponse response, HttpServlet instance)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.lang.Class.getDeclaredMethod()方法返回一个Method对象，</span></span><br><span class="line"><span class="comment">// 它反映此Class对象所表示的类或接口的指定已声明方法。</span></span><br><span class="line"><span class="comment">// name 参数是一个字符串，指定所需的方法的简单名称，</span></span><br><span class="line"><span class="comment">// parameterTypes 参数是一个数组的Class对象识别方法的形参类型，在声明的顺序</span></span><br><span class="line">                        </span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> instance.getClass().getDeclaredMethod(operation</span><br><span class="line">                , HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line"></span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        method.invoke(instance, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;request, response&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@WebServlet(value = &#123;&quot;/user/login&quot;, &quot;/user/register&quot;, &quot;/user/info&quot;&#125;)</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/user2/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">operation</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// /demo1/user/login</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        operation = requestURI.substring(requestURI.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//        if(&quot;login&quot;.equals(operation)) &#123;</span></span><br><span class="line"><span class="comment">//            login(request,resp);</span></span><br><span class="line"><span class="comment">//        &#125; else if(&quot;info&quot;.equals(operation)) &#123;</span></span><br><span class="line"><span class="comment">//            info(request,resp);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">// 不需要再switch判断，直接写方法名函数就可以</span></span><br><span class="line">        DispatchUtil.dispatch(operation, request, resp, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;logout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>Response</h1><p>响应报文的封装，设置响应报文</p><p>eg：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200</span><br><span class="line">Vary: accept-encoding,origin,access-control-request-headers,access-control-request-method,accept-encoding</span><br><span class="line">Set-Cookie: rememberMe=deleteMe; Path=/; Max-Age=0; Expires=Sun, 12-Feb-2023 06:51:56 GMT</span><br><span class="line">Set-Cookie: JSESSIONID=24287278-5ebb-407d-a3f7-56b74782c4c7; Path=/; HttpOnly</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Date: Mon, 13 Feb 2023 06:51:56 GMT</span><br><span class="line">Content-Length: 200</span><br><span class="line"></span><br><span class="line">&#123;&quot;errno&quot;:0,&quot;data&quot;:&#123;&quot;adminInfo&quot;:</span><br><span class="line">&#123;&quot;nickName&quot;:&quot;admin123&quot;,&quot;avatar&quot;:&quot;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&quot;&#125;,</span><br><span class="line">&quot;token&quot;:&quot;24287278-5ebb-407d-a3f7-56b74782c4c7&quot;&#125;,&quot;errmsg&quot;:&quot;成功&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="响应行"><a class="headerlink" href="#响应行"></a>响应行</h2><p>设置一下响应状态码</p><table><thead><tr><th>方法名</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>setStatus(int)</code></td><td>参数就是状态码</td><td>设置响应状态码</td></tr></tbody></table><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常用的响应状态码：200、404、302、400、500</span></span><br><span class="line"><span class="comment"> * 响应行中的响应状态码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/line&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LineServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.setStatus(<span class="number">302</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/JavaEE-response/7930d99e192747eab608f750a6f3e2ef.png" alt="在这里插入图片描述" loading="lazy"></p><hr><h2 id="响应头"><a class="headerlink" href="#响应头"></a>响应头</h2><ul><li>响应头是<code>key：value</code>的格式，提供了通用的方法，可以设置响应头的key和value</li><li>提供了一些特定的方法，特定的方法做的事情，就是<strong>设置特定响应头的值</strong></li></ul><table><thead><tr><th>方法</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>setHeader(String,String)</code></td><td>参数1提供key，参数2提供value</td><td>通用的方法</td></tr></tbody></table><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/header&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 第一个参数是key，第二个参数是value</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;custom-header&quot;</span>,<span class="string">&quot;aaaaaa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/JavaEE-response/b46eaa9430894bbabeb7ed0ab8f0ceef.png" alt="在这里插入图片描述" loading="lazy"></p><hr><h2 id="响应体"><a class="headerlink" href="#响应体"></a>响应体</h2><ul><li><strong>可以使用字符流，也可以使用字节流</strong></li><li>场景：<ul><li>字符流：响应文本数据，最主要的场景就是前后端分离之后，通过字符流响应Json数据</li><li>字节流：响应图片、文件，也通常在文件下载的场景下使用</li></ul></li></ul><table><thead><tr><th>方法</th><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td><code>getWriter()</code></td><td>PrintWriter</td><td>字符流</td></tr><tr><td><code>getOutputStream()</code></td><td>ServletOutputStream</td><td>字节流</td></tr></tbody></table><p>eg：</p><ul><li>字符流举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/body1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BodyServlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// response.getWriter().write(&quot;hello world&quot;);</span></span><br><span class="line">        <span class="comment">// 如果把响应体里的字符以utf-8的方式编码，不一定能解决中文乱码的问题</span></span><br><span class="line">        <span class="comment">// 因为浏览器不一定以utf-8的方式来解码</span></span><br><span class="line">        <span class="comment">// 从根本上解决这个问题通知浏览器以utf-8的方式解码</span></span><br><span class="line">        <span class="comment">// content-type:指响应体里的正文类型</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// response.getWriter().write(&quot;hello world&quot;);</span></span><br><span class="line">        <span class="comment">// 默认的编码：iso-8859-1</span></span><br><span class="line">        response.getWriter().println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/JavaEE-response/f88ccb89ac124ba7b8a20169d103c517.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li>字节流举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/body2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BodyServlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// http://localhost:8080/demo1/body2?pic=1.jpg</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pic</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;pic&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;D:\\test_photo&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path, pic);</span><br><span class="line">        <span class="comment">// 要显示图片，需要在响应体中提供其字节数据 -&gt; 浏览器就会显示图片</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((length = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(bytes, <span class="number">0</span> ,length);</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="特殊响应头"><a class="headerlink" href="#特殊响应头"></a>特殊响应头</h2><ul><li>特殊的几个响应头：<ol><li><code>refresh</code> → 定时刷新、跳转</li><li><code>content-type</code> → 限定响应的正文（也可以解决中文乱码问题）</li><li><code>content-disposition</code> → 文件下载</li><li><code>location</code> → 重定向</li></ol></li></ul><h3 id="refresh"><a class="headerlink" href="#refresh"></a>refresh</h3><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动显示当前的时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/refresh&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.setHeader(<span class="string">&quot;refresh&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(pattern);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> simpleDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        response.getWriter().println(dateStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/refresh2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshServlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 指3s之后去访问demo2/hello.jsp</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;refresh&quot;</span>, <span class="string">&quot;3;url=/demo1/hello.jsp&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;请稍后马上跳转到欢迎页面&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Content-type"><a class="headerlink" href="#Content-type"></a>Content-type</h3><ul><li><strong>通常不需要设置</strong></li><li>比如我们响应Json数据给前端，我们可以设置<code>Content-Type：application/json</code></li><li>我们要在这里做字符集的设置，如果没有做有可能出现中文乱码</li></ul><h3 id="Content-disposition"><a class="headerlink" href="#Content-disposition"></a>Content-disposition</h3><ul><li><strong>下载的场景会使用</strong><ul><li>eg：<code>content-disposition: attachment;filename=1.jpg</code></li><li>以<code>1.jpg</code>来下载正文</li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContentDispositionServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pic</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;pic&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;D:\\test_photo&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果代码没有这行内容，那么就是显示该图片</span></span><br><span class="line">        <span class="comment">// 如果做下载，需要设置header content-disposition</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;content-disposition&quot;</span>, <span class="string">&quot;attachment;&quot;</span> + pic);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(path, pic));</span><br><span class="line"></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((length = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(bytes, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="location"><a class="headerlink" href="#location"></a>location</h3><ul><li><strong>重定向</strong></li><li>状态码：<code>302</code></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/location&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocationServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问到LocationServlet&quot;</span>);</span><br><span class="line">        resp.setStatus(<span class="number">302</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;location&quot;</span>,<span class="string">&quot;http://localhost:8080/demo1/refresh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="案例（登录案例）"><a class="headerlink" href="#案例（登录案例）"></a>案例（登录案例）</h2><blockquote><ul><li>这个请求由登录页面提供，我们可以通过html提供一个登录表单，该表单会发出请求</li><li><code>http://localhost:8080/user/login</code>→ Servlet → 检查用户名和密码是否正确（使用一下MyBatis） →</li><li>如果正确，那么就提示登录成功</li><li>如果错误，那么刷新登录页面</li></ul></blockquote><blockquote><p>任务拆解：</p><ol><li>包含登录表单的 login.html文件，放在webapp目录下</li><li>开发UserServlet</li><li>/user/login对应的处理方法，使用MyBatis做查询</li><li>/user/info对应的处理方法</li><li>整合MyBatis，在应用程序中维护SqlSessionFactory实例</li></ol></blockquote><ul><li>Mybatis的配置：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectByUserNameAndPassword</span></span><br><span class="line">            <span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">selectByPrimaryKey</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.coo1heisenberg.demo2.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByUserNameAndPassword&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coo1heisenberg.demo2.bean.User&quot;</span>&gt;</span></span><br><span class="line">        select id, username, password, age, birthday, createDate, mobile from test_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByPrimaryKey&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coo1heisenberg.demo2.bean.User&quot;</span>&gt;</span></span><br><span class="line">        select id, username, password, age, birthday, createDate, mobile from test_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Servlet的配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/user/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        process(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">operation</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        operation = requestURI.substring(requestURI.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (operation) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;login&quot;</span>:</span><br><span class="line">                login(request, response);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;info&quot;</span>:</span><br><span class="line">                info(request, response);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        response.getWriter().println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 首先获得username和password</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 查询user记录</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> MybatisUtil.getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectByUserNameAndPassword(username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 根据user记录判断登录状态</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 4. 判断登录状态 user的list是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (users == <span class="literal">null</span> || users.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果登陆失败（list == null || list.size() == 0）</span></span><br><span class="line">            <span class="comment">// 刷新到refresh --&gt; 2;url=/demo2/login.html</span></span><br><span class="line">            <span class="comment">// 响应登录失败信息</span></span><br><span class="line">            response.getWriter().println(<span class="string">&quot;登录失败，即将跳转登录页面&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;refresh&quot;</span>, <span class="string">&quot;2;url=/demo2/login.html&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果登录成功（list.size &gt; 0）</span></span><br><span class="line">            <span class="comment">// 响应登录成功信息</span></span><br><span class="line">            response.getWriter().println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">            request.setAttribute(<span class="string">&quot;user&quot;</span>, users.get(<span class="number">0</span>));</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/user/info&quot;</span>).forward(request, response);</span><br><span class="line">            <span class="comment">// 跳转到info -&gt; 分享user的id信息（直接分享user信息）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>HTML的配置</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--action：表示当前表单中的内容提交给哪个页面进行处理--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--method:表示当前表单提交的方式，常见的有get和post方式，默认是get提交--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/demo2/user/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 JavaEE_request（转载自之前的CSDN）</title>
      <link href="/2024/05/13/JavaEE-request/"/>
      <url>/2024/05/13/JavaEE-request/</url>
      
        <content type="html"><![CDATA[<h1>前置知识点</h1><h2 id="URL和URI"><a class="headerlink" href="#URL和URI"></a>URL和URI</h2><ul><li>URL：统一资源位置</li><li>URI：统一资源标识符<ul><li>端口号后面的所有部分都是URI</li></ul></li><li>举例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">比如请求：http://localhost:8080/demo/hello.jsp</span><br><span class="line">URL：http://localhost:8080/demo/hello.jsp</span><br><span class="line">URI：/demo/hello.jsp</span><br></pre></td></tr></table></figure><h2 id="HTTP请求报文和HTTP响应报文"><a class="headerlink" href="#HTTP请求报文和HTTP响应报文"></a>HTTP请求报文和HTTP响应报文</h2><ul><li>HTTP请求报文<ul><li>请求行<ul><li>请求方法（GET/POST）</li><li>请求URL</li><li>请求协议</li></ul></li><li>请求头<ul><li>格式是<code>key:value</code></li><li>比较特殊的请求头：<ul><li>Content-Type：由浏览器提供给服务器的正文类型</li><li>Accept：浏览器期望从服务器获得正文的类型（ 服务器提供给浏览器的正文类型）</li><li>Host：主机ip</li></ul></li></ul></li><li>（空行）</li><li>请求体<ul><li>普通的Get请求和form表单提供的Get/Post请求，如果携带了参数它的格式是 <code>key1=value1&amp;key2=value2&amp;key3=value3</code>等</li></ul></li><li>携带Json数据的post请求   <code>&#123;&#125;</code>或<code>[]</code></li></ul></li><li>HTTP响应报文<ul><li>响应行<ul><li>协议</li><li>响应状态码</li></ul></li><li>响应头<ul><li>格式是<code>key:value</code></li><li>Content-Type：服务器提供给浏览器的正文类型，后面通常会跟charset，比如<code>application/json;charset=utf-8</code></li></ul></li><li>（空行）</li><li>响应体<ul><li>如果是json，Content-Type中通常是application/json</li></ul></li></ul></li></ul><hr><h1>Request</h1><h2 id="请求行"><a class="headerlink" href="#请求行"></a>请求行</h2><p>eg：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST http://101.43.69.31:8083/admin/auth/login HTTP/1.1</span><br><span class="line"></span><br><span class="line">GET http://localhost:8080/demo3/hello?username=zhangsan HTTP/1.1</span><br></pre></td></tr></table></figure><table><thead><tr><th>信息</th><th>内容</th><th>方法</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td>请求方法</td><td>POST、GET</td><td><code>getMethod()</code></td><td>String</td><td>获得请求方法</td></tr><tr><td>URL</td><td><a href="http://101.43.69.31:8083/admin/auth/login">http://101.43.69.31:8083/admin/auth/login</a></td><td><code>getRequestURL()</code></td><td>StringBuffer</td><td>获得请求URL</td></tr><tr><td>URI</td><td>/admin/auth/login、/demo3/hello</td><td><code>getRequestURI()</code></td><td>String</td><td>获得请求URI</td></tr><tr><td>context-path</td><td>/demo3</td><td><code>getContextPath()</code></td><td>String</td><td>获得上下文</td></tr><tr><td>服务器ip</td><td>101.43.69.31、localhost</td><td><code>getLocalAddr()</code></td><td>String</td><td>获得ip</td></tr><tr><td>端口号</td><td>8083、8080</td><td><code>getLocalPort()</code></td><td>int</td><td>获得端口号</td></tr><tr><td>QueryString</td><td>username=zhangsan</td><td><code>getQueryString()</code></td><td>String</td><td>获得Get请求的查询字符串</td></tr><tr><td>协议</td><td>HTTP/1.1</td><td><code>getProtocol()</code></td><td>String</td><td>获得通讯协议</td></tr></tbody></table><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造一个GET请求：http://localhost:8080/demo1/user?username=zs HTTP/1.1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 构造一个POST请求：http://localhost:8080/demo1/user HTTP/1.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        core(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        core(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">core</span><span class="params">(HttpServletRequest requset, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// 获得请求方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> requset.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得URL</span></span><br><span class="line">        <span class="comment">// http://localhost:8080/demo1/user</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">requestURL</span> <span class="operator">=</span> requset.getRequestURL();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> requestURL.toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取本地ip</span></span><br><span class="line">        <span class="comment">// 0:0:0:0:0:0:0:1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">localAddr</span> <span class="operator">=</span> requset.getLocalAddr();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取本地端口号</span></span><br><span class="line">        <span class="comment">// 8080</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">localPort</span> <span class="operator">=</span> requset.getLocalPort();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取上下文的路径</span></span><br><span class="line">        <span class="comment">// /demo1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> requset.getContextPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取URI</span></span><br><span class="line">        <span class="comment">// /demo1/user</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> requset.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得Get请求的查询字符串</span></span><br><span class="line">        <span class="comment">// username=zs</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queryString</span> <span class="operator">=</span> requset.getQueryString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取协议的部分</span></span><br><span class="line">        <span class="comment">// HTTP/1.1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> requset.getProtocol();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="请求头"><a class="headerlink" href="#请求头"></a>请求头</h2><ul><li>请求头中的信息，都是<code>key：value</code>的形式<ul><li>可以知道有哪一些请求头 Key → <strong>获得所有的请求头</strong></li><li>也可以知道这些请求头当中的值是什么 Value → <strong>获得特定Key对应的Value</strong></li></ul></li><li><strong>请求头大小写不敏感</strong></li></ul><table><thead><tr><th>方法</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td><code>getHeaderNames()</code></td><td><code>Enumeration&lt;String&gt;</code></td><td>获得所有的请求头，可以通过遍历的方式来使用，使用方式类似于Iterator</td></tr><tr><td><code>getHeader(String)</code></td><td><code>String</code></td><td>传入的是请求头的Key，返回的是请求头的value</td></tr></tbody></table><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/header&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获得了请求头的枚举的类型</span></span><br><span class="line">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="comment">// 获取所有的请求头</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">headerName</span> <span class="operator">=</span> headerNames.nextElement();</span><br><span class="line">            <span class="comment">// 获取请求头对应的value</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">headerValue</span> <span class="operator">=</span> request.getHeader(headerName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// System.out.println(headerName + &quot;：&quot; + headerValue);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果只想打印accept的值</span></span><br><span class="line">            <span class="comment">// toLowerCase()是改成纯小写</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;accept&quot;</span>.equals(headerName.toLowerCase())) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">accept</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;accept&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;accept = &quot;</span> + accept);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="请求体"><a class="headerlink" href="#请求体"></a>请求体</h2><ul><li>构造一个<code>form</code>表单</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/demo1/body1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Postman构造的<br><img src="/images/JavaEE-request/eee91adeee6649a798a2bf8a14c95807.png" alt="在这里插入图片描述" loading="lazy"></li><li>通过fiddler抓取Postman构造的POST请求报文：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:8080/demo1/body1 HTTP/1.1</span><br><span class="line">User-Agent: PostmanRuntime/7.37.0</span><br><span class="line">Accept: */*</span><br><span class="line">Postman-Token: 58bc8447-cae4-438e-ab71-b53d58dd80f6</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 11</span><br><span class="line"></span><br><span class="line">// 这部分是请求体</span><br><span class="line">username=zs</span><br></pre></td></tr></table></figure><ul><li>字节流InputStream、字符流Reader<ul><li>字符流通常不写出，之后请求参数会以JSON字符串的形式提供（<strong>getReader()读取即可</strong>）</li><li>在同一个方法中，<strong>不能同时使用字符流和字节流</strong><ul><li>原因：里面有标记，使用其中的一个流会导致标记后移，另外一个流无法使用</li></ul></li></ul></li></ul><table><thead><tr><th>内容</th><th>方法</th><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>字节流</td><td><code>getInputStream()</code></td><td>ServletInputStream</td><td>获得字节流</td></tr><tr><td>字符流</td><td><code>getReader()</code></td><td>BufferedReader</td><td>获得字符流</td></tr></tbody></table><p>eg：</p><ul><li>字符流举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/body1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BodyServlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 构造POST请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 首先获得字符流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> request.getReader();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接获得username=zs</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节流举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字节流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/body2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BodyServlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 首先获得字节流</span></span><br><span class="line">        <span class="type">ServletInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> request.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把里面的值保存到 D://tmp//body.txt</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:/body.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((length = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fileOutputStream.write(bytes,<span class="number">0</span>,length);</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="特殊信息"><a class="headerlink" href="#特殊信息"></a>特殊信息</h2><h3 id="获取客户机和服务器主机信息"><a class="headerlink" href="#获取客户机和服务器主机信息"></a>获取客户机和服务器主机信息</h3><ul><li><strong>请求</strong>是从客户机发到服务器的，在服务器中处理信息的获得，那么<strong>对于服务器</strong>，<strong>本地local是服务器，远程remote是客户机</strong></li><li>在Servlet中可以获得本地的IP和Port，也可以获得远程IP和Port</li></ul><table><thead><tr><th>信息</th><th>方法</th><th>返回值</th></tr></thead><tbody><tr><td>本地（服务器）IP</td><td><code>getLocalAddr()</code></td><td>String</td></tr><tr><td>本地（服务器）端口号</td><td><code>getLocalPort()</code></td><td>int</td></tr><tr><td>远程（客户机）IP</td><td><code>getRemoteAddr()</code></td><td>String</td></tr><tr><td>远程（客户机）端口号</td><td><code>getRemotePort()</code></td><td>int</td></tr></tbody></table><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里发送的请求是：localhost:8080/demo1/addr</span></span><br><span class="line"><span class="comment"> * 192.168.XXX.XXX/demo/addr也可以同样访问</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/addr&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddrPortServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">localAddr</span> <span class="operator">=</span> request.getLocalAddr();</span><br><span class="line">        <span class="type">int</span> <span class="variable">localPort</span> <span class="operator">=</span> request.getLocalPort();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteAddr</span> <span class="operator">=</span> request.getRemoteAddr();</span><br><span class="line">        <span class="type">int</span> <span class="variable">remotePort</span> <span class="operator">=</span> request.getRemotePort();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;come from &quot;</span> + remoteAddr + <span class="string">&quot;: &quot;</span> + remotePort);</span><br><span class="line">        System.out.println(<span class="string">&quot;server is &quot;</span> + localAddr + <span class="string">&quot;: &quot;</span> + localPort);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="请求参数"><a class="headerlink" href="#请求参数"></a>请求参数</h2><p>请求参数的场景：</p><ul><li>请求参数 <strong>在请求行中</strong><ul><li><code>getQueryString()</code></li></ul></li><li>请求参数 <strong>在请求体中</strong><ul><li><code>getInputStream()/getReader()</code></li></ul></li><li><strong>指的是：<code>key=value&amp;key=value</code></strong></li></ul><p>eg：<br>手动实现获取请求参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/parameter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// GET请求请求参数出现在请求行里</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">parameterStr</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// username=zs&amp;password=ls</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;GET&quot;</span>.equals(request.getMethod()))&#123;</span><br><span class="line">            parameterStr = request.getQueryString();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod())) &#123;</span><br><span class="line">            parameterStr = request.getReader().readLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// http://localhost:8080/demo1?username=zs&amp;password=ls</span></span><br><span class="line">        <span class="comment">// 能否解析请求参数以及所对应的值</span></span><br><span class="line">        <span class="keyword">if</span> (parameterStr != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(parameterStr)) &#123;</span><br><span class="line">            String[] parameterArray = parameterStr.split(<span class="string">&quot;\\&amp;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String parameter : parameterArray) &#123;</span><br><span class="line">                System.out.println(parameter);</span><br><span class="line">                <span class="type">String</span> <span class="variable">parameterName</span> <span class="operator">=</span> parameter.substring(<span class="number">0</span>, parameter.indexOf(<span class="string">&quot;=&quot;</span>)); <span class="comment">//username=zs</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">parameterValue</span> <span class="operator">=</span> parameter.substring(parameter.indexOf(<span class="string">&quot;=&quot;</span>) + <span class="number">1</span>); <span class="comment">// password=ls</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接封装"><a class="headerlink" href="#直接封装"></a>直接封装</h3><p>实际开发中并不需要我们手动实现找出请求参数，因为Request已经帮我们封装了可以直接使用的方法了</p><p><code>request.getParameterXXX</code>这样的一些方法：</p><table><thead><tr><th>方法</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td><code>getParameterNames()</code></td><td>Enumeration&lt;String&gt;</td><td>获得所有的key</td></tr><tr><td><code>getParameterMap()</code></td><td>Map&lt;String,String[]&gt;</td><td>获得所有的请求参数</td></tr><tr><td><code>getParameter(String)</code></td><td>String</td><td>获得第一个值</td></tr><tr><td><code>getParameterValues(String)</code></td><td>String[]</td><td>获得所有值</td></tr></tbody></table><ul><li>request对于请求参数的封装实际上，封装为一个<code>Map&lt;String,String[]&gt;</code><ul><li>eg：<code>username=zs&amp;password=12345&amp;hobby=sing&amp;hobby=dance&amp;hobby=rap&amp;hobby=basketball</code></li></ul></li></ul><p><img src="/images/JavaEE-request/ec1f73edad984674ae230e13e6e25725.png" alt="在这里插入图片描述" loading="lazy"></p><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Request提供的方法来获取参数</span></span><br><span class="line"><span class="comment"> * http://localhost:8080/demo1/parameter2</span></span><br><span class="line"><span class="comment"> * ?username=zs&amp;password=12345&amp;hobby=sing&amp;hobby=dance&amp;hobby=rap&amp;hobby=basketball</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 可以是GET请求，通过queryString的方式提供</span></span><br><span class="line"><span class="comment"> * 也可以POST请求，通过请求体提供参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/parameter2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterServlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取key值</span></span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = request.getParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (parameterNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">parameterName</span> <span class="operator">=</span> parameterNames.nextElement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">parameterValue</span> <span class="operator">=</span> request.getParameter(parameterName);</span><br><span class="line">            System.out.println(parameterName + <span class="string">&quot; = &quot;</span> + parameterValue);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            username = zs</span></span><br><span class="line"><span class="comment">            password = 12345</span></span><br><span class="line"><span class="comment">            hobby = sing</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            String[] parameterValues = request.getParameterValues(parameterName);</span><br><span class="line">            System.out.println(parameterName + <span class="string">&quot; = &quot;</span> + Arrays.asList(parameterValues));</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            username = [zs]</span></span><br><span class="line"><span class="comment">            password = [12345]</span></span><br><span class="line"><span class="comment">            hobby = [sing, dance, rap, basketball]</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        Iterator&lt;String&gt; iterator = parameterMap.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">parameterName</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            String[] parameterValues = parameterMap.get(parameterName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用类型"><a class="headerlink" href="#引用类型"></a>引用类型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/demo1/parameter4/register?</span><br><span class="line">username=bob&amp;password=123456&amp;age=21&amp;birthday=2004-01-16&amp;mobile=18801106688</span><br></pre></td></tr></table></figure><ul><li>将请求参数封装为一个引用类型的对象</li></ul><p><strong>案例（Servlet与Mybatis结合）</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> Date createDate;</span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.coo1heisenberg.demo1.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span>&gt;</span></span><br><span class="line">        insert into test_user(username, password, age, birthday, createDate, mobile)</span><br><span class="line">        values (#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;birthday&#125;,#&#123;createDate&#125;,#&#123;mobile&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/parameter/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterServlet3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> MybatisUtil.getSqlSession().getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这部分过于繁琐</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(request.getParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        user.setPassword(request.getParameter(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        user.setAge(Integer.parseInt(request.getParameter(<span class="string">&quot;age&quot;</span>)));</span><br><span class="line">        <span class="type">String</span> <span class="variable">birthdayStr</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;birthday&quot;</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">dateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> dateFormat.parse(birthdayStr);</span><br><span class="line">            user.setBirthday(date);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        user.setCreateDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        user.setMobile(request.getParameter(<span class="string">&quot;mobile&quot;</span>));</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对上面的代码进行优化</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成一个工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DAY_FORMAT_PATTERN</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getInstance</span><span class="params">(Class&lt;T&gt; clazz, HttpServletRequest request)</span></span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建一个实例</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clazz里的成员变量名 与 请求参数名对应</span></span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = request.getParameterNames(); <span class="comment">// fieldNames</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (parameterNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="comment">// 获得请求参数的值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">parameterName</span> <span class="operator">=</span> parameterNames.nextElement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">parameterValue</span> <span class="operator">=</span> request.getParameter(parameterName);</span><br><span class="line">            <span class="comment">// 获得成员变量</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(parameterName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (field.getType() == Integer.class) &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">integerParameterValue</span> <span class="operator">=</span> Integer.parseInt(parameterValue);</span><br><span class="line">                field.set(instance, integerParameterValue);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (field.getType() == Date.class) &#123;</span><br><span class="line">                <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(DAY_FORMAT_PATTERN);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> simpleDateFormat.parse(parameterValue);</span><br><span class="line">                field.set(instance, date);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 给成员变量赋值</span></span><br><span class="line">                field.set(instance, parameterValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/parameter4/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterServlet4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> MybatisUtil.getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            user = ParameterUtil.getInstance(User.class, request);</span><br><span class="line">            user.setCreateDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>BeanUtils</strong><ul><li>第三方工具类，作用和上面自己写的工具类性质一样</li><li><strong>引入依赖<code>commons-beanutils</code></strong></li><li><strong>这个工具类<code>Date</code>转换不了</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanUtils.copyProperties(instance, parameterMap);<span class="comment">//直接使用其提供的copyProperties方法</span></span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/parameter5/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterServlet5</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> MybatisUtil.getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        BeanUtils.copyProperties(user,parameterMap);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="POST请求请求参数乱码"><a class="headerlink" href="#POST请求请求参数乱码"></a>POST请求请求参数乱码</h2><p>乱码问题：<strong>编解码不一致</strong></p><p>eg：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>GET请求<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/demo1/parameter/encoding&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>POST请求<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/demo1/parameter/encoding&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这次测试：username=&quot;张三&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/parameter/encoding&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterEncodingServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 需要设置转码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 控制台出现：username = ??????</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="文件上传"><a class="headerlink" href="#文件上传"></a>文件上传</h2><ul><li>创建<code>form</code>表单<br><img src="/images/JavaEE-request/f3fe53e46c55425faa96db8bc87f9e84.png" alt="在这里插入图片描述" loading="lazy"></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">注册用户信息</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/parameter/file&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--头像上传--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--要提交文件要加上 enctype=&quot;multipart/form-data&quot;--&gt;</span></span><br><span class="line">  头像：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>发送请求通过fiddler抓取</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:8080/parameter/file HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 167653</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot;Chromium&quot;;v=&quot;122&quot;, &quot;Not(A:Brand&quot;;v=&quot;24&quot;, &quot;Microsoft Edge&quot;;v=&quot;122&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://localhost:8080</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundary8bJUh6YXwtkxIifX</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http://localhost:8080/demo1/file.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line">Cookie: Pycharm-89c7dd8b=47f9fb69-6795-467d-875b-0a44c63e1e97; Idea-75c3c9a=b19ee743-c677-4bab-b7bd-673c42a25ce0</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这里是普通的请求信息--&gt;</span></span><br><span class="line">------WebKitFormBoundary8bJUh6YXwtkxIifX</span><br><span class="line">Content-Disposition: form-data; name=&quot;username&quot;</span><br><span class="line"></span><br><span class="line">zs</span><br><span class="line">------WebKitFormBoundary8bJUh6YXwtkxIifX</span><br><span class="line">Content-Disposition: form-data; name=&quot;password&quot;</span><br><span class="line"></span><br><span class="line">123456</span><br><span class="line">------WebKitFormBoundary8bJUh6YXwtkxIifX  ---&gt; 这是分隔符</span><br><span class="line">Content-Disposition: form-data; name=&quot;age&quot;</span><br><span class="line"></span><br><span class="line">25</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这里是文件的请求信息--&gt;</span></span><br><span class="line">------WebKitFormBoundary8bJUh6YXwtkxIifX</span><br><span class="line">Content-Disposition: form-data; name=&quot;avatar&quot;; filename=&quot;1.jpg&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这里是图片的字节数据--&gt;</span></span><br><span class="line">     JFIF  H H    1lPhotoshop 3.0 8BIM     Z %G   t 8BIM%     T vN (   Ǹ  8BIM:                 </span><br><span class="line">printOutput       PstSbool    Inteenum    Inte    Img    printSixteenBitbool    </span><br><span class="line">printerNameTEXT        printProofSetupObjc   h!h7  n     </span><br><span class="line">proofSetup       Bltnenum   builtinProof   proofCMYK 8BIM;    -           printOutputOptions       Cptnbool     Clbrbool     RgsMbool     CrnCbool     CntCbool     Lblsbool     Ngtvbool     EmlDbool     Intrbool     BckgObjc         RGBC       Rd  doub@o          Grn doub@o          Bl  doub@o          BrdTUntF#Rlt            Bld UntF#Rlt            RsltUntF#Pxl@R         </span><br><span class="line">vectorDatabool    PgPsenum    PgPs    PgPC    LeftUntF#Rlt            Top UntF#Rlt            Scl UntF#Prc@Y         cropWhenPrintingbool    cropRectBottomlong       cropRectLeftlong       </span><br><span class="line">cropRectRightlong       </span><br><span class="line">cropRectToplong     8BIM       H     H    8BIM&amp;               ?   8BIM</span><br><span class="line">        8BIM        8BIM               8BIM&#x27;     </span><br><span class="line">        8BIM      H /ff  lff       /ff            2    Z         5    -        8BIM      p                                                                                                            8BIM          @  @    8BIM         8BIM    9                @    1 8                                @                                               null      boundsObjc         Rct1       Top long        Leftlong        Btomlong       Rghtlong  @   slicesVlLs   Objc        slice       sliceIDlong        groupIDlong       originenum   ESliceOrigin   </span><br><span class="line">autoGenerated    Typeenum   </span><br><span class="line">ESliceType    Img    boundsObjc         Rct1       Top long        Leftlong        Btomlong       Rghtlong  @   urlTEXT         nullTEXT         MsgeTEXT        altTagTEXT        cellTextIsHTMLbool   cellTextTEXT        horzAlignenum   ESliceHorzAlign    default   vertAlignenum   ESliceVertAlign    default   </span><br><span class="line">bgColorTypeenum   ESliceBGColorType    None   topOutsetlong       </span><br><span class="line">leftOutsetlong       bottomOutsetlong       </span><br><span class="line">rightOutsetlong     8BIM(        ?       8BIM      8BIM        8BIM    (           x         (m      XICC_PROFILE   HLino  mntrRGB XYZ       1  acspMSFT    IEC sRGB                      -HP                                                 cprt  P   3desc      lwtpt      bkpt     rXYZ     gXYZ  ,   bXYZ  @   dmnd  T   pdmdd       vued  L    view      $lumi      meas     $tech  0   rTRC  &lt;  gTRC  &lt;  bTRC  &lt;  text    Copyright (c) 1998 Hewlett-Packard Company  desc       sRGB IEC61966-2.1           sRGB IEC61966-2.1                                                  XYZ        Q     XYZ                 XYZ       o   8    XYZ       b        XYZ       $        desc       IEC http://www.iec.ch           IEC http://www.iec.ch                                              desc       .IEC 61966-2.1 Default RGB colour space - sRGB           .IEC 61966-2.1 Default RGB colour space - sRGB                      desc       ,Reference Viewing Condition in IEC61966-2.1           ,Reference Viewing Condition in IEC61966-2.1                          view        _.      </span><br><span class="line"> \    XYZ      LV P   W meas                             sig     CRT curv           </span><br><span class="line">     # ( - 2 7 ; @ E J O T Y ^ c h m r w |                                                   </span><br><span class="line">%+28&gt;ELRY`gnu|                &amp;/8AKT]gqz             </span><br><span class="line">!-8COZfr~           -;HUcq~         </span><br><span class="line">+:IXgw        &#x27;7HYj&#123;           + = O a t              </span><br><span class="line">2FZn       %:Ody      </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>使用Request中的<code>getPart</code>方法直接拿到其图片部分<ul><li><code>Part getPart(String var1) throws IOException, ServletException;</code></li></ul></li><li>使用<code>getPart</code>方法注意加注解<code>@MultipartConfig</code></li><li><strong>获得Part对象，通过Part中提供的方法可以获得其他具体的信息</strong>：</li></ul><table><thead><tr><th>方法</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td><code>getInputStream()</code></td><td>InputStream</td><td>获得字节输入流，可以读取字节数据将其保存下来</td></tr><tr><td><code>getContentType()</code></td><td>String</td><td>获得正文类型，比如png图片，其值为image/png</td></tr><tr><td><code>getSize()</code></td><td>long</td><td>获得文件字节大小</td></tr><tr><td><code>getName()</code></td><td>String</td><td>获得请求参数名（这里就是avatar）</td></tr><tr><td><code>getSubmittedFileName()</code></td><td>String</td><td>获得上传的原始文件名（这里是1.jpg）</td></tr></tbody></table><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MultipartConfig</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/parameter/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterFileServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Part</span> <span class="variable">usernamePart</span> <span class="operator">=</span> request.getPart(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">Part</span> <span class="variable">avatarPart</span> <span class="operator">=</span> request.getPart(<span class="string">&quot;avatar&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> avatarPart.getInputStream();</span><br><span class="line">        <span class="comment">// 保存在D://下XXX.jpg</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">OutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\1.jpg&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((length = inputStream.read(bytes) )!= -<span class="number">1</span>) &#123;</span><br><span class="line">            OutputStream.write(bytes,<span class="number">0</span>,length);</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close();</span><br><span class="line">        OutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例（与前面的getServletContext结合）"><a class="headerlink" href="#案例（与前面的getServletContext结合）"></a>案例（与前面的<code>getServletContext</code>结合）</h3><ul><li>保存文件到指定位置，文件位置由配置文件提供</li><li><code>application.properties</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pic.path=D://tmp</span><br></pre></td></tr></table></figure><ul><li><code>PropertiesInitiationlize.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(value = &quot;/properties&quot;, loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesInitializationServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(PropertiesInitializationServlet</span><br><span class="line">                .class.getClassLoader().getResourceAsStream(<span class="string">&quot;application.properties&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;pic.path&quot;</span>);</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;picPath&quot;</span>,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ParameterFile.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MultipartConfig</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/parameter/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterFileServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Part</span> <span class="variable">usernamePart</span> <span class="operator">=</span> request.getPart(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">Part</span> <span class="variable">avatarPart</span> <span class="operator">=</span> request.getPart(<span class="string">&quot;avatar&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">submittedFileName</span> <span class="operator">=</span> avatarPart.getSubmittedFileName();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> avatarPart.getInputStream();</span><br><span class="line">        <span class="comment">// 保存在D://下XXX.jpg</span></span><br><span class="line">        <span class="comment">//FileOutputStream OutputStream = new FileOutputStream(&quot;D:\\1.jpg&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存在指定位置，上传时的文件名叫什么，保存时候的文件名就叫什么</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">picPath</span> <span class="operator">=</span> (String) getServletContext().getAttribute(<span class="string">&quot;picPath&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(picPath, submittedFileName);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((length = inputStream.read(bytes) )!= -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(bytes,<span class="number">0</span>,length);</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="Request做请求的转发"><a class="headerlink" href="#Request做请求的转发"></a>Request做请求的转发</h2><ul><li>现在<strong>使用很少</strong></li><li>是用来转发的两个请求之间的数据共享<ul><li><strong>Request域</strong>可以用来转发的请求之间数据共享<ul><li><code>request.setAttribute</code></li><li><code>request.getAttribute</code></li></ul></li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servlet1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet1&quot;</span>);</span><br><span class="line">        <span class="comment">// 由Request提供的数据共享的空间</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zs&quot;</span>); </span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/servlet2&quot;</span>).forward(request,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">username</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;username&quot;</span>); <span class="comment">// 这个username就是zs</span></span><br><span class="line">        System.out.println(<span class="string">&quot;servlet2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当上面的代码执行<code>http://localhost:8080/demo1/servlet1</code>的同时会执行<code>/servlet2</code>，可以用来共享数据</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00 JavaEE_Servlet（转载自之前的CSDN）</title>
      <link href="/2024/05/13/JavaEE-Servlet/"/>
      <url>/2024/05/13/JavaEE-Servlet/</url>
      
        <content type="html"><![CDATA[<h1>JavaEE介绍</h1><ul><li><code>Java EE Enterprise Edition</code> <strong>企业开发 → 服务器开发</strong></li><li><strong>Servlet → Request\Response → 会话技术(Cookie/Session) → Web组件(Listener/Filter) → MVC</strong></li></ul><hr><h1>Servlet介绍</h1><ul><li><code>Server Applet</code>缩写组成的，小程序</li><li>运行在<strong>JavaEE容器（Tomcat）下的小程序</strong></li><li>通过<strong>Tomcat</strong>可以访问<code>静态资源</code>和<code>动态资源</code>，静态资源就是我们前端学的内容，比如HTML、JS、CSS、xml、字体文件、图片等内容，而<strong>Servlet提供的是动态资源的访问</strong></li><li>Servlet的开发其实<strong>就是Servlet中的service方法的开发</strong></li></ul><hr><h1>Web应用的目录结构</h1><ul><li>Web应用的根目录（ROOT）<ul><li>可以直接访问的资源（主要是静态资源，比如html、js、css、图片等）</li><li>WEB-INF文件夹 （受保护的资源的文件：就是不能够直接访问的资源）<ul><li><code>classes文件夹</code><ul><li>classpath路径，放的是<strong>编译后的字节码文件和配置文件</strong></li></ul></li><li><code>lib文件夹</code><ul><li>放的是<strong>第三方的依赖</strong>（scope为compile、runtime的依赖）</li></ul></li><li><code>web.xml</code><ul><li>web应用的描述文件 → 基本上可以<strong>不使用</strong>了</li></ul></li><li>其他的文件（其他不想被直接访问的资源）</li></ul></li></ul></li></ul><p><img src="/images/JavaEE-Servlet/image-20240513110342494.png" alt="image-20240513110342494" loading="lazy"></p><hr><h1>Maven工程的目录结构</h1><ol><li><p><strong>packaging的值为</strong><code>war</code>，war包直接丢入到Tomcat的webapps就可以使用<br><img src="/images/JavaEE-Servlet/image-20240513110429411.png" alt="image-20240513110429411" loading="lazy"></p></li><li><p><code>src\main</code><strong>新增一个webapp文件夹</strong><br><img src="/images/JavaEE-Servlet/image-20240513110453100.png" alt="image-20240513110453100" loading="lazy"></p></li><li><p>在IDEA中识别为Maven工程<br><img src="/images/JavaEE-Servlet/image-20240513110521740.png" alt="image-20240513110521740" loading="lazy"></p></li><li><p>Maven工程的目录结构</p><p><strong>Maven工程的根目录</strong>：</p><ul><li><p><code>src</code>文件夹</p><ul><li><p>main文件夹（开发）</p><ul><li>java文件夹（java代码）</li><li>resources文件夹（配置文件）</li><li><strong>webapp文件夹（web资源-对应的是web资源目录）</strong></li></ul></li><li><p><code>test</code>文件夹（测试）</p></li><li><p><code>pom.xml</code>文件</p></li><li><p><code>target</code>文件夹</p><ul><li>classes文件夹</li><li><strong>{artifactid}-{version}文件夹(WEB应用根目录)</strong></li></ul></li></ul></li></ul></li></ol><p><img src="/images/JavaEE-Servlet/image-20240513110650747.png" alt="image-20240513110650747" loading="lazy"></p><hr><h1>※对应关系图（Maven工程与Web应用之间的对应关系）</h1><p><img src="/images/JavaEE-Servlet/image-20240513110720762.png" alt="image-20240513110720762" loading="lazy"><br><strong>颜色是一一对应的</strong></p><p><strong>常见的报错</strong>：</p><ul><li><code>ClassNotFound</code>：编译后的内容里<strong>没有这个类</strong> → <code>target/artifactid-version/WEB-INF/</code> 里的<code>classes、lib</code>目录<ul><li><strong>classes里没有 → src/main/java</strong></li><li><strong>lib里没有 → pom.xml</strong></li></ul></li><li><code>FileNotFound</code> → <code>target/artifactid-version/</code></li></ul><hr><h1>在IDEA中开发Web应用</h1><p><font color="red"><strong>在idea中按照maven工程（web）的目录结构进行开发</strong></font></p><p><img src="/images/JavaEE-Servlet/image-20240513110756357.png" alt="image-20240513110756357" loading="lazy"></p><p><strong>需要我们做的事情</strong>：</p><ul><li><strong>packaging设置war（前面有提到），然后把Maven工程刷新一下</strong><ul><li>pom 父工程，提供子工程通用的内容，只有一个pom.xml，没有代码和文件</li><li>war web应用，要满足web应用的目录结构，要放在JavaEE容器下运行</li><li>jar 默认的打包方式，如果想要运行jar，里面要包含main方法</li></ul></li><li><strong>增加Tomcat server</strong><ul><li>右上角锤子旁边编辑配置</li></ul></li><li><strong>提供deployment的配置</strong>（docBase）<ul><li>artifact → war exploded</li><li>application context → 路径<img src="/images/JavaEE-Servlet/image-20240513110841496.png" alt="image-20240513110841496" loading="lazy"></li></ul></li></ul><hr><h1>Servlet</h1><ul><li><strong>Servlet是一种懒加载的单例模式</strong></li></ul><p>导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--provided：编译的时候需要而运行的时候不需要--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--强制要求写为provided → tomcat中已经有了这个依赖（tomcat的lib目录下有servlet-api.jar这个依赖）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="GenericServlet和HttpServlet"><a class="headerlink" href="#GenericServlet和HttpServlet"></a>GenericServlet和HttpServlet</h2><ul><li><code>GenericServlet</code>和<code>HttpServlet</code>都可以使用<strong>来进行Servlet的开发</strong></li><li>通过继承，来实现其方法<ul><li><ol><li><code>GenericServlet</code> <strong>实现其抽象方法</strong><code>service</code></li></ol></li><li><ol start="2"><li><code>HttpServlet</code> <strong>重写</strong><code>doGet</code>、<code>doPost</code>方法</li></ol></li></ul></li></ul><p><img src="/images/JavaEE-Servlet/image-20240513110908977.png" alt="image-20240513110908977" loading="lazy"></p><ul><li>这两种方式其实<strong>都是执行的是service方法</strong>，<strong>HttpServlet是GenericServlet的子类，只不过是HttpServlet里的service方法给你实现好了</strong></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承GenericServlet</span></span><br><span class="line"><span class="comment"> * 实现其抽象方法service</span></span><br><span class="line"><span class="comment"> * localhost:8080/demo1/first</span></span><br><span class="line"><span class="comment"> * 控制台里打印hello first servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/first&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstServlet</span> <span class="keyword">extends</span> <span class="title class_">GenericServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello first servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承HttpServletServlet</span></span><br><span class="line"><span class="comment"> * 重写其doGet、doPost方法</span></span><br><span class="line"><span class="comment"> * localhost:8080/demo1/second</span></span><br><span class="line"><span class="comment"> * 控制台里打印hello second servlet GET/POST</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/second&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello second servlet GET&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello second servlet POST&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/JavaEE-Servlet/image-20240513110950435.png" alt="image-20240513110950435" loading="lazy"></p><hr><h2 id="WebServlet注解"><a class="headerlink" href="#WebServlet注解"></a>@WebServlet注解</h2><h3 id="注解前置知识回顾"><a class="headerlink" href="#注解前置知识回顾"></a>注解前置知识回顾</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 注解是如何定义的 @interface</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元注解：新增注解对当前注解进行描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Target</span>：描述当前注解出现在什么位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Rentention</span>：当前注解在何时生效</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注解里的属性值：</span></span><br><span class="line"><span class="comment"> * 1. 没有default，就一定要写这个属性，有default就可以省略</span></span><br><span class="line"><span class="comment"> * 2. 如果注解中有value属性，并且使用的过程中仅仅使用了value属性，&quot;value = &quot;可以省略</span></span><br><span class="line"><span class="comment"> * 3. 如果属性值为数组，以及提供的值只有一个，&quot;&#123;&#125;&quot;是可以省略不写的</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * eg：当前注解想要写在类上，也可以写在方法上，并且在运行时生效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Target(value = &#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="comment">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Coo1heisenberg &#123;</span><br><span class="line">    <span class="comment">// 定义一个value属性的数组，默认值是空数组</span></span><br><span class="line">    <span class="keyword">public</span> String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="WebServlet注解源码"><a class="headerlink" href="#WebServlet注解源码"></a>@WebServlet注解源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span> <span class="comment">// 这个注解只能写在类上 </span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 这个注解运行时生效</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//  该Servlet的路径，通过该路径可以访问到这个servlet的service或doGet、doPost方法</span></span><br><span class="line"><span class="comment">//  eg：@WebServlet(value = &#123;&quot;/hello1&quot;, &quot;/hello2&quot;, &quot;/hello3&quot;&#125;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  和value属性的功能是一致的</span></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  加载顺序</span></span><br><span class="line"><span class="comment">//  默认值是负数；如果为负数的话，意味着放访问该servlet路径的时候，该Servlet才初始化；</span></span><br><span class="line"><span class="comment">//  如果不为负数，则Tomcat启动的时候就初始化，并且会按照数字的顺序来初始化不同的Servlet </span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  给当前这个servlet提供初始化参数</span></span><br><span class="line"><span class="comment">//  WebInitParam是一个注解，需要给name、value提供属性的值</span></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">displayName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>通常使用的是<strong>value属性</strong><ul><li>功能上<strong>和urlPatterns是一样的</strong>，但是value属性有一个<strong>好处是如果说该注解只使用了value属性的话，<code>value= </code>可以省略不写</strong></li></ul></li></ul><hr><h2 id="URL-Pattern"><a class="headerlink" href="#URL-Pattern"></a>URL-Pattern</h2><ol><li><strong>合法写法</strong>：<ul><li><p><code>/XXX</code> eg：/first、/hello1、/hello/world -&gt; 最左边要有 <code>/</code> , 不可以省略</p></li><li><p><code>*.xxx</code>  eg: <code>*.do</code>、<code>*.action</code>，如果访问<code>localhost:8080/demo3/hello/world.do</code>访问 <code>*.do</code></p></li></ul></li><li><strong>优先级</strong>：<ul><li><strong>路径匹配（eg：<code>/XXX</code>） ＞ 类型匹配（eg：<code>*.xxx</code>）</strong></li><li><strong>匹配度越高优先级越高</strong><ul><li>eg：<code>/hello.do</code> &gt; <code>*.do</code></li></ul></li></ul></li><li><strong>默认Servlet</strong>（起着一个<strong>兜底的功能</strong>）<ul><li><strong>Tomcat有提供默认的Servlet，它的url-Pattern就是 <code>/</code></strong></li><li><strong>缺省匹配就是：没有找到与之对应的servlet的话，找的就是缺省servlet</strong></li></ul></li></ol><ul><li>Tomcat提供的默认的Servlet其实它做的事情就是：<strong>在你的Web应用的根目录下去找对应的资源（文件），如果能找到，就输出出来，如果找不到就404</strong></li><li>如果你自己也开发了一个Servlet，你的这个<strong>Servlet的URL-Pattern也是<code>/</code> (<code>@WebServlet(&quot;/&quot;)</code>)</strong>，那么你这个Servlet就会变为<strong>默认的Servlet</strong></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/urlPattern1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrlPatternServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;/xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;*.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrlPatternServlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;*.do&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/JavaEE-Servlet/image-20240513111013676.png" alt="image-20240513111013676" loading="lazy"></p><hr><h2 id="Servlet的生命周期"><a class="headerlink" href="#Servlet的生命周期"></a>Servlet的生命周期</h2><table><thead><tr><th>方法名</th><th>时间</th><th>次数</th><th>说明</th></tr></thead><tbody><tr><td>init()</td><td>Servlet初始化</td><td>1</td><td>只执行一次，在service之前，用来用来做一些初始化</td></tr><tr><td>service()</td><td>访问Servlet对应的URL</td><td>n</td><td>执行多次，用来处理业务</td></tr><tr><td>destroy()</td><td>Servlet销毁</td><td>1</td><td>只执行一次，通常<strong>用来做资源的释放</strong></td></tr></tbody></table><ul><li>Servlet的初始化是在<code>@WebServlet</code>注解的时候，有一个属性<code>load-on-startup</code><ul><li>默认值是负数；</li><li>如果为负数的话，意味着访问该servlet路径的时候，该Servlet才初始化；</li><li>如果不为负数，则Tomcat启动的时候就初始化，并且会按照数字的顺序来初始化不同的Servlet</li></ul></li><li>Servlet的销毁：<ul><li>Tomcat停的时候</li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(value = &quot;/life1&quot;, loadOnStartup = -1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycleServlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/life2&quot;, loadOnStartup = 2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycleServlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/life3&quot;, loadOnStartup = 3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycleServlet3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span></span><br></pre></td></tr></table></figure><ul><li>执行顺序<ul><li><code>LifeCycleServlet2's init</code></li><li><code>LifeCycleServlet3's init</code></li><li><code>http://localhost:8080/demo4/life1</code>才会懒加载<code>LifeCycleServlet1's init</code>和<code>LifeCycleServlet1's service</code></li><li>访问谁谁执行<code>LifeCycleServlet1's service</code>/ <code>LifeCycleServlet2's service</code></li><li><code>LifeCycleServlet1、2、3's destroy</code></li></ul></li></ul><p><strong>举例</strong>：<br>比如：利用生命周期的<code>init()</code>方法，读取classpath路径下的<code>param.properties</code>里的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(value = &quot;/parameter&quot;, loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> ParameterServlet.class.getClassLoader()</span><br><span class="line">                .getResourceAsStream(<span class="string">&quot;param.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        map.put(<span class="string">&quot;password&quot;</span>,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> map.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> map.get(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">        System.out.println(<span class="string">&quot;password = &quot;</span> + password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="ServletConfig"><a class="headerlink" href="#ServletConfig"></a>ServletConfig</h2><ul><li>了解即可</li><li>键值对配置<ul><li>放入配置<ul><li><code>initParams = &#123;@WebInitParam (name = &quot;&quot;, value = &quot;&quot;)&#125;</code></li><li>这个成员变量在初始化阶段，已经获得了这些值</li></ul></li><li>获取配置<ul><li>在Servlet中已经提供了一个方法<code>getServletConfig()</code>方法，就是获得<code>GenericServlet</code>中的<code>ServletConfig</code>类型的成员变量<code>config</code></li></ul></li></ul></li><li>要通过ServletConfig实例（对象）来进行操作，每一个Servlet都有与之对应的ServletConfig</li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(value = &quot;/config&quot;, initParams = &#123;@WebInitParam(name = &quot;zs&quot;, value = &quot;123456&quot;)</span></span><br><span class="line"><span class="meta">        , @WebInitParam(name = &quot;ls&quot;, value = &quot;654321&quot;)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletConfigServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// ServletConfig是它父类的成员变量，有getServletConfig()这个方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> getServletConfig();</span><br><span class="line">        <span class="comment">// 获得zs、ls</span></span><br><span class="line">        <span class="comment">// 使用起来类似于iterator</span></span><br><span class="line">        Enumeration&lt;String&gt; names = servletConfig.getInitParameterNames();</span><br><span class="line">        <span class="comment">// 使用迭代器的方式遍历</span></span><br><span class="line">        <span class="keyword">while</span>(names.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> names.nextElement();</span><br><span class="line">            System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> servletConfig.getInitParameter(name);</span><br><span class="line">            System.out.println(<span class="string">&quot;value = &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获得123456</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">zs</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;zs = &quot;</span> + zs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="ServletContext"><a class="headerlink" href="#ServletContext"></a>ServletContext</h2><ul><li>整个Web应用提供的<strong>共享空间</strong>，<strong>应用程序启动的时候会初始化</strong>，可以通过<strong>键值对&lt;Key, Value&gt;<strong>的方式在</strong>存储和取出数据</strong></li></ul><p><img src="/images/JavaEE-Servlet/image-20240513111031405.png" alt="image-20240513111031405" loading="lazy"></p><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 举例：</span></span><br><span class="line"><span class="comment"> * 通过servlet1 向servletContext中存入 username = zs 这样的数据</span></span><br><span class="line"><span class="comment"> * 通过servlet2 向servletContext根据 key=username 取出数据</span></span><br><span class="line"><span class="comment"> * 通过servlet3 向servletContext根据 key=username 取出数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * step1：首先获取ServletContext</span></span><br><span class="line"><span class="comment"> *    a. 通过getServletConfig().getServletContext()</span></span><br><span class="line"><span class="comment"> *    b. 通过getServletContext()</span></span><br><span class="line"><span class="comment"> * step2：servlet1中存取</span></span><br><span class="line"><span class="comment"> * step3：servlet2、servlet3读取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/servlet1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 1.a</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext1</span> <span class="operator">=</span> getServletConfig().getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.b</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext2</span> <span class="operator">=</span> getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// setAttribute(String s, Object o)</span></span><br><span class="line">        <span class="comment">// 第一个值：key为String字符串</span></span><br><span class="line">        <span class="comment">// 第二个值：value为Object类型</span></span><br><span class="line">        servletContext1.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/servlet2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">username</span> <span class="operator">=</span> servletContext.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/servlet3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">username</span> <span class="operator">=</span> servletContext.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例</strong>：</p><ul><li>classpath路径下新增一个param.properties配置文件，我们想要里面的值，在整个web应用中共享<ul><li><ol><li>提供一个Servlet，这个Servlet它的loadOnStartup设置为正数</li></ol></li><li><ol start="2"><li>重写init方法，将properties配置文件读取，提供一个properties实例</li></ol></li><li><ol start="3"><li>获取ServletContext，并且properties实例放到ServletContext中</li></ol></li></ul></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(value = &quot;/servlet&quot;, loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Servlet1.class.getClassLoader()</span><br><span class="line">                .getResourceAsStream(<span class="string">&quot;param.properties&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletConfig().getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;properties&quot;</span>,properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> (Properties) getServletContext().getAttribute(<span class="string">&quot;properties&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="xml配置"><a class="headerlink" href="#xml配置"></a>xml配置</h2><ul><li><strong>现在被<code>@WebServlet</code>取代了</strong></li><li>在webapp目录下的WEB-INF文件夹下配置web.xml<br><img src="/images/JavaEE-Servlet/image-20240513111058759.png" alt="image-20240513111058759" loading="lazy"></li><li>配置web.xml文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.coo1heisenberg.demo8.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>zs<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/helloservlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">等价于：</span><br><span class="line">@WebServlet(value = &quot;/helloservlet&quot;, loadOnStartup = 1, initParams =</span><br><span class="line">        &#123;@WebInitParam(name = &quot;zs&quot;, value = &quot;123456&quot;)&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="JSP"><a class="headerlink" href="#JSP"></a>JSP</h2><ul><li><strong>这项技术已经被淘汰了</strong></li><li>作用：<strong>提供的是类似于html这样的文件</strong><ul><li>主要<strong>web资源根目录</strong></li><li>在jsp中也<strong>可以包含css样式，js脚本</strong></li></ul></li><li>JSP使用的是<code>jspServlet</code>（Tomcat中有的）</li><li>jsp文件其实最终会被编译为Servlet代码<br><img src="/images/JavaEE-Servlet/image-20240513111116382.png" alt="image-20240513111116382" loading="lazy"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
